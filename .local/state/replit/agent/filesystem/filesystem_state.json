{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nThis is a comprehensive HR recruitment and talent management system built with a modern TypeScript/React stack. The application provides end-to-end recruitment functionality including candidate management, job posting, interview scheduling, AI-powered resume analysis, and candidate-job matching. The system features an AI assistant for recruitment guidance and customizable prompt templates for consistent AI interactions.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React 18 with TypeScript for type safety\n- **Routing**: Wouter for lightweight client-side routing\n- **State Management**: TanStack Query for server state management and caching\n- **UI Framework**: Radix UI components with shadcn/ui design system\n- **Styling**: Tailwind CSS with CSS variables for theming\n- **Build Tool**: Vite for fast development and optimized production builds\n\n## Backend Architecture\n- **Runtime**: Node.js with Express.js REST API server\n- **Language**: TypeScript with ES modules\n- **Database ORM**: Drizzle ORM with PostgreSQL dialect\n- **File Processing**: Multer for file uploads, PDF parsing for resume text extraction\n- **Development**: Hot module replacement with Vite integration\n\n## Data Storage Solutions\n- **Primary Database**: PostgreSQL with Neon serverless hosting\n- **Object Storage**: Google Cloud Storage for file storage (resumes, documents)\n- **Schema Management**: Drizzle migrations for database versioning\n- **Data Models**: Users, Jobs, Candidates, Interviews, AI Conversations, Job Matches, Prompt Templates, and Candidate Status History\n\n## Authentication and Authorization\n- **Object-level ACL**: Custom access control system for file storage with configurable permission groups\n- **Session Management**: Cookie-based authentication with credential handling\n- **File Security**: Pre-signed URLs for secure file uploads and access control policies\n\n## AI Integration Architecture\n- **AI Provider**: OpenAI GPT-5 for natural language processing\n- **Resume Analysis**: Automated skill extraction, experience calculation, and candidate summarization\n- **Job Matching**: AI-powered candidate-job compatibility scoring with explanations\n- **Conversational AI**: Chat interface for recruitment guidance and best practices\n- **Template System**: Customizable prompt templates for consistent AI interactions across different use cases\n\n## External Dependencies\n\n- **Database**: Neon PostgreSQL serverless database with connection pooling\n- **Object Storage**: Google Cloud Storage with Replit sidecar authentication\n- **AI Services**: OpenAI API for resume analysis, job matching, and conversational assistance\n- **File Processing**: pdf-parse library for extracting text from PDF resumes\n- **File Upload**: Uppy.js with AWS S3 compatibility for robust file handling\n- **UI Components**: Extensive Radix UI component library for accessible interfaces\n- **Development Tools**: Replit-specific plugins for cartographer and dev banner in development","size_bytes":3068},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { createServer } from \"http\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { CollaborationService } from \"./websocket\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  // Create HTTP server\n  const httpServer = createServer(app);\n  \n  // Initialize WebSocket collaboration service\n  const collaborationService = new CollaborationService(httpServer);\n  \n  // Make collaboration service available to routes\n  app.set('collaborationService', collaborationService);\n  \n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  httpServer.listen(port, \"0.0.0.0\", () => {\n    log(`serving on port ${port}`);\n    log(`WebSocket collaboration service running`);\n  });\n})();\n","size_bytes":2468},"server/objectAcl.ts":{"content":"import { File } from \"@google-cloud/storage\";\n\nconst ACL_POLICY_METADATA_KEY = \"custom:aclPolicy\";\n\n// The type of the access group.\n//\n// Can be flexibly defined according to the use case.\n//\n// Examples:\n// - USER_LIST: the users from a list stored in the database;\n// - EMAIL_DOMAIN: the users whose email is in a specific domain;\n// - GROUP_MEMBER: the users who are members of a specific group;\n// - SUBSCRIBER: the users who are subscribers of a specific service / content\n//   creator.\nexport enum ObjectAccessGroupType {}\n\n// The logic user group that can access the object.\nexport interface ObjectAccessGroup {\n  // The type of the access group.\n  type: ObjectAccessGroupType;\n  // The logic id that is enough to identify the qualified group members.\n  //\n  // It may have different format for different types. For example:\n  // - for USER_LIST, the id could be the user list db entity id, and the\n  //   user list db entity could contain a bunch of user ids. User needs\n  //   to be a member of the user list to be able to access the object.\n  // - for EMAIL_DOMAIN, the id could be the email domain, and the user needs\n  //   to have an email with the domain to be able to access the object.\n  // - for GROUP_MEMBER, the id could be the group db entity id, and the\n  //   group db entity could contain a bunch of user ids. User needs to be\n  //   a member of the group to be able to access the object.\n  // - for SUBSCRIBER, the id could be the subscriber db entity id, and the\n  //   subscriber db entity could contain a bunch of user ids. User needs to\n  //   be a subscriber to be able to access the object.\n  id: string;\n}\n\nexport enum ObjectPermission {\n  READ = \"read\",\n  WRITE = \"write\",\n}\n\nexport interface ObjectAclRule {\n  group: ObjectAccessGroup;\n  permission: ObjectPermission;\n}\n\n// The ACL policy of the object.\n// This would be set as part of the object custom metadata:\n// - key: \"custom:aclPolicy\"\n// - value: JSON string of the ObjectAclPolicy object.\nexport interface ObjectAclPolicy {\n  owner: string;\n  visibility: \"public\" | \"private\";\n  aclRules?: Array<ObjectAclRule>;\n}\n\n// Check if the requested permission is allowed based on the granted permission.\nfunction isPermissionAllowed(\n  requested: ObjectPermission,\n  granted: ObjectPermission,\n): boolean {\n  // Users granted with read or write permissions can read the object.\n  if (requested === ObjectPermission.READ) {\n    return [ObjectPermission.READ, ObjectPermission.WRITE].includes(granted);\n  }\n\n  // Only users granted with write permissions can write the object.\n  return granted === ObjectPermission.WRITE;\n}\n\n// The base class for all access groups.\n//\n// Different types of access groups can be implemented according to the use case.\nabstract class BaseObjectAccessGroup implements ObjectAccessGroup {\n  constructor(\n    public readonly type: ObjectAccessGroupType,\n    public readonly id: string,\n  ) {}\n\n  // Check if the user is a member of the group.\n  public abstract hasMember(userId: string): Promise<boolean>;\n}\n\nfunction createObjectAccessGroup(\n  group: ObjectAccessGroup,\n): BaseObjectAccessGroup {\n  switch (group.type) {\n    // Implement the case for each type of access group to instantiate.\n    //\n    // For example:\n    // case \"USER_LIST\":\n    //   return new UserListAccessGroup(group.id);\n    // case \"EMAIL_DOMAIN\":\n    //   return new EmailDomainAccessGroup(group.id);\n    // case \"GROUP_MEMBER\":\n    //   return new GroupMemberAccessGroup(group.id);\n    // case \"SUBSCRIBER\":\n    //   return new SubscriberAccessGroup(group.id);\n    default:\n      throw new Error(`Unknown access group type: ${group.type}`);\n  }\n}\n\n// Sets the ACL policy to the object metadata.\nexport async function setObjectAclPolicy(\n  objectFile: File,\n  aclPolicy: ObjectAclPolicy,\n): Promise<void> {\n  const [exists] = await objectFile.exists();\n  if (!exists) {\n    throw new Error(`Object not found: ${objectFile.name}`);\n  }\n\n  await objectFile.setMetadata({\n    metadata: {\n      [ACL_POLICY_METADATA_KEY]: JSON.stringify(aclPolicy),\n    },\n  });\n}\n\n// Gets the ACL policy from the object metadata.\nexport async function getObjectAclPolicy(\n  objectFile: File,\n): Promise<ObjectAclPolicy | null> {\n  const [metadata] = await objectFile.getMetadata();\n  const aclPolicy = metadata?.metadata?.[ACL_POLICY_METADATA_KEY];\n  if (!aclPolicy) {\n    return null;\n  }\n  return JSON.parse(aclPolicy as string);\n}\n\n// Checks if the user can access the object.\nexport async function canAccessObject({\n  userId,\n  objectFile,\n  requestedPermission,\n}: {\n  userId?: string;\n  objectFile: File;\n  requestedPermission: ObjectPermission;\n}): Promise<boolean> {\n  // When this function is called, the acl policy is required.\n  const aclPolicy = await getObjectAclPolicy(objectFile);\n  if (!aclPolicy) {\n    return false;\n  }\n\n  // Public objects are always accessible for read.\n  if (\n    aclPolicy.visibility === \"public\" &&\n    requestedPermission === ObjectPermission.READ\n  ) {\n    return true;\n  }\n\n  // Access control requires the user id.\n  if (!userId) {\n    return false;\n  }\n\n  // The owner of the object can always access it.\n  if (aclPolicy.owner === userId) {\n    return true;\n  }\n\n  // Go through the ACL rules to check if the user has the required permission.\n  for (const rule of aclPolicy.aclRules || []) {\n    const accessGroup = createObjectAccessGroup(rule.group);\n    if (\n      (await accessGroup.hasMember(userId)) &&\n      isPermissionAllowed(requestedPermission, rule.permission)\n    ) {\n      return true;\n    }\n  }\n\n  return false;\n}\n","size_bytes":5544},"server/objectStorage.ts":{"content":"import { Storage, File } from \"@google-cloud/storage\";\nimport { Response } from \"express\";\nimport { randomUUID } from \"crypto\";\nimport {\n  ObjectAclPolicy,\n  ObjectPermission,\n  canAccessObject,\n  getObjectAclPolicy,\n  setObjectAclPolicy,\n} from \"./objectAcl\";\n\nconst REPLIT_SIDECAR_ENDPOINT = \"http://127.0.0.1:1106\";\n\n// The object storage client is used to interact with the object storage service.\nexport const objectStorageClient = new Storage({\n  credentials: {\n    audience: \"replit\",\n    subject_token_type: \"access_token\",\n    token_url: `${REPLIT_SIDECAR_ENDPOINT}/token`,\n    type: \"external_account\",\n    credential_source: {\n      url: `${REPLIT_SIDECAR_ENDPOINT}/credential`,\n      format: {\n        type: \"json\",\n        subject_token_field_name: \"access_token\",\n      },\n    },\n    universe_domain: \"googleapis.com\",\n  },\n  projectId: \"\",\n});\n\nexport class ObjectNotFoundError extends Error {\n  constructor() {\n    super(\"Object not found\");\n    this.name = \"ObjectNotFoundError\";\n    Object.setPrototypeOf(this, ObjectNotFoundError.prototype);\n  }\n}\n\n// The object storage service is used to interact with the object storage service.\nexport class ObjectStorageService {\n  constructor() {}\n\n  // Gets the public object search paths.\n  getPublicObjectSearchPaths(): Array<string> {\n    const pathsStr = process.env.PUBLIC_OBJECT_SEARCH_PATHS || \"\";\n    const paths = Array.from(\n      new Set(\n        pathsStr\n          .split(\",\")\n          .map((path) => path.trim())\n          .filter((path) => path.length > 0)\n      )\n    );\n    if (paths.length === 0) {\n      throw new Error(\n        \"PUBLIC_OBJECT_SEARCH_PATHS not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PUBLIC_OBJECT_SEARCH_PATHS env var (comma-separated paths).\"\n      );\n    }\n    return paths;\n  }\n\n  // Gets the private object directory.\n  getPrivateObjectDir(): string {\n    const dir = process.env.PRIVATE_OBJECT_DIR || \"\";\n    if (!dir) {\n      throw new Error(\n        \"PRIVATE_OBJECT_DIR not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PRIVATE_OBJECT_DIR env var.\"\n      );\n    }\n    return dir;\n  }\n\n  // Search for a public object from the search paths.\n  async searchPublicObject(filePath: string): Promise<File | null> {\n    for (const searchPath of this.getPublicObjectSearchPaths()) {\n      const fullPath = `${searchPath}/${filePath}`;\n\n      // Full path format: /<bucket_name>/<object_name>\n      const { bucketName, objectName } = parseObjectPath(fullPath);\n      const bucket = objectStorageClient.bucket(bucketName);\n      const file = bucket.file(objectName);\n\n      // Check if file exists\n      const [exists] = await file.exists();\n      if (exists) {\n        return file;\n      }\n    }\n\n    return null;\n  }\n\n  // Downloads an object to the response.\n  async downloadObject(file: File, res: Response, cacheTtlSec: number = 3600) {\n    try {\n      // Get file metadata\n      const [metadata] = await file.getMetadata();\n      // Get the ACL policy for the object.\n      const aclPolicy = await getObjectAclPolicy(file);\n      const isPublic = aclPolicy?.visibility === \"public\";\n      // Set appropriate headers\n      res.set({\n        \"Content-Type\": metadata.contentType || \"application/octet-stream\",\n        \"Content-Length\": metadata.size,\n        \"Cache-Control\": `${\n          isPublic ? \"public\" : \"private\"\n        }, max-age=${cacheTtlSec}`,\n      });\n\n      // Stream the file to the response\n      const stream = file.createReadStream();\n\n      stream.on(\"error\", (err) => {\n        console.error(\"Stream error:\", err);\n        if (!res.headersSent) {\n          res.status(500).json({ error: \"Error streaming file\" });\n        }\n      });\n\n      stream.pipe(res);\n    } catch (error) {\n      console.error(\"Error downloading file:\", error);\n      if (!res.headersSent) {\n        res.status(500).json({ error: \"Error downloading file\" });\n      }\n    }\n  }\n\n  // Gets the upload URL for an object entity.\n  async getObjectEntityUploadURL(): Promise<string> {\n    const privateObjectDir = this.getPrivateObjectDir();\n    if (!privateObjectDir) {\n      throw new Error(\n        \"PRIVATE_OBJECT_DIR not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PRIVATE_OBJECT_DIR env var.\"\n      );\n    }\n\n    const objectId = randomUUID();\n    const fullPath = `${privateObjectDir}/uploads/${objectId}`;\n\n    const { bucketName, objectName } = parseObjectPath(fullPath);\n\n    // Sign URL for PUT method with TTL\n    return signObjectURL({\n      bucketName,\n      objectName,\n      method: \"PUT\",\n      ttlSec: 900,\n    });\n  }\n\n  // Gets the object entity file from the object path.\n  async getObjectEntityFile(objectPath: string): Promise<File> {\n    if (!objectPath.startsWith(\"/objects/\")) {\n      throw new ObjectNotFoundError();\n    }\n\n    const parts = objectPath.slice(1).split(\"/\");\n    if (parts.length < 2) {\n      throw new ObjectNotFoundError();\n    }\n\n    const entityId = parts.slice(1).join(\"/\");\n    let entityDir = this.getPrivateObjectDir();\n    if (!entityDir.endsWith(\"/\")) {\n      entityDir = `${entityDir}/`;\n    }\n    const objectEntityPath = `${entityDir}${entityId}`;\n    const { bucketName, objectName } = parseObjectPath(objectEntityPath);\n    const bucket = objectStorageClient.bucket(bucketName);\n    const objectFile = bucket.file(objectName);\n    const [exists] = await objectFile.exists();\n    if (!exists) {\n      throw new ObjectNotFoundError();\n    }\n    return objectFile;\n  }\n\n  normalizeObjectEntityPath(\n    rawPath: string,\n  ): string {\n    if (!rawPath.startsWith(\"https://storage.googleapis.com/\")) {\n      return rawPath;\n    }\n  \n    // Extract the path from the URL by removing query parameters and domain\n    const url = new URL(rawPath);\n    const rawObjectPath = url.pathname;\n  \n    let objectEntityDir = this.getPrivateObjectDir();\n    if (!objectEntityDir.endsWith(\"/\")) {\n      objectEntityDir = `${objectEntityDir}/`;\n    }\n  \n    if (!rawObjectPath.startsWith(objectEntityDir)) {\n      return rawObjectPath;\n    }\n  \n    // Extract the entity ID from the path\n    const entityId = rawObjectPath.slice(objectEntityDir.length);\n    return `/objects/${entityId}`;\n  }\n\n  // Tries to set the ACL policy for the object entity and return the normalized path.\n  async trySetObjectEntityAclPolicy(\n    rawPath: string,\n    aclPolicy: ObjectAclPolicy\n  ): Promise<string> {\n    const normalizedPath = this.normalizeObjectEntityPath(rawPath);\n    if (!normalizedPath.startsWith(\"/\")) {\n      return normalizedPath;\n    }\n\n    const objectFile = await this.getObjectEntityFile(normalizedPath);\n    await setObjectAclPolicy(objectFile, aclPolicy);\n    return normalizedPath;\n  }\n\n  // Checks if the user can access the object entity.\n  async canAccessObjectEntity({\n    userId,\n    objectFile,\n    requestedPermission,\n  }: {\n    userId?: string;\n    objectFile: File;\n    requestedPermission?: ObjectPermission;\n  }): Promise<boolean> {\n    return canAccessObject({\n      userId,\n      objectFile,\n      requestedPermission: requestedPermission ?? ObjectPermission.READ,\n    });\n  }\n}\n\nfunction parseObjectPath(path: string): {\n  bucketName: string;\n  objectName: string;\n} {\n  if (!path.startsWith(\"/\")) {\n    path = `/${path}`;\n  }\n  const pathParts = path.split(\"/\");\n  if (pathParts.length < 3) {\n    throw new Error(\"Invalid path: must contain at least a bucket name\");\n  }\n\n  const bucketName = pathParts[1];\n  const objectName = pathParts.slice(2).join(\"/\");\n\n  return {\n    bucketName,\n    objectName,\n  };\n}\n\nasync function signObjectURL({\n  bucketName,\n  objectName,\n  method,\n  ttlSec,\n}: {\n  bucketName: string;\n  objectName: string;\n  method: \"GET\" | \"PUT\" | \"DELETE\" | \"HEAD\";\n  ttlSec: number;\n}): Promise<string> {\n  const request = {\n    bucket_name: bucketName,\n    object_name: objectName,\n    method,\n    expires_at: new Date(Date.now() + ttlSec * 1000).toISOString(),\n  };\n  const response = await fetch(\n    `${REPLIT_SIDECAR_ENDPOINT}/object-storage/signed-object-url`,\n    {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(request),\n    }\n  );\n  if (!response.ok) {\n    throw new Error(\n      `Failed to sign object URL, errorcode: ${response.status}, ` +\n        `make sure you're running on Replit`\n    );\n  }\n\n  const { signed_url: signedURL } = await response.json();\n  return signedURL;\n}\n","size_bytes":8408},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { \n  insertJobSchema, \n  insertCandidateSchema, \n  insertInterviewSchema,\n  insertActivityLogSchema,\n  insertNotificationSchema,\n  insertCommentSchema\n} from \"@shared/schema\";\nimport { aiService } from \"./services/aiService\";\nimport { resumeParserService } from \"./services/resumeParser\";\nimport { matchingService } from \"./services/matchingService\";\nimport { promptTemplateService } from \"./services/promptTemplates\";\nimport { ObjectStorageService } from \"./objectStorage\";\nimport multer from \"multer\";\n\n// Configure multer for file uploads\nconst upload = multer({ \n  storage: multer.memoryStorage(),\n  limits: { fileSize: 10 * 1024 * 1024 } // 10MB limit\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  \n  // Object storage routes\n  app.post(\"/api/objects/upload\", async (req, res) => {\n    try {\n      const objectStorageService = new ObjectStorageService();\n      const uploadURL = await objectStorageService.getObjectEntityUploadURL();\n      res.json({ uploadURL });\n    } catch (error) {\n      console.error(\"Error getting upload URL:\", error);\n      res.status(500).json({ error: \"Failed to get upload URL\" });\n    }\n  });\n\n  // Prompt template routes\n  app.get(\"/api/prompt-templates\", async (req, res) => {\n    try {\n      const { category } = req.query;\n      \n      let templates;\n      if (category && typeof category === \"string\") {\n        templates = await promptTemplateService.getTemplatesByCategory(category as any);\n      } else {\n        templates = await promptTemplateService.getTemplates();\n      }\n      \n      res.json(templates);\n    } catch (error) {\n      console.error(\"Error fetching prompt templates:\", error);\n      res.status(500).json({ error: \"Failed to fetch prompt templates\" });\n    }\n  });\n\n  app.get(\"/api/prompt-templates/:id\", async (req, res) => {\n    try {\n      const template = await promptTemplateService.getTemplate(req.params.id);\n      if (!template) {\n        return res.status(404).json({ error: \"Template not found\" });\n      }\n      res.json(template);\n    } catch (error) {\n      console.error(\"Error fetching prompt template:\", error);\n      res.status(500).json({ error: \"Failed to fetch prompt template\" });\n    }\n  });\n\n  app.post(\"/api/prompt-templates\", async (req, res) => {\n    try {\n      const template = await promptTemplateService.createTemplate(req.body);\n      res.status(201).json(template);\n    } catch (error) {\n      console.error(\"Error creating prompt template:\", error);\n      res.status(500).json({ error: \"Failed to create prompt template\" });\n    }\n  });\n\n  app.put(\"/api/prompt-templates/:id\", async (req, res) => {\n    try {\n      const template = await promptTemplateService.updateTemplate(req.params.id, req.body);\n      if (!template) {\n        return res.status(404).json({ error: \"Template not found\" });\n      }\n      res.json(template);\n    } catch (error) {\n      console.error(\"Error updating prompt template:\", error);\n      res.status(500).json({ error: \"Failed to update prompt template\" });\n    }\n  });\n\n  app.delete(\"/api/prompt-templates/:id\", async (req, res) => {\n    try {\n      const deleted = await promptTemplateService.deleteTemplate(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ error: \"Template not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting prompt template:\", error);\n      res.status(500).json({ error: \"Failed to delete prompt template\" });\n    }\n  });\n\n  // Dashboard metrics\n  app.get(\"/api/dashboard/metrics\", async (req, res) => {\n    try {\n      const [candidates, jobs, interviews] = await Promise.all([\n        storage.getCandidates(),\n        storage.getJobs(),\n        storage.getInterviews()\n      ]);\n\n      const totalCandidates = candidates.length;\n      const activeJobs = jobs.filter(job => job.status === \"active\").length;\n      const upcomingInterviews = interviews.filter(\n        interview => interview.scheduledDate > new Date() && interview.status === \"scheduled\"\n      ).length;\n\n      // Calculate funnel metrics\n      const appliedCandidates = candidates.filter(c => c.status === \"applied\").length;\n      const screeningCandidates = candidates.filter(c => c.status === \"screening\").length;\n      const interviewCandidates = candidates.filter(c => c.status === \"interview\").length;\n      const hiredCandidates = candidates.filter(c => c.status === \"hired\").length;\n\n      const interviewRate = totalCandidates > 0 ? Math.round((interviewCandidates / totalCandidates) * 100) : 0;\n      const hireRate = totalCandidates > 0 ? Math.round((hiredCandidates / totalCandidates) * 100) : 0;\n\n      res.json({\n        totalCandidates,\n        activeJobs,\n        upcomingInterviews,\n        interviewRate,\n        hireRate,\n        funnel: {\n          applied: appliedCandidates,\n          screening: screeningCandidates,\n          interview: interviewCandidates,\n          hired: hiredCandidates,\n        }\n      });\n    } catch (error) {\n      console.error(\"Error fetching dashboard metrics:\", error);\n      res.status(500).json({ error: \"Failed to fetch metrics\" });\n    }\n  });\n\n  // Jobs routes\n  app.get(\"/api/jobs\", async (req, res) => {\n    try {\n      const jobs = await storage.getJobs();\n      res.json(jobs);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch jobs\" });\n    }\n  });\n\n  app.get(\"/api/jobs/:id\", async (req, res) => {\n    try {\n      const job = await storage.getJob(req.params.id);\n      if (!job) {\n        return res.status(404).json({ error: \"Job not found\" });\n      }\n      res.json(job);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch job\" });\n    }\n  });\n\n  app.post(\"/api/jobs\", async (req, res) => {\n    try {\n      const jobData = insertJobSchema.parse(req.body);\n      const job = await storage.createJob(jobData);\n      res.status(201).json(job);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid job data\" });\n    }\n  });\n\n  app.put(\"/api/jobs/:id\", async (req, res) => {\n    try {\n      const job = await storage.updateJob(req.params.id, req.body);\n      if (!job) {\n        return res.status(404).json({ error: \"Job not found\" });\n      }\n      res.json(job);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to update job\" });\n    }\n  });\n\n  app.delete(\"/api/jobs/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deleteJob(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ error: \"Job not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete job\" });\n    }\n  });\n\n  // Candidates routes\n  app.get(\"/api/candidates\", async (req, res) => {\n    try {\n      const { search } = req.query;\n      let candidates;\n      \n      if (search && typeof search === \"string\") {\n        candidates = await storage.searchCandidates(search);\n      } else {\n        candidates = await storage.getCandidates();\n      }\n      \n      res.json(candidates);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch candidates\" });\n    }\n  });\n\n  app.get(\"/api/candidates/:id\", async (req, res) => {\n    try {\n      const candidate = await storage.getCandidate(req.params.id);\n      if (!candidate) {\n        return res.status(404).json({ error: \"Candidate not found\" });\n      }\n      res.json(candidate);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch candidate\" });\n    }\n  });\n\n  app.post(\"/api/candidates\", async (req, res) => {\n    try {\n      const candidateData = insertCandidateSchema.parse(req.body);\n      const candidate = await storage.createCandidate(candidateData);\n      res.status(201).json(candidate);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid candidate data\" });\n    }\n  });\n\n  app.put(\"/api/candidates/:id\", async (req, res) => {\n    try {\n      const candidate = await storage.updateCandidate(req.params.id, req.body);\n      if (!candidate) {\n        return res.status(404).json({ error: \"Candidate not found\" });\n      }\n      res.json(candidate);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to update candidate\" });\n    }\n  });\n\n  app.delete(\"/api/candidates/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deleteCandidate(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ error: \"Candidate not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete candidate\" });\n    }\n  });\n\n  // Resume upload and parsing\n  app.post(\"/api/candidates/:id/resume\", upload.single(\"resume\"), async (req, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ error: \"No file uploaded\" });\n      }\n\n      const candidate = await storage.getCandidate(req.params.id);\n      if (!candidate) {\n        return res.status(404).json({ error: \"Candidate not found\" });\n      }\n\n      // Parse the resume\n      const parsedResume = await resumeParserService.parseFile(\n        req.file.buffer, \n        req.file.mimetype\n      );\n\n      // Extract contact info and skills\n      const contactInfo = resumeParserService.extractContactInfo(parsedResume.text);\n      const skills = resumeParserService.extractSkills(parsedResume.text);\n      const experience = resumeParserService.extractExperience(parsedResume.text);\n\n      // Get AI analysis\n      const aiAnalysis = await aiService.analyzeResume(parsedResume.text);\n\n      // Update candidate with parsed information\n      const updatedCandidate = await storage.updateCandidate(req.params.id, {\n        resumeText: parsedResume.text,\n        skills: skills.length > 0 ? skills : aiAnalysis.skills,\n        experience: experience > 0 ? experience : aiAnalysis.experience,\n        aiSummary: aiAnalysis.summary,\n        name: contactInfo.name || candidate.name,\n        email: contactInfo.email || candidate.email,\n        phone: contactInfo.phone || candidate.phone,\n      });\n\n      res.json({\n        candidate: updatedCandidate,\n        analysis: aiAnalysis,\n        parsedData: {\n          contactInfo,\n          skills,\n          experience,\n          metadata: parsedResume.metadata,\n        }\n      });\n    } catch (error) {\n      console.error(\"Error processing resume:\", error);\n      res.status(500).json({ error: \"Failed to process resume\" });\n    }\n  });\n\n  // AI-powered candidate matching\n  app.post(\"/api/jobs/:jobId/match-candidates\", async (req, res) => {\n    try {\n      const job = await storage.getJob(req.params.jobId);\n      if (!job) {\n        return res.status(404).json({ error: \"Job not found\" });\n      }\n\n      const candidates = await storage.getCandidates();\n      const matches = await matchingService.findMatchingCandidates(job, candidates);\n\n      res.json(matches);\n    } catch (error) {\n      console.error(\"Error matching candidates:\", error);\n      res.status(500).json({ error: \"Failed to match candidates\" });\n    }\n  });\n\n  // Enhanced candidate matching with specific scores\n  app.post(\"/api/candidates/:candidateId/calculate-match\", async (req, res) => {\n    try {\n      const { jobId } = req.body;\n      \n      const [candidate, job] = await Promise.all([\n        storage.getCandidate(req.params.candidateId),\n        storage.getJob(jobId)\n      ]);\n\n      if (!candidate) {\n        return res.status(404).json({ error: \"Candidate not found\" });\n      }\n      \n      if (!job) {\n        return res.status(404).json({ error: \"Job not found\" });\n      }\n\n      // Calculate both basic and AI-powered match\n      const basicMatch = matchingService.calculateBasicMatch(candidate, job);\n      \n      let aiMatch;\n      try {\n        const aiMatchResult = await aiService.matchCandidateToJob(\n          {\n            skills: (candidate.skills as string[]) || [],\n            experience: candidate.experience || 0,\n            education: candidate.education || \"\",\n            position: candidate.position || \"\",\n          },\n          {\n            title: job.title,\n            requirements: (job.requirements as string[]) || [],\n            description: job.description,\n          }\n        );\n        aiMatch = aiMatchResult;\n      } catch (error) {\n        console.error(\"AI match failed, using basic match:\", error);\n        aiMatch = { score: basicMatch, reasons: [\"Basic matching used\"], explanation: \"AI matching unavailable\" };\n      }\n\n      // Update candidate's match score\n      await storage.updateCandidate(req.params.candidateId, {\n        matchScore: aiMatch.score.toString(),\n      });\n\n      res.json({\n        candidateId: candidate.id,\n        jobId: job.id,\n        basicMatchScore: basicMatch,\n        aiMatchScore: aiMatch.score,\n        reasons: aiMatch.reasons,\n        explanation: aiMatch.explanation,\n      });\n    } catch (error) {\n      console.error(\"Error calculating match:\", error);\n      res.status(500).json({ error: \"Failed to calculate match\" });\n    }\n  });\n\n  // Interviews routes\n  app.get(\"/api/interviews\", async (req, res) => {\n    try {\n      const { candidateId, jobId } = req.query;\n      \n      let interviews;\n      if (candidateId && typeof candidateId === \"string\") {\n        interviews = await storage.getInterviewsByCandidate(candidateId);\n      } else if (jobId && typeof jobId === \"string\") {\n        interviews = await storage.getInterviewsByJob(jobId);\n      } else {\n        interviews = await storage.getInterviews();\n      }\n      \n      res.json(interviews);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch interviews\" });\n    }\n  });\n\n  app.get(\"/api/interviews/:id\", async (req, res) => {\n    try {\n      const interview = await storage.getInterview(req.params.id);\n      if (!interview) {\n        return res.status(404).json({ error: \"Interview not found\" });\n      }\n      res.json(interview);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch interview\" });\n    }\n  });\n\n  app.post(\"/api/interviews\", async (req, res) => {\n    try {\n      const interviewData = insertInterviewSchema.parse(req.body);\n      const interview = await storage.createInterview(interviewData);\n      res.status(201).json(interview);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid interview data\" });\n    }\n  });\n\n  app.put(\"/api/interviews/:id\", async (req, res) => {\n    try {\n      const interview = await storage.updateInterview(req.params.id, req.body);\n      if (!interview) {\n        return res.status(404).json({ error: \"Interview not found\" });\n      }\n      res.json(interview);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to update interview\" });\n    }\n  });\n\n  // AI Assistant routes\n  app.post(\"/api/ai/chat\", async (req, res) => {\n    try {\n      const { message, sessionId, context, templateId } = req.body;\n      \n      if (!message) {\n        return res.status(400).json({ error: \"Message is required\" });\n      }\n\n      let response;\n      \n      if (templateId) {\n        // Use specific template\n        const template = await promptTemplateService.getTemplate(templateId);\n        if (!template) {\n          return res.status(404).json({ error: \"Template not found\" });\n        }\n        \n        // Render template with provided variables\n        const renderedPrompt = await promptTemplateService.renderTemplate(templateId, req.body.variables || {});\n        response = await aiService.chatWithAssistant(renderedPrompt, context);\n      } else {\n        // Use general chat\n        response = await aiService.chatWithAssistant(message, context);\n      }\n\n      // Store conversation\n      await storage.createAiConversation({\n        userId: \"default-user\", // TODO: Get from auth\n        sessionId: sessionId || \"default-session\",\n        message,\n        response,\n        modelUsed: \"gpt-5\",\n        tokensUsed: 0, // TODO: Track actual tokens\n      });\n\n      res.json({ response });\n    } catch (error) {\n      console.error(\"Error in AI chat:\", error);\n      res.status(500).json({ error: \"Failed to get AI response\" });\n    }\n  });\n\n  app.post(\"/api/ai/generate-questions\", async (req, res) => {\n    try {\n      const { jobTitle, requirements, experienceLevel } = req.body;\n      \n      if (!jobTitle || !requirements) {\n        return res.status(400).json({ error: \"Job title and requirements are required\" });\n      }\n\n      const questions = await aiService.generateInterviewQuestions(jobTitle, requirements);\n      res.json({ questions });\n    } catch (error) {\n      console.error(\"Error generating questions:\", error);\n      res.status(500).json({ error: \"Failed to generate interview questions\" });\n    }\n  });\n\n  // Bulk operations\n  app.post(\"/api/candidates/bulk-match\", async (req, res) => {\n    try {\n      const { jobId, candidateIds } = req.body;\n      \n      if (!jobId || !candidateIds || !Array.isArray(candidateIds)) {\n        return res.status(400).json({ error: \"Job ID and candidate IDs are required\" });\n      }\n\n      const job = await storage.getJob(jobId);\n      if (!job) {\n        return res.status(404).json({ error: \"Job not found\" });\n      }\n\n      const results = [];\n      \n      for (const candidateId of candidateIds) {\n        try {\n          const candidate = await storage.getCandidate(candidateId);\n          if (!candidate) continue;\n\n          const matchResult = await aiService.matchCandidateToJob(\n            {\n              skills: (candidate.skills as string[]) || [],\n              experience: candidate.experience || 0,\n              education: candidate.education || \"\",\n              position: candidate.position || \"\",\n            },\n            {\n              title: job.title,\n              requirements: (job.requirements as string[]) || [],\n              description: job.description,\n            }\n          );\n\n          // Update candidate match score\n          await storage.updateCandidate(candidateId, {\n            matchScore: matchResult.score.toString(),\n          });\n\n          // Store match result\n          await storage.createJobMatch({\n            candidateId,\n            jobId,\n            matchScore: matchResult.score.toString(),\n            matchReasons: matchResult.reasons,\n            aiAnalysis: matchResult.explanation,\n          });\n\n          results.push({\n            candidateId,\n            matchScore: matchResult.score,\n            reasons: matchResult.reasons,\n          });\n        } catch (error) {\n          console.error(`Error matching candidate ${candidateId}:`, error);\n          results.push({\n            candidateId,\n            error: \"Failed to calculate match\",\n          });\n        }\n      }\n\n      res.json({ results });\n    } catch (error) {\n      console.error(\"Error in bulk matching:\", error);\n      res.status(500).json({ error: \"Failed to perform bulk matching\" });\n    }\n  });\n\n  // Get conversation history\n  app.get(\"/api/ai/conversations/:sessionId\", async (req, res) => {\n    try {\n      const conversations = await storage.getAiConversationsBySession(req.params.sessionId);\n      res.json(conversations);\n    } catch (error) {\n      console.error(\"Error fetching conversations:\", error);\n      res.status(500).json({ error: \"Failed to fetch conversation history\" });\n    }\n  });\n\n  // Collaboration routes\n  \n  // Activity logs\n  app.get(\"/api/activity\", async (req, res) => {\n    try {\n      const { userId } = req.query;\n      let activities;\n      \n      if (userId && typeof userId === \"string\") {\n        activities = await storage.getActivityLogsByUser(userId);\n      } else {\n        activities = await storage.getActivityLogs();\n      }\n      \n      res.json(activities);\n    } catch (error) {\n      console.error(\"Error fetching activity logs:\", error);\n      res.status(500).json({ error: \"Failed to fetch activity logs\" });\n    }\n  });\n\n  app.post(\"/api/activity\", async (req, res) => {\n    try {\n      const validatedData = insertActivityLogSchema.parse(req.body);\n      const activity = await storage.createActivityLog(validatedData);\n      \n      // Broadcast to collaboration service\n      const collaborationService = app.get('collaborationService');\n      if (collaborationService) {\n        await collaborationService.broadcastToAll({\n          type: 'team_activity',\n          payload: activity\n        });\n      }\n      \n      res.status(201).json(activity);\n    } catch (error) {\n      console.error(\"Error creating activity log:\", error);\n      if (error.name === 'ZodError') {\n        return res.status(400).json({ error: \"Invalid request data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to create activity log\" });\n    }\n  });\n\n  // Notifications\n  app.get(\"/api/notifications\", async (req, res) => {\n    try {\n      const { userId } = req.query;\n      if (!userId || typeof userId !== \"string\") {\n        return res.status(400).json({ error: \"User ID is required\" });\n      }\n      \n      const notifications = await storage.getNotifications(userId);\n      res.json(notifications);\n    } catch (error) {\n      console.error(\"Error fetching notifications:\", error);\n      res.status(500).json({ error: \"Failed to fetch notifications\" });\n    }\n  });\n\n  app.post(\"/api/notifications\", async (req, res) => {\n    try {\n      const validatedData = insertNotificationSchema.parse(req.body);\n      const notification = await storage.createNotification(validatedData);\n      \n      // Send real-time notification\n      const collaborationService = app.get('collaborationService');\n      if (collaborationService) {\n        await collaborationService.notifyUser(validatedData.userId, {\n          type: 'notification',\n          payload: notification\n        });\n      }\n      \n      res.status(201).json(notification);\n    } catch (error) {\n      console.error(\"Error creating notification:\", error);\n      if (error.name === 'ZodError') {\n        return res.status(400).json({ error: \"Invalid request data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to create notification\" });\n    }\n  });\n\n  app.patch(\"/api/notifications/:id/read\", async (req, res) => {\n    try {\n      const success = await storage.markNotificationAsRead(req.params.id);\n      if (!success) {\n        return res.status(404).json({ error: \"Notification not found\" });\n      }\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error marking notification as read:\", error);\n      res.status(500).json({ error: \"Failed to mark notification as read\" });\n    }\n  });\n\n  // User sessions and online status\n  app.get(\"/api/team/online\", async (req, res) => {\n    try {\n      const onlineUsers = await storage.getOnlineUsers();\n      res.json(onlineUsers);\n    } catch (error) {\n      console.error(\"Error fetching online users:\", error);\n      res.status(500).json({ error: \"Failed to fetch online users\" });\n    }\n  });\n\n  // Comments\n  app.get(\"/api/comments/:entityType/:entityId\", async (req, res) => {\n    try {\n      const { entityType, entityId } = req.params;\n      const comments = await storage.getComments(entityType, entityId);\n      res.json(comments);\n    } catch (error) {\n      console.error(\"Error fetching comments:\", error);\n      res.status(500).json({ error: \"Failed to fetch comments\" });\n    }\n  });\n\n  app.post(\"/api/comments\", async (req, res) => {\n    try {\n      const validatedData = insertCommentSchema.parse(req.body);\n      const comment = await storage.createComment(validatedData);\n      \n      // Broadcast new comment\n      const collaborationService = app.get('collaborationService');\n      if (collaborationService) {\n        await collaborationService.broadcastToAll({\n          type: 'new_comment',\n          payload: comment\n        });\n      }\n      \n      res.status(201).json(comment);\n    } catch (error) {\n      console.error(\"Error creating comment:\", error);\n      if (error.name === 'ZodError') {\n        return res.status(400).json({ error: \"Invalid request data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to create comment\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":24285},"server/storage.ts":{"content":"import { \n  type User, type InsertUser,\n  type Job, type InsertJob,\n  type Candidate, type InsertCandidate,\n  type Interview, type InsertInterview,\n  type AiConversation, type InsertAiConversation,\n  type JobMatch, type InsertJobMatch,\n  type PromptTemplate, type InsertPromptTemplate,\n  type CandidateStatusHistory, type InsertCandidateStatusHistory,\n  type ActivityLog, type InsertActivityLog,\n  type Notification, type InsertNotification,\n  type UserSession, type InsertUserSession,\n  type Comment, type InsertComment\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // Users\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n\n  // Jobs\n  getJobs(): Promise<Job[]>;\n  getJob(id: string): Promise<Job | undefined>;\n  createJob(job: InsertJob): Promise<Job>;\n  updateJob(id: string, job: Partial<Job>): Promise<Job | undefined>;\n  deleteJob(id: string): Promise<boolean>;\n\n  // Candidates\n  getCandidates(): Promise<Candidate[]>;\n  getCandidate(id: string): Promise<Candidate | undefined>;\n  createCandidate(candidate: InsertCandidate): Promise<Candidate>;\n  updateCandidate(id: string, candidate: Partial<Candidate>): Promise<Candidate | undefined>;\n  deleteCandidate(id: string): Promise<boolean>;\n  searchCandidates(query: string): Promise<Candidate[]>;\n\n  // Interviews\n  getInterviews(): Promise<Interview[]>;\n  getInterview(id: string): Promise<Interview | undefined>;\n  getInterviewsByCandidate(candidateId: string): Promise<Interview[]>;\n  getInterviewsByJob(jobId: string): Promise<Interview[]>;\n  createInterview(interview: InsertInterview): Promise<Interview>;\n  updateInterview(id: string, interview: Partial<Interview>): Promise<Interview | undefined>;\n  deleteInterview(id: string): Promise<boolean>;\n\n  // AI Conversations\n  createAiConversation(conversation: InsertAiConversation): Promise<AiConversation>;\n  getAiConversationsBySession(sessionId: string): Promise<AiConversation[]>;\n\n  // Job Matches\n  createJobMatch(match: InsertJobMatch): Promise<JobMatch>;\n  getJobMatchesForCandidate(candidateId: string): Promise<JobMatch[]>;\n  getJobMatchesForJob(jobId: string): Promise<JobMatch[]>;\n\n  // Candidate Status History\n  createCandidateStatusHistory(history: InsertCandidateStatusHistory): Promise<CandidateStatusHistory>;\n  getCandidateStatusHistory(candidateId: string): Promise<CandidateStatusHistory[]>;\n\n  // Activity Log\n  createActivityLog(activity: InsertActivityLog): Promise<ActivityLog>;\n  getActivityLogs(): Promise<ActivityLog[]>;\n  getActivityLogsByUser(userId: string): Promise<ActivityLog[]>;\n\n  // Notifications\n  createNotification(notification: InsertNotification): Promise<Notification>;\n  getNotifications(userId: string): Promise<Notification[]>;\n  markNotificationAsRead(id: string): Promise<boolean>;\n\n  // User Sessions\n  createUserSession(session: InsertUserSession): Promise<UserSession>;\n  updateUserSession(sessionId: string, updates: Partial<UserSession>): Promise<UserSession | undefined>;\n  getOnlineUsers(): Promise<User[]>;\n  getUserSessions(userId: string): Promise<UserSession[]>;\n\n  // Comments\n  createComment(comment: InsertComment): Promise<Comment>;\n  getComments(entityType: string, entityId: string): Promise<Comment[]>;\n\n  // Additional user methods\n  getUsers(): Promise<User[]>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User> = new Map();\n  private jobs: Map<string, Job> = new Map();\n  private candidates: Map<string, Candidate> = new Map();\n  private interviews: Map<string, Interview> = new Map();\n  private aiConversations: Map<string, AiConversation> = new Map();\n  private jobMatches: Map<string, JobMatch> = new Map();\n  private candidateStatusHistory: Map<string, CandidateStatusHistory> = new Map();\n  private activityLogs: Map<string, ActivityLog> = new Map();\n  private notifications: Map<string, Notification> = new Map();\n  private userSessions: Map<string, UserSession> = new Map();\n  private comments: Map<string, Comment> = new Map();\n\n  constructor() {\n    // Initialize with some sample data for development\n    this.initializeSampleData();\n  }\n\n  private initializeSampleData() {\n    // Create sample HR user\n    const hrUser: User = {\n      id: randomUUID(),\n      email: \"sarah.chen@company.com\",\n      password: \"hashedpassword\",\n      name: \"Sarah Chen\",\n      role: \"hr_manager\",\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.users.set(hrUser.id, hrUser);\n\n    // Create sample jobs\n    const jobs: Job[] = [\n      {\n        id: randomUUID(),\n        title: \"Senior Frontend Developer\",\n        department: \"Engineering\",\n        location: \"San Francisco, CA\",\n        type: \"full-time\",\n        salaryMin: 120000,\n        salaryMax: 160000,\n        requirements: [\"React\", \"TypeScript\", \"5+ years experience\", \"Node.js\", \"GraphQL\"],\n        description: \"We are looking for a senior frontend developer to join our team and lead the development of our next-generation web applications.\",\n        status: \"active\",\n        createdBy: hrUser.id,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      },\n      {\n        id: randomUUID(),\n        title: \"Data Scientist\",\n        department: \"Data\",\n        location: \"Remote\",\n        type: \"full-time\",\n        salaryMin: 110000,\n        salaryMax: 140000,\n        requirements: [\"Python\", \"Machine Learning\", \"SQL\", \"3+ years experience\", \"TensorFlow\"],\n        description: \"Join our data team to build ML models and analytics that drive business decisions.\",\n        status: \"active\",\n        createdBy: hrUser.id,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      },\n      {\n        id: randomUUID(),\n        title: \"Product Manager\",\n        department: \"Product\",\n        location: \"New York, NY\",\n        type: \"full-time\",\n        salaryMin: 130000,\n        salaryMax: 170000,\n        requirements: [\"Product Management\", \"Agile\", \"5+ years experience\", \"Analytics\", \"User Research\"],\n        description: \"Lead product strategy and execution for our core platform features.\",\n        status: \"active\",\n        createdBy: hrUser.id,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      },\n    ];\n\n    jobs.forEach(job => this.jobs.set(job.id, job));\n\n    // Create sample candidates\n    const candidates: Candidate[] = [\n      {\n        id: randomUUID(),\n        name: \"Alex Rodriguez\",\n        email: \"alex.rodriguez@email.com\",\n        phone: \"+1-555-0123\",\n        position: \"Senior Frontend Developer\",\n        experience: 6,\n        education: \"BS Computer Science, Stanford University\",\n        location: \"San Francisco, CA\",\n        salaryExpectation: 150000,\n        resumeUrl: null,\n        resumeText: null,\n        skills: [\"React\", \"TypeScript\", \"JavaScript\", \"Node.js\", \"GraphQL\", \"CSS\", \"HTML\"],\n        status: \"interview\",\n        matchScore: \"92\",\n        aiSummary: \"Highly experienced frontend developer with strong React and TypeScript skills. Perfect match for senior roles.\",\n        notes: \"Excellent technical interview performance\",\n        source: \"linkedin\",\n        tags: [\"frontend\", \"senior\", \"high-priority\"],\n        lastContactedAt: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000), // 2 days ago\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      },\n      {\n        id: randomUUID(),\n        name: \"Jessica Wang\",\n        email: \"j.wang@email.com\",\n        phone: \"+1-555-0124\",\n        position: \"Data Scientist\",\n        experience: 4,\n        education: \"MS Data Science, MIT\",\n        location: \"Boston, MA\",\n        salaryExpectation: 125000,\n        resumeUrl: null,\n        resumeText: null,\n        skills: [\"Python\", \"Machine Learning\", \"TensorFlow\", \"SQL\", \"R\", \"Statistics\", \"Deep Learning\"],\n        status: \"screening\",\n        matchScore: \"89\",\n        aiSummary: \"Strong data science background with excellent ML skills and academic credentials.\",\n        notes: \"Great portfolio of projects\",\n        source: \"job_board\",\n        tags: [\"data-science\", \"ml\", \"academic\"],\n        lastContactedAt: new Date(Date.now() - 24 * 60 * 60 * 1000), // 1 day ago\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      },\n      {\n        id: randomUUID(),\n        name: \"Michael Thompson\",\n        email: \"m.thompson@email.com\",\n        phone: \"+1-555-0125\",\n        position: \"Product Manager\",\n        experience: 7,\n        education: \"MBA, Wharton School\",\n        location: \"New York, NY\",\n        salaryExpectation: 160000,\n        resumeUrl: null,\n        resumeText: null,\n        skills: [\"Product Management\", \"Agile\", \"Scrum\", \"Analytics\", \"User Research\", \"Strategy\"],\n        status: \"offer\",\n        matchScore: \"95\",\n        aiSummary: \"Experienced product manager with proven track record of successful product launches.\",\n        notes: \"Strong leadership and strategic thinking\",\n        source: \"referral\",\n        tags: [\"product\", \"senior\", \"leadership\"],\n        lastContactedAt: new Date(Date.now() - 12 * 60 * 60 * 1000), // 12 hours ago\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      },\n      {\n        id: randomUUID(),\n        name: \"Sarah Kim\",\n        email: \"s.kim@email.com\",\n        phone: \"+1-555-0126\",\n        position: \"Full Stack Developer\",\n        experience: 3,\n        education: \"BS Software Engineering, UC Berkeley\",\n        location: \"San Francisco, CA\",\n        salaryExpectation: 110000,\n        resumeUrl: null,\n        resumeText: null,\n        skills: [\"React\", \"Node.js\", \"JavaScript\", \"Python\", \"MongoDB\", \"Express\"],\n        status: \"applied\",\n        matchScore: \"76\",\n        aiSummary: \"Junior to mid-level developer with full stack capabilities and good growth potential.\",\n        notes: \"Eager to learn and grow\",\n        source: \"manual\",\n        tags: [\"fullstack\", \"junior\", \"potential\"],\n        lastContactedAt: null,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      },\n      {\n        id: randomUUID(),\n        name: \"David Chen\",\n        email: \"d.chen@email.com\",\n        phone: \"+1-555-0127\",\n        position: \"DevOps Engineer\",\n        experience: 5,\n        education: \"BS Computer Engineering, Carnegie Mellon\",\n        location: \"Seattle, WA\",\n        salaryExpectation: 135000,\n        resumeUrl: null,\n        resumeText: null,\n        skills: [\"AWS\", \"Kubernetes\", \"Docker\", \"Terraform\", \"Python\", \"Linux\", \"CI/CD\"],\n        status: \"screening\",\n        matchScore: \"82\",\n        aiSummary: \"Solid DevOps experience with cloud infrastructure and automation expertise.\",\n        notes: \"Strong technical background\",\n        source: \"linkedin\",\n        tags: [\"devops\", \"cloud\", \"automation\"],\n        lastContactedAt: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000), // 3 days ago\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      },\n    ];\n\n    candidates.forEach(candidate => this.candidates.set(candidate.id, candidate));\n\n    // Create sample interviews\n    const candidateIds = Array.from(this.candidates.keys());\n    const jobIds = Array.from(this.jobs.keys());\n\n    if (candidateIds.length > 0 && jobIds.length > 0) {\n      const interviews: Interview[] = [\n        {\n          id: randomUUID(),\n          candidateId: candidateIds[0], // Alex Rodriguez\n          jobId: jobIds[0], // Senior Frontend Developer\n          interviewerId: hrUser.id,\n          scheduledDate: new Date(Date.now() + 2 * 24 * 60 * 60 * 1000), // 2 days from now\n          duration: 60,\n          type: \"video\",\n          status: \"scheduled\",\n          meetingLink: \"https://zoom.us/j/1234567890\",\n          location: null,\n          round: 2,\n          feedback: null,\n          rating: null,\n          recommendation: null,\n          interviewerNotes: null,\n          candidateNotes: null,\n          createdAt: new Date(),\n          updatedAt: new Date(),\n        },\n        {\n          id: randomUUID(),\n          candidateId: candidateIds[1], // Jessica Wang\n          jobId: jobIds[1], // Data Scientist\n          interviewerId: hrUser.id,\n          scheduledDate: new Date(Date.now() + 24 * 60 * 60 * 1000), // 1 day from now\n          duration: 45,\n          type: \"phone\",\n          status: \"scheduled\",\n          meetingLink: null,\n          location: null,\n          round: 1,\n          feedback: null,\n          rating: null,\n          recommendation: null,\n          interviewerNotes: \"Initial phone screening\",\n          candidateNotes: null,\n          createdAt: new Date(),\n          updatedAt: new Date(),\n        },\n        {\n          id: randomUUID(),\n          candidateId: candidateIds[2], // Michael Thompson\n          jobId: jobIds[2], // Product Manager\n          interviewerId: hrUser.id,\n          scheduledDate: new Date(Date.now() - 24 * 60 * 60 * 1000), // 1 day ago\n          duration: 90,\n          type: \"in-person\",\n          status: \"completed\",\n          meetingLink: null,\n          location: \"Office Conference Room A\",\n          round: 3,\n          feedback: \"Excellent strategic thinking and communication skills. Strong cultural fit.\",\n          rating: 5,\n          recommendation: \"hire\",\n          interviewerNotes: \"Final round interview - recommend for hire\",\n          candidateNotes: \"Very impressed with the team and company culture\",\n          createdAt: new Date(),\n          updatedAt: new Date(),\n        },\n      ];\n\n      interviews.forEach(interview => this.interviews.set(interview.id, interview));\n    }\n  }\n\n  // Users\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.email === email);\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const user: User = {\n      ...insertUser,\n      id: randomUUID(),\n      role: insertUser.role || \"hr_manager\",\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.users.set(user.id, user);\n    return user;\n  }\n\n  // Jobs\n  async getJobs(): Promise<Job[]> {\n    return Array.from(this.jobs.values());\n  }\n\n  async getJob(id: string): Promise<Job | undefined> {\n    return this.jobs.get(id);\n  }\n\n  async createJob(insertJob: InsertJob): Promise<Job> {\n    const job: Job = {\n      ...insertJob,\n      id: randomUUID(),\n      status: insertJob.status || \"active\",\n      salaryMin: insertJob.salaryMin ?? null,\n      salaryMax: insertJob.salaryMax ?? null,\n      requirements: insertJob.requirements ?? null,\n      createdBy: insertJob.createdBy ?? null,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.jobs.set(job.id, job);\n    return job;\n  }\n\n  async updateJob(id: string, jobUpdate: Partial<Job>): Promise<Job | undefined> {\n    const job = this.jobs.get(id);\n    if (!job) return undefined;\n\n    const updatedJob: Job = {\n      ...job,\n      ...jobUpdate,\n      updatedAt: new Date(),\n    };\n    this.jobs.set(id, updatedJob);\n    return updatedJob;\n  }\n\n  async deleteJob(id: string): Promise<boolean> {\n    return this.jobs.delete(id);\n  }\n\n  // Candidates\n  async getCandidates(): Promise<Candidate[]> {\n    return Array.from(this.candidates.values());\n  }\n\n  async getCandidate(id: string): Promise<Candidate | undefined> {\n    return this.candidates.get(id);\n  }\n\n  async createCandidate(insertCandidate: InsertCandidate): Promise<Candidate> {\n    const candidate: Candidate = {\n      ...insertCandidate,\n      id: randomUUID(),\n      status: insertCandidate.status || \"applied\",\n      source: insertCandidate.source || \"manual\",\n      phone: insertCandidate.phone ?? null,\n      position: insertCandidate.position ?? null,\n      location: insertCandidate.location ?? null,\n      experience: insertCandidate.experience ?? null,\n      education: insertCandidate.education ?? null,\n      salaryExpectation: insertCandidate.salaryExpectation ?? null,\n      resumeUrl: insertCandidate.resumeUrl ?? null,\n      resumeText: insertCandidate.resumeText ?? null,\n      skills: insertCandidate.skills ?? null,\n      matchScore: insertCandidate.matchScore ?? null,\n      aiSummary: insertCandidate.aiSummary ?? null,\n      notes: insertCandidate.notes ?? null,\n      tags: insertCandidate.tags ?? null,\n      lastContactedAt: insertCandidate.lastContactedAt ?? null,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.candidates.set(candidate.id, candidate);\n    return candidate;\n  }\n\n  async updateCandidate(id: string, candidateUpdate: Partial<Candidate>): Promise<Candidate | undefined> {\n    const candidate = this.candidates.get(id);\n    if (!candidate) return undefined;\n\n    // Track status changes\n    if (candidateUpdate.status && candidateUpdate.status !== candidate.status) {\n      await this.createCandidateStatusHistory({\n        candidateId: id,\n        oldStatus: candidate.status,\n        newStatus: candidateUpdate.status,\n        reason: \"Status updated\",\n        notes: null,\n        changedBy: null, // TODO: Get from auth context\n      });\n    }\n\n    const updatedCandidate: Candidate = {\n      ...candidate,\n      ...candidateUpdate,\n      updatedAt: new Date(),\n    };\n    this.candidates.set(id, updatedCandidate);\n    return updatedCandidate;\n  }\n\n  async deleteCandidate(id: string): Promise<boolean> {\n    return this.candidates.delete(id);\n  }\n\n  async searchCandidates(query: string): Promise<Candidate[]> {\n    const candidates = Array.from(this.candidates.values());\n    const lowerQuery = query.toLowerCase();\n    \n    return candidates.filter(candidate => \n      candidate.name.toLowerCase().includes(lowerQuery) ||\n      candidate.email.toLowerCase().includes(lowerQuery) ||\n      candidate.position?.toLowerCase().includes(lowerQuery) ||\n      (candidate.skills as string[])?.some(skill => skill.toLowerCase().includes(lowerQuery)) ||\n      (candidate.tags as string[])?.some(tag => tag.toLowerCase().includes(lowerQuery)) ||\n      candidate.location?.toLowerCase().includes(lowerQuery)\n    );\n  }\n\n  // Interviews\n  async getInterviews(): Promise<Interview[]> {\n    return Array.from(this.interviews.values());\n  }\n\n  async getInterview(id: string): Promise<Interview | undefined> {\n    return this.interviews.get(id);\n  }\n\n  async getInterviewsByCandidate(candidateId: string): Promise<Interview[]> {\n    return Array.from(this.interviews.values()).filter(\n      interview => interview.candidateId === candidateId\n    );\n  }\n\n  async getInterviewsByJob(jobId: string): Promise<Interview[]> {\n    return Array.from(this.interviews.values()).filter(\n      interview => interview.jobId === jobId\n    );\n  }\n\n  async createInterview(insertInterview: InsertInterview): Promise<Interview> {\n    const interview: Interview = {\n      ...insertInterview,\n      id: randomUUID(),\n      status: insertInterview.status || \"scheduled\",\n      interviewerId: insertInterview.interviewerId ?? null,\n      meetingLink: insertInterview.meetingLink ?? null,\n      location: insertInterview.location ?? null,\n      round: insertInterview.round ?? 1,\n      feedback: insertInterview.feedback ?? null,\n      rating: insertInterview.rating ?? null,\n      recommendation: insertInterview.recommendation ?? null,\n      interviewerNotes: insertInterview.interviewerNotes ?? null,\n      candidateNotes: insertInterview.candidateNotes ?? null,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.interviews.set(interview.id, interview);\n    return interview;\n  }\n\n  async updateInterview(id: string, interviewUpdate: Partial<Interview>): Promise<Interview | undefined> {\n    const interview = this.interviews.get(id);\n    if (!interview) return undefined;\n\n    const updatedInterview: Interview = {\n      ...interview,\n      ...interviewUpdate,\n      updatedAt: new Date(),\n    };\n    this.interviews.set(id, updatedInterview);\n    return updatedInterview;\n  }\n\n  async deleteInterview(id: string): Promise<boolean> {\n    return this.interviews.delete(id);\n  }\n\n  // AI Conversations\n  async createAiConversation(insertConversation: InsertAiConversation): Promise<AiConversation> {\n    const conversation: AiConversation = {\n      ...insertConversation,\n      id: randomUUID(),\n      tokensUsed: insertConversation.tokensUsed ?? null,\n      templateId: insertConversation.templateId ?? null,\n      context: insertConversation.context ?? null,\n      createdAt: new Date(),\n    };\n    this.aiConversations.set(conversation.id, conversation);\n    return conversation;\n  }\n\n  async getAiConversationsBySession(sessionId: string): Promise<AiConversation[]> {\n    return Array.from(this.aiConversations.values()).filter(\n      conversation => conversation.sessionId === sessionId\n    );\n  }\n\n  // Job Matches\n  async createJobMatch(insertMatch: InsertJobMatch): Promise<JobMatch> {\n    const match: JobMatch = {\n      ...insertMatch,\n      id: randomUUID(),\n      matchReasons: insertMatch.matchReasons ?? null,\n      aiAnalysis: insertMatch.aiAnalysis ?? null,\n      basicMatchScore: insertMatch.basicMatchScore ?? null,\n      createdAt: new Date(),\n    };\n    this.jobMatches.set(match.id, match);\n    return match;\n  }\n\n  async getJobMatchesForCandidate(candidateId: string): Promise<JobMatch[]> {\n    return Array.from(this.jobMatches.values()).filter(\n      match => match.candidateId === candidateId\n    );\n  }\n\n  async getJobMatchesForJob(jobId: string): Promise<JobMatch[]> {\n    return Array.from(this.jobMatches.values()).filter(\n      match => match.jobId === jobId\n    );\n  }\n\n  // Candidate Status History\n  async createCandidateStatusHistory(insertHistory: InsertCandidateStatusHistory): Promise<CandidateStatusHistory> {\n    const history: CandidateStatusHistory = {\n      ...insertHistory,\n      id: randomUUID(),\n      oldStatus: insertHistory.oldStatus ?? null,\n      reason: insertHistory.reason ?? null,\n      notes: insertHistory.notes ?? null,\n      changedBy: insertHistory.changedBy ?? null,\n      createdAt: new Date(),\n    };\n    this.candidateStatusHistory.set(history.id, history);\n    return history;\n  }\n\n  async getCandidateStatusHistory(candidateId: string): Promise<CandidateStatusHistory[]> {\n    return Array.from(this.candidateStatusHistory.values()).filter(\n      history => history.candidateId === candidateId\n    ).sort((a, b) => b.createdAt!.getTime() - a.createdAt!.getTime());\n  }\n\n  // Activity Log methods\n  async createActivityLog(activity: InsertActivityLog): Promise<ActivityLog> {\n    const newActivity: ActivityLog = {\n      id: randomUUID(),\n      userId: activity.userId,\n      action: activity.action,\n      entityType: activity.entityType,\n      entityId: activity.entityId,\n      entityName: activity.entityName,\n      details: activity.details || null,\n      createdAt: new Date(),\n    };\n    this.activityLogs.set(newActivity.id, newActivity);\n    return newActivity;\n  }\n\n  async getActivityLogs(): Promise<ActivityLog[]> {\n    return Array.from(this.activityLogs.values())\n      .sort((a, b) => new Date(b.createdAt!).getTime() - new Date(a.createdAt!).getTime());\n  }\n\n  async getActivityLogsByUser(userId: string): Promise<ActivityLog[]> {\n    return Array.from(this.activityLogs.values())\n      .filter(log => log.userId === userId)\n      .sort((a, b) => new Date(b.createdAt!).getTime() - new Date(a.createdAt!).getTime());\n  }\n\n  // Notification methods\n  async createNotification(notification: InsertNotification): Promise<Notification> {\n    const newNotification: Notification = {\n      id: randomUUID(),\n      userId: notification.userId,\n      type: notification.type,\n      title: notification.title,\n      message: notification.message,\n      entityType: notification.entityType || null,\n      entityId: notification.entityId || null,\n      isRead: notification.isRead || false,\n      createdAt: new Date(),\n    };\n    this.notifications.set(newNotification.id, newNotification);\n    return newNotification;\n  }\n\n  async getNotifications(userId: string): Promise<Notification[]> {\n    return Array.from(this.notifications.values())\n      .filter(notification => notification.userId === userId)\n      .sort((a, b) => new Date(b.createdAt!).getTime() - new Date(a.createdAt!).getTime());\n  }\n\n  async markNotificationAsRead(id: string): Promise<boolean> {\n    const notification = this.notifications.get(id);\n    if (notification) {\n      notification.isRead = true;\n      this.notifications.set(id, notification);\n      return true;\n    }\n    return false;\n  }\n\n  // User Session methods\n  async createUserSession(session: InsertUserSession): Promise<UserSession> {\n    const newSession: UserSession = {\n      id: randomUUID(),\n      userId: session.userId,\n      isOnline: session.isOnline !== undefined ? session.isOnline : true,\n      currentPage: session.currentPage || null,\n      lastActivity: session.lastActivity || new Date(),\n      socketId: session.socketId || null,\n      createdAt: new Date(),\n    };\n    this.userSessions.set(newSession.id, newSession);\n    return newSession;\n  }\n\n  async updateUserSession(sessionId: string, updates: Partial<UserSession>): Promise<UserSession | undefined> {\n    const session = this.userSessions.get(sessionId);\n    if (session) {\n      const updatedSession = { ...session, ...updates };\n      this.userSessions.set(sessionId, updatedSession);\n      return updatedSession;\n    }\n    return undefined;\n  }\n\n  async getOnlineUsers(): Promise<User[]> {\n    const onlineSessions = Array.from(this.userSessions.values())\n      .filter(session => session.isOnline);\n    \n    const onlineUserIds = new Set(onlineSessions.map(session => session.userId));\n    return Array.from(this.users.values())\n      .filter(user => onlineUserIds.has(user.id));\n  }\n\n  async getUserSessions(userId: string): Promise<UserSession[]> {\n    return Array.from(this.userSessions.values())\n      .filter(session => session.userId === userId);\n  }\n\n  // Comment methods\n  async createComment(comment: InsertComment): Promise<Comment> {\n    const newComment: Comment = {\n      id: randomUUID(),\n      entityType: comment.entityType,\n      entityId: comment.entityId,\n      content: comment.content,\n      authorId: comment.authorId,\n      isInternal: comment.isInternal !== undefined ? comment.isInternal : true,\n      mentions: comment.mentions || null,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.comments.set(newComment.id, newComment);\n    return newComment;\n  }\n\n  async getComments(entityType: string, entityId: string): Promise<Comment[]> {\n    return Array.from(this.comments.values())\n      .filter(comment => comment.entityType === entityType && comment.entityId === entityId)\n      .sort((a, b) => new Date(a.createdAt!).getTime() - new Date(b.createdAt!).getTime());\n  }\n\n  // Additional user methods\n  async getUsers(): Promise<User[]> {\n    return Array.from(this.users.values());\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":26935},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, timestamp, jsonb, decimal, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  name: text(\"name\").notNull(),\n  role: text(\"role\").notNull().default(\"hr_manager\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const jobs = pgTable(\"jobs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  department: text(\"department\").notNull(),\n  location: text(\"location\").notNull(),\n  type: text(\"type\").notNull(), // full-time, part-time, contract\n  salaryMin: integer(\"salary_min\"),\n  salaryMax: integer(\"salary_max\"),\n  requirements: jsonb(\"requirements\"), // array of strings\n  description: text(\"description\").notNull(),\n  status: text(\"status\").notNull().default(\"active\"), // active, paused, closed\n  createdBy: varchar(\"created_by\").references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const candidates = pgTable(\"candidates\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  email: text(\"email\").notNull(),\n  phone: text(\"phone\"),\n  position: text(\"position\"),\n  experience: integer(\"experience\"), // years\n  education: text(\"education\"),\n  location: text(\"location\"),\n  salaryExpectation: integer(\"salary_expectation\"),\n  resumeUrl: text(\"resume_url\"),\n  resumeText: text(\"resume_text\"),\n  skills: jsonb(\"skills\"), // array of strings\n  status: text(\"status\").notNull().default(\"applied\"), // applied, screening, interview, offer, hired, rejected\n  matchScore: decimal(\"match_score\", { precision: 5, scale: 2 }),\n  aiSummary: text(\"ai_summary\"),\n  notes: text(\"notes\"),\n  source: text(\"source\").default(\"manual\"), // manual, linkedin, job_board, referral\n  tags: jsonb(\"tags\"), // array of strings for categorization\n  lastContactedAt: timestamp(\"last_contacted_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const interviews = pgTable(\"interviews\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  candidateId: varchar(\"candidate_id\").references(() => candidates.id).notNull(),\n  jobId: varchar(\"job_id\").references(() => jobs.id).notNull(),\n  interviewerId: varchar(\"interviewer_id\").references(() => users.id),\n  scheduledDate: timestamp(\"scheduled_date\").notNull(),\n  duration: integer(\"duration\").notNull(), // minutes\n  type: text(\"type\").notNull(), // phone, video, in-person\n  status: text(\"status\").notNull().default(\"scheduled\"), // scheduled, completed, cancelled, no-show\n  meetingLink: text(\"meeting_link\"),\n  location: text(\"location\"),\n  round: integer(\"round\").notNull().default(1),\n  feedback: text(\"feedback\"),\n  rating: integer(\"rating\"), // 1-5\n  recommendation: text(\"recommendation\"), // hire, reject, next-round\n  interviewerNotes: text(\"interviewer_notes\"),\n  candidateNotes: text(\"candidate_notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const aiConversations = pgTable(\"ai_conversations\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  sessionId: varchar(\"session_id\").notNull(),\n  message: text(\"message\").notNull(),\n  response: text(\"response\").notNull(),\n  modelUsed: text(\"model_used\").notNull(),\n  tokensUsed: integer(\"tokens_used\"),\n  templateId: varchar(\"template_id\"), // reference to prompt template used\n  context: text(\"context\"), // additional context provided\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const jobMatches = pgTable(\"job_matches\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  candidateId: varchar(\"candidate_id\").references(() => candidates.id).notNull(),\n  jobId: varchar(\"job_id\").references(() => jobs.id).notNull(),\n  matchScore: decimal(\"match_score\", { precision: 5, scale: 2 }).notNull(),\n  matchReasons: jsonb(\"match_reasons\"), // array of strings\n  aiAnalysis: text(\"ai_analysis\"),\n  basicMatchScore: decimal(\"basic_match_score\", { precision: 5, scale: 2 }),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const promptTemplates = pgTable(\"prompt_templates\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\").notNull(),\n  category: text(\"category\").notNull(), // resume_analysis, job_matching, interview_questions, candidate_screening, general\n  template: text(\"template\").notNull(),\n  variables: jsonb(\"variables\").notNull(), // array of variable names\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdBy: varchar(\"created_by\").references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const candidateStatusHistory = pgTable(\"candidate_status_history\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  candidateId: varchar(\"candidate_id\").references(() => candidates.id).notNull(),\n  oldStatus: text(\"old_status\"),\n  newStatus: text(\"new_status\").notNull(),\n  reason: text(\"reason\"),\n  notes: text(\"notes\"),\n  changedBy: varchar(\"changed_by\").references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Real-time collaboration tables\nexport const activityLog = pgTable(\"activity_log\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  action: text(\"action\").notNull(), // candidate_updated, interview_scheduled, job_created, etc.\n  entityType: text(\"entity_type\").notNull(), // candidate, job, interview\n  entityId: varchar(\"entity_id\").notNull(),\n  entityName: text(\"entity_name\").notNull(), // for display\n  details: jsonb(\"details\"), // additional context\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const notifications = pgTable(\"notifications\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  type: text(\"type\").notNull(), // candidate_update, interview_reminder, team_activity\n  title: text(\"title\").notNull(),\n  message: text(\"message\").notNull(),\n  entityType: text(\"entity_type\"), // candidate, job, interview\n  entityId: varchar(\"entity_id\"),\n  isRead: boolean(\"is_read\").notNull().default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const userSessions = pgTable(\"user_sessions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  isOnline: boolean(\"is_online\").notNull().default(true),\n  currentPage: text(\"current_page\"),\n  lastActivity: timestamp(\"last_activity\").defaultNow(),\n  socketId: text(\"socket_id\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const comments = pgTable(\"comments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  entityType: text(\"entity_type\").notNull(), // candidate, job, interview\n  entityId: varchar(\"entity_id\").notNull(),\n  content: text(\"content\").notNull(),\n  authorId: varchar(\"author_id\").references(() => users.id).notNull(),\n  isInternal: boolean(\"is_internal\").notNull().default(true), // internal team notes vs external\n  mentions: jsonb(\"mentions\"), // array of user IDs mentioned\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertJobSchema = createInsertSchema(jobs).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertCandidateSchema = createInsertSchema(candidates).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertInterviewSchema = createInsertSchema(interviews).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertAiConversationSchema = createInsertSchema(aiConversations).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertJobMatchSchema = createInsertSchema(jobMatches).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertPromptTemplateSchema = createInsertSchema(promptTemplates).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertCandidateStatusHistorySchema = createInsertSchema(candidateStatusHistory).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertActivityLogSchema = createInsertSchema(activityLog).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertNotificationSchema = createInsertSchema(notifications).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertUserSessionSchema = createInsertSchema(userSessions).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertCommentSchema = createInsertSchema(comments).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\n\nexport type Job = typeof jobs.$inferSelect;\nexport type InsertJob = z.infer<typeof insertJobSchema>;\n\nexport type Candidate = typeof candidates.$inferSelect;\nexport type InsertCandidate = z.infer<typeof insertCandidateSchema>;\n\nexport type Interview = typeof interviews.$inferSelect;\nexport type InsertInterview = z.infer<typeof insertInterviewSchema>;\n\nexport type AiConversation = typeof aiConversations.$inferSelect;\nexport type InsertAiConversation = z.infer<typeof insertAiConversationSchema>;\n\nexport type JobMatch = typeof jobMatches.$inferSelect;\nexport type InsertJobMatch = z.infer<typeof insertJobMatchSchema>;\n\nexport type PromptTemplate = typeof promptTemplates.$inferSelect;\nexport type InsertPromptTemplate = z.infer<typeof insertPromptTemplateSchema>;\n\nexport type CandidateStatusHistory = typeof candidateStatusHistory.$inferSelect;\nexport type InsertCandidateStatusHistory = z.infer<typeof insertCandidateStatusHistorySchema>;\n\nexport type ActivityLog = typeof activityLog.$inferSelect;\nexport type InsertActivityLog = z.infer<typeof insertActivityLogSchema>;\n\nexport type Notification = typeof notifications.$inferSelect;\nexport type InsertNotification = z.infer<typeof insertNotificationSchema>;\n\nexport type UserSession = typeof userSessions.$inferSelect;\nexport type InsertUserSession = z.infer<typeof insertUserSessionSchema>;\n\nexport type Comment = typeof comments.$inferSelect;\nexport type InsertComment = z.infer<typeof insertCommentSchema>;\n","size_bytes":10978},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { WebSocketProvider } from \"@/contexts/websocket-context\";\nimport { LanguageProvider } from \"@/contexts/language-context\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Candidates from \"@/pages/candidates\";\nimport Jobs from \"@/pages/jobs\";\nimport Interviews from \"@/pages/interviews\";\nimport AIAssistant from \"@/pages/ai-assistant\";\nimport Templates from \"@/pages/templates\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Dashboard} />\n      <Route path=\"/candidates\" component={Candidates} />\n      <Route path=\"/jobs\" component={Jobs} />\n      <Route path=\"/interviews\" component={Interviews} />\n      <Route path=\"/ai-assistant\" component={AIAssistant} />\n      <Route path=\"/templates\" component={Templates} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <LanguageProvider>\n        <WebSocketProvider>\n          <TooltipProvider>\n            <Toaster />\n            <Router />\n          </TooltipProvider>\n        </WebSocketProvider>\n      </LanguageProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1461},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(210 25% 7.8431%);\n  --card: hsl(180 6.6667% 97.0588%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(203.8863 88.2845% 53.1373%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(210 25% 7.8431%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(240 1.9608% 90%);\n  --muted-foreground: hsl(210 25% 7.8431%);\n  --accent: hsl(211.5789 51.3514% 92.7451%);\n  --accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(201.4286 30.4348% 90.9804%);\n  --input: hsl(200 23.0769% 97.4510%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(180 6.6667% 97.0588%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(211.5789 51.3514% 92.7451%);\n  --sidebar-accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-border: hsl(205.0000 25.0000% 90.5882%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(200 6.6667% 91.1765%);\n  --card: hsl(228 9.8039% 10%);\n  --card-foreground: hsl(0 0% 85.0980%);\n  --popover: hsl(0 0% 0%);\n  --popover-foreground: hsl(200 6.6667% 91.1765%);\n  --primary: hsl(203.7736 87.6033% 52.5490%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(195.0000 15.3846% 94.9020%);\n  --secondary-foreground: hsl(210 25% 7.8431%);\n  --muted: hsl(0 0% 9.4118%);\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\n  --accent: hsl(205.7143 70% 7.8431%);\n  --accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 5.2632% 14.9020%);\n  --input: hsl(207.6923 27.6596% 18.4314%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(228 9.8039% 10%);\n  --sidebar-foreground: hsl(0 0% 85.0980%);\n  --sidebar-primary: hsl(202.8169 89.1213% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(205.7143 70% 7.8431%);\n  --sidebar-accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --sidebar-border: hsl(205.7143 15.7895% 26.0784%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}","size_bytes":5055},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/services/aiService.ts":{"content":"import OpenAI from \"openai\";\n\n// Using Openrouter with Google Gemini 2.5 Flash Preview model\nconst openai = new OpenAI({ \n  apiKey: process.env.OPENROUTER_API_KEY,\n  baseURL: \"https://openrouter.ai/api/v1\",\n  defaultHeaders: {\n    \"HTTP-Referer\": \"https://ai-recruit.replit.app\", // Optional, for rankings on openrouter.ai\n    \"X-Title\": \"AI Recruit System\", // Optional, shows in rankings on openrouter.ai\n  },\n});\n\nexport interface ResumeAnalysis {\n  summary: string;\n  skills: string[];\n  experience: number;\n  education: string;\n  strengths: string[];\n  weaknesses: string[];\n  recommendations: string[];\n}\n\nexport interface MatchResult {\n  score: number;\n  reasons: string[];\n  explanation: string;\n}\n\nexport class AIService {\n  async analyzeResume(resumeText: string): Promise<ResumeAnalysis> {\n    try {\n      const response = await openai.chat.completions.create({\n        model: \"google/gemini-2.5-flash-preview-09-2025\",\n        messages: [\n          {\n            role: \"system\",\n            content: `You are an expert HR recruiter and resume analyst. Analyze the provided resume and extract structured information. Return the analysis as JSON with the following structure:\n            {\n              \"summary\": \"Brief professional summary\",\n              \"skills\": [\"skill1\", \"skill2\"],\n              \"experience\": 5,\n              \"education\": \"Education details\",\n              \"strengths\": [\"strength1\", \"strength2\"],\n              \"weaknesses\": [\"weakness1\", \"weakness2\"],\n              \"recommendations\": [\"recommendation1\", \"recommendation2\"]\n            }`\n          },\n          {\n            role: \"user\",\n            content: `Please analyze this resume and provide structured feedback:\\n\\n${resumeText}`\n          }\n        ],\n        response_format: { type: \"json_object\" },\n      });\n\n      const content = response.choices[0].message.content;\n      if (!content) {\n        throw new Error(\"No response from AI\");\n      }\n\n      return JSON.parse(content) as ResumeAnalysis;\n    } catch (error) {\n      console.error(\"Error analyzing resume:\", error);\n      throw new Error(\"Failed to analyze resume: \" + (error instanceof Error ? error.message : \"Unknown error\"));\n    }\n  }\n\n  async matchCandidateToJob(candidateData: {\n    skills: string[];\n    experience: number;\n    education: string;\n    position: string;\n  }, jobData: {\n    title: string;\n    requirements: string[];\n    description: string;\n  }): Promise<MatchResult> {\n    try {\n      const response = await openai.chat.completions.create({\n        model: \"google/gemini-2.5-flash-preview-09-2025\",\n        messages: [\n          {\n            role: \"system\",\n            content: `You are an expert HR recruiter. Analyze how well a candidate matches a job position. Return the analysis as JSON with this structure:\n            {\n              \"score\": 85,\n              \"reasons\": [\"reason1\", \"reason2\"],\n              \"explanation\": \"Detailed explanation of the match\"\n            }\n            Score should be 0-100. Include specific reasons for the match score.`\n          },\n          {\n            role: \"user\",\n            content: `\n            Candidate Profile:\n            - Position: ${candidateData.position}\n            - Skills: ${candidateData.skills.join(\", \")}\n            - Experience: ${candidateData.experience} years\n            - Education: ${candidateData.education}\n\n            Job Requirements:\n            - Title: ${jobData.title}\n            - Requirements: ${jobData.requirements.join(\", \")}\n            - Description: ${jobData.description}\n\n            Please analyze the match between this candidate and job position.`\n          }\n        ],\n        response_format: { type: \"json_object\" },\n      });\n\n      const content = response.choices[0].message.content;\n      if (!content) {\n        throw new Error(\"No response from AI\");\n      }\n\n      return JSON.parse(content) as MatchResult;\n    } catch (error) {\n      console.error(\"Error matching candidate to job:\", error);\n      throw new Error(\"Failed to match candidate: \" + (error instanceof Error ? error.message : \"Unknown error\"));\n    }\n  }\n\n  async generateInterviewQuestions(jobTitle: string, requirements: string[]): Promise<string[]> {\n    try {\n      const response = await openai.chat.completions.create({\n        model: \"google/gemini-2.5-flash-preview-09-2025\",\n        messages: [\n          {\n            role: \"system\",\n            content: `You are an expert HR recruiter. Generate relevant interview questions for a specific job position. Return the questions as JSON array:\n            {\n              \"questions\": [\"question1\", \"question2\", \"question3\"]\n            }\n            Generate 5-8 thoughtful questions that assess both technical skills and cultural fit.`\n          },\n          {\n            role: \"user\",\n            content: `Generate interview questions for:\n            Job Title: ${jobTitle}\n            Requirements: ${requirements.join(\", \")}`\n          }\n        ],\n        response_format: { type: \"json_object\" },\n      });\n\n      const content = response.choices[0].message.content;\n      if (!content) {\n        throw new Error(\"No response from AI\");\n      }\n\n      const result = JSON.parse(content) as { questions: string[] };\n      return result.questions;\n    } catch (error) {\n      console.error(\"Error generating interview questions:\", error);\n      throw new Error(\"Failed to generate questions: \" + (error instanceof Error ? error.message : \"Unknown error\"));\n    }\n  }\n\n  async chatWithAssistant(message: string, context?: string): Promise<string> {\n    try {\n      const systemMessage = `You are an AI assistant specialized in HR and recruitment. You help HR managers with:\n      - Candidate evaluation and analysis\n      - Interview preparation and questions\n      - Job posting optimization\n      - Recruitment strategy advice\n      - Data interpretation and insights\n      \n      Be helpful, professional, and provide actionable advice.`;\n\n      const messages: any[] = [\n        { role: \"system\", content: systemMessage }\n      ];\n\n      if (context) {\n        messages.push({ role: \"system\", content: `Context: ${context}` });\n      }\n\n      messages.push({ role: \"user\", content: message });\n\n      const response = await openai.chat.completions.create({\n        model: \"google/gemini-2.5-flash-preview-09-2025\",\n        messages,\n      });\n\n      const content = response.choices[0].message.content;\n      if (!content) {\n        throw new Error(\"No response from AI\");\n      }\n\n      return content;\n    } catch (error) {\n      console.error(\"Error in AI chat:\", error);\n      throw new Error(\"Failed to get AI response: \" + (error instanceof Error ? error.message : \"Unknown error\"));\n    }\n  }\n}\n\nexport const aiService = new AIService();\n","size_bytes":6781},"server/services/matchingService.ts":{"content":"import { type Candidate, type Job } from \"@shared/schema\";\nimport { aiService } from \"./aiService\";\n\nexport interface CandidateMatch {\n  candidate: Candidate;\n  matchScore: number;\n  reasons: string[];\n  explanation: string;\n}\n\nexport class MatchingService {\n  async findMatchingCandidates(job: Job, candidates: Candidate[]): Promise<CandidateMatch[]> {\n    const matches: CandidateMatch[] = [];\n\n    for (const candidate of candidates) {\n      try {\n        const matchResult = await aiService.matchCandidateToJob(\n          {\n            skills: (candidate.skills as string[]) || [],\n            experience: candidate.experience || 0,\n            education: candidate.education || \"\",\n            position: candidate.position || \"\",\n          },\n          {\n            title: job.title,\n            requirements: (job.requirements as string[]) || [],\n            description: job.description,\n          }\n        );\n\n        matches.push({\n          candidate,\n          matchScore: matchResult.score,\n          reasons: matchResult.reasons,\n          explanation: matchResult.explanation,\n        });\n      } catch (error) {\n        console.error(`Error matching candidate ${candidate.id} to job ${job.id}:`, error);\n        // Continue with other candidates even if one fails\n      }\n    }\n\n    // Sort by match score descending\n    return matches.sort((a, b) => b.matchScore - a.matchScore);\n  }\n\n  async findMatchingJobs(candidate: Candidate, jobs: Job[]): Promise<CandidateMatch[]> {\n    const matches: CandidateMatch[] = [];\n\n    for (const job of jobs) {\n      try {\n        const matchResult = await aiService.matchCandidateToJob(\n          {\n            skills: (candidate.skills as string[]) || [],\n            experience: candidate.experience || 0,\n            education: candidate.education || \"\",\n            position: candidate.position || \"\",\n          },\n          {\n            title: job.title,\n            requirements: (job.requirements as string[]) || [],\n            description: job.description,\n          }\n        );\n\n        matches.push({\n          candidate,\n          matchScore: matchResult.score,\n          reasons: matchResult.reasons,\n          explanation: matchResult.explanation,\n        });\n      } catch (error) {\n        console.error(`Error matching job ${job.id} to candidate ${candidate.id}:`, error);\n        // Continue with other jobs even if one fails\n      }\n    }\n\n    // Sort by match score descending\n    return matches.sort((a, b) => b.matchScore - a.matchScore);\n  }\n\n  calculateBasicMatch(candidate: Candidate, job: Job): number {\n    let score = 0;\n    const candidateSkills = (candidate.skills as string[]) || [];\n    const jobRequirements = (job.requirements as string[]) || [];\n\n    // Skill matching (40% of score)\n    const skillMatches = candidateSkills.filter(skill =>\n      jobRequirements.some(req => \n        req.toLowerCase().includes(skill.toLowerCase()) ||\n        skill.toLowerCase().includes(req.toLowerCase())\n      )\n    ).length;\n    \n    const skillScore = jobRequirements.length > 0 \n      ? (skillMatches / jobRequirements.length) * 40 \n      : 0;\n    score += skillScore;\n\n    // Experience matching (30% of score)\n    const candidateExp = candidate.experience || 0;\n    const expectedExp = this.extractExperienceFromRequirements(jobRequirements);\n    \n    if (expectedExp > 0) {\n      const expRatio = Math.min(candidateExp / expectedExp, 1);\n      score += expRatio * 30;\n    } else {\n      score += 20; // Default if no experience requirement\n    }\n\n    // Location matching (20% of score)\n    if (candidate.location && job.location) {\n      const locationMatch = candidate.location.toLowerCase().includes(job.location.toLowerCase()) ||\n                           job.location.toLowerCase().includes(\"remote\") ||\n                           candidate.location.toLowerCase().includes(\"remote\");\n      if (locationMatch) score += 20;\n    } else {\n      score += 10; // Partial score if location info is missing\n    }\n\n    // Salary expectation matching (10% of score)\n    if (candidate.salaryExpectation && job.salaryMin && job.salaryMax) {\n      const salaryMatch = candidate.salaryExpectation >= job.salaryMin && \n                         candidate.salaryExpectation <= job.salaryMax;\n      if (salaryMatch) score += 10;\n    } else {\n      score += 5; // Partial score if salary info is missing\n    }\n\n    return Math.round(Math.min(score, 100));\n  }\n\n  private extractExperienceFromRequirements(requirements: string[]): number {\n    for (const req of requirements) {\n      const match = req.match(/(\\d+)\\+?\\s*years?/i);\n      if (match) {\n        return parseInt(match[1], 10);\n      }\n    }\n    return 0;\n  }\n}\n\nexport const matchingService = new MatchingService();\n","size_bytes":4749},"server/services/promptTemplates.ts":{"content":"import { randomUUID } from \"crypto\";\n\nexport interface PromptTemplate {\n  id: string;\n  name: string;\n  description: string;\n  category: \"resume_analysis\" | \"job_matching\" | \"interview_questions\" | \"candidate_screening\" | \"general\";\n  template: string;\n  variables: string[];\n  isActive: boolean;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface InsertPromptTemplate {\n  name: string;\n  description: string;\n  category: PromptTemplate[\"category\"];\n  template: string;\n  variables: string[];\n  isActive?: boolean;\n}\n\nexport class PromptTemplateService {\n  private templates: Map<string, PromptTemplate> = new Map();\n\n  constructor() {\n    this.initializeDefaultTemplates();\n  }\n\n  private initializeDefaultTemplates() {\n    const defaultTemplates: InsertPromptTemplate[] = [\n      {\n        name: \"Resume Analysis\",\n        description: \"Comprehensive resume analysis with skills extraction\",\n        category: \"resume_analysis\",\n        template: `You are an expert HR recruiter and resume analyst. Analyze the provided resume and extract structured information. Return the analysis as JSON with the following structure:\n{\n  \"summary\": \"Brief professional summary\",\n  \"skills\": [\"skill1\", \"skill2\"],\n  \"experience\": 5,\n  \"education\": \"Education details\",\n  \"strengths\": [\"strength1\", \"strength2\"],\n  \"weaknesses\": [\"weakness1\", \"weakness2\"],\n  \"recommendations\": [\"recommendation1\", \"recommendation2\"]\n}\n\nResume content:\n{{resumeText}}`,\n        variables: [\"resumeText\"],\n        isActive: true,\n      },\n      {\n        name: \"Job Matching\",\n        description: \"Match candidates to job positions with scoring\",\n        category: \"job_matching\",\n        template: `You are an expert HR recruiter. Analyze how well a candidate matches a job position. Return the analysis as JSON with this structure:\n{\n  \"score\": 85,\n  \"reasons\": [\"reason1\", \"reason2\"],\n  \"explanation\": \"Detailed explanation of the match\"\n}\nScore should be 0-100. Include specific reasons for the match score.\n\nCandidate Profile:\n- Position: {{candidatePosition}}\n- Skills: {{candidateSkills}}\n- Experience: {{candidateExperience}} years\n- Education: {{candidateEducation}}\n\nJob Requirements:\n- Title: {{jobTitle}}\n- Requirements: {{jobRequirements}}\n- Description: {{jobDescription}}\n\nPlease analyze the match between this candidate and job position.`,\n        variables: [\"candidatePosition\", \"candidateSkills\", \"candidateExperience\", \"candidateEducation\", \"jobTitle\", \"jobRequirements\", \"jobDescription\"],\n        isActive: true,\n      },\n      {\n        name: \"Interview Questions Generator\",\n        description: \"Generate relevant interview questions for specific roles\",\n        category: \"interview_questions\",\n        template: `You are an expert HR recruiter. Generate relevant interview questions for a specific job position. Return the questions as JSON array:\n{\n  \"questions\": [\"question1\", \"question2\", \"question3\"]\n}\nGenerate 5-8 thoughtful questions that assess both technical skills and cultural fit.\n\nJob Title: {{jobTitle}}\nRequirements: {{jobRequirements}}\nExperience Level: {{experienceLevel}}`,\n        variables: [\"jobTitle\", \"jobRequirements\", \"experienceLevel\"],\n        isActive: true,\n      },\n      {\n        name: \"Candidate Screening\",\n        description: \"Initial candidate screening based on basic criteria\",\n        category: \"candidate_screening\",\n        template: `You are an HR screening specialist. Evaluate if a candidate meets the basic requirements for a position. Return evaluation as JSON:\n{\n  \"passed\": true,\n  \"score\": 75,\n  \"feedback\": \"Detailed feedback about the candidate\",\n  \"missingRequirements\": [\"requirement1\", \"requirement2\"],\n  \"recommendations\": [\"recommendation1\", \"recommendation2\"]\n}\n\nCandidate Information:\n- Resume: {{resumeText}}\n- Target Position: {{targetPosition}}\n- Minimum Requirements: {{minimumRequirements}}\n\nPlease evaluate if this candidate should proceed to the next stage.`,\n        variables: [\"resumeText\", \"targetPosition\", \"minimumRequirements\"],\n        isActive: true,\n      },\n      {\n        name: \"General HR Assistant\",\n        description: \"General HR and recruitment advice\",\n        category: \"general\",\n        template: `You are an AI assistant specialized in HR and recruitment. You help HR managers with:\n- Candidate evaluation and analysis\n- Interview preparation and questions\n- Job posting optimization\n- Recruitment strategy advice\n- Data interpretation and insights\n\nBe helpful, professional, and provide actionable advice.\n\nUser Query: {{userQuery}}\nContext: {{context}}`,\n        variables: [\"userQuery\", \"context\"],\n        isActive: true,\n      },\n    ];\n\n    defaultTemplates.forEach(template => {\n      this.createTemplate(template);\n    });\n  }\n\n  async getTemplates(): Promise<PromptTemplate[]> {\n    return Array.from(this.templates.values());\n  }\n\n  async getTemplate(id: string): Promise<PromptTemplate | undefined> {\n    return this.templates.get(id);\n  }\n\n  async getTemplatesByCategory(category: PromptTemplate[\"category\"]): Promise<PromptTemplate[]> {\n    return Array.from(this.templates.values()).filter(t => t.category === category);\n  }\n\n  async createTemplate(template: InsertPromptTemplate): Promise<PromptTemplate> {\n    const newTemplate: PromptTemplate = {\n      ...template,\n      id: randomUUID(),\n      isActive: template.isActive ?? true,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n\n    this.templates.set(newTemplate.id, newTemplate);\n    return newTemplate;\n  }\n\n  async updateTemplate(id: string, updates: Partial<PromptTemplate>): Promise<PromptTemplate | undefined> {\n    const template = this.templates.get(id);\n    if (!template) return undefined;\n\n    const updatedTemplate: PromptTemplate = {\n      ...template,\n      ...updates,\n      updatedAt: new Date(),\n    };\n\n    this.templates.set(id, updatedTemplate);\n    return updatedTemplate;\n  }\n\n  async deleteTemplate(id: string): Promise<boolean> {\n    return this.templates.delete(id);\n  }\n\n  async renderTemplate(templateId: string, variables: Record<string, any>): Promise<string> {\n    const template = this.templates.get(templateId);\n    if (!template) {\n      throw new Error(\"Template not found\");\n    }\n\n    let rendered = template.template;\n    \n    // Replace variables in the template\n    template.variables.forEach(variable => {\n      const value = variables[variable] || \"\";\n      const regex = new RegExp(`{{${variable}}}`, \"g\");\n      rendered = rendered.replace(regex, String(value));\n    });\n\n    return rendered;\n  }\n\n  extractVariables(template: string): string[] {\n    const regex = /{{([^}]+)}}/g;\n    const variables: string[] = [];\n    let match;\n\n    while ((match = regex.exec(template)) !== null) {\n      const variable = match[1].trim();\n      if (!variables.includes(variable)) {\n        variables.push(variable);\n      }\n    }\n\n    return variables;\n  }\n}\n\nexport const promptTemplateService = new PromptTemplateService();\n","size_bytes":6939},"server/services/resumeParser.ts":{"content":"// import * as pdfParse from \"pdf-parse\"; // Using dynamic import to avoid initialization issues\n\nexport interface ParsedResume {\n  text: string;\n  metadata: {\n    pages: number;\n    info?: any;\n  };\n}\n\nexport class ResumeParserService {\n  async parseFile(fileBuffer: Buffer, mimeType: string): Promise<ParsedResume> {\n    try {\n      if (mimeType === \"application/pdf\") {\n        return await this.parsePDF(fileBuffer);\n      } else if (mimeType === \"text/plain\") {\n        return this.parsePlainText(fileBuffer);\n      } else {\n        throw new Error(`Unsupported file type: ${mimeType}`);\n      }\n    } catch (error) {\n      console.error(\"Error parsing resume file:\", error);\n      throw new Error(\"Failed to parse resume file: \" + (error instanceof Error ? error.message : \"Unknown error\"));\n    }\n  }\n\n  private async parsePDF(buffer: Buffer): Promise<ParsedResume> {\n    try {\n      // Use dynamic import to avoid initialization issues\n      const pdfParse = (await import(\"pdf-parse\")).default;\n      const data = await pdfParse(buffer);\n      \n      return {\n        text: data.text,\n        metadata: {\n          pages: data.numpages,\n          info: data.info,\n        },\n      };\n    } catch (error) {\n      console.error(\"Error parsing PDF:\", error);\n      throw new Error(\"Failed to parse PDF file\");\n    }\n  }\n\n  private parsePlainText(buffer: Buffer): ParsedResume {\n    const text = buffer.toString(\"utf-8\");\n    \n    return {\n      text,\n      metadata: {\n        pages: 1,\n      },\n    };\n  }\n\n  extractContactInfo(text: string): {\n    email?: string;\n    phone?: string;\n    name?: string;\n  } {\n    const emailRegex = /\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b/;\n    const phoneRegex = /(\\+?1?[-.\\s]?)?\\(?([0-9]{3})\\)?[-.\\s]?([0-9]{3})[-.\\s]?([0-9]{4})/;\n    \n    const emailMatch = text.match(emailRegex);\n    const phoneMatch = text.match(phoneRegex);\n    \n    // Simple name extraction - look for patterns at the beginning\n    const lines = text.split('\\n').filter(line => line.trim().length > 0);\n    const firstLine = lines[0]?.trim();\n    \n    // Basic name detection - first line that's not too long and contains letters\n    let name: string | undefined;\n    if (firstLine && firstLine.length < 50 && /^[A-Za-z\\s]+$/.test(firstLine)) {\n      name = firstLine;\n    }\n\n    return {\n      email: emailMatch?.[0],\n      phone: phoneMatch?.[0],\n      name,\n    };\n  }\n\n  extractSkills(text: string): string[] {\n    // Common technical skills to look for\n    const skillKeywords = [\n      \"JavaScript\", \"TypeScript\", \"React\", \"Vue\", \"Angular\", \"Node.js\",\n      \"Python\", \"Java\", \"C++\", \"C#\", \"Go\", \"Rust\", \"PHP\",\n      \"HTML\", \"CSS\", \"SASS\", \"SCSS\", \"Bootstrap\", \"Tailwind\",\n      \"SQL\", \"MySQL\", \"PostgreSQL\", \"MongoDB\", \"Redis\",\n      \"Docker\", \"Kubernetes\", \"AWS\", \"Azure\", \"GCP\",\n      \"Git\", \"GitHub\", \"GitLab\", \"Jenkins\", \"CI/CD\",\n      \"REST\", \"GraphQL\", \"API\", \"Microservices\",\n      \"Machine Learning\", \"AI\", \"Data Science\", \"Analytics\",\n      \"Project Management\", \"Agile\", \"Scrum\", \"Kanban\"\n    ];\n\n    const foundSkills: string[] = [];\n    const lowerText = text.toLowerCase();\n\n    skillKeywords.forEach(skill => {\n      if (lowerText.includes(skill.toLowerCase())) {\n        foundSkills.push(skill);\n      }\n    });\n\n    return foundSkills;\n  }\n\n  extractExperience(text: string): number {\n    // Look for experience patterns\n    const experiencePatterns = [\n      /(\\d+)\\+?\\s*years?\\s*(?:of\\s+)?experience/i,\n      /(\\d+)\\+?\\s*years?\\s*in/i,\n      /(\\d+)\\+?\\s*yrs?\\s*experience/i,\n      /experience:\\s*(\\d+)\\+?\\s*years?/i,\n    ];\n\n    for (const pattern of experiencePatterns) {\n      const match = text.match(pattern);\n      if (match) {\n        return parseInt(match[1], 10);\n      }\n    }\n\n    return 0;\n  }\n}\n\nexport const resumeParserService = new ResumeParserService();\n","size_bytes":3824},"client/src/components/ObjectUploader.tsx":{"content":"import { useState } from \"react\";\nimport type { ReactNode } from \"react\";\nimport Uppy from \"@uppy/core\";\nimport { DashboardModal } from \"@uppy/react\";\n// Uppy CSS imports temporarily disabled due to Vite resolution issues\n// import \"@uppy/core/dist/style.css\";\n// import \"@uppy/dashboard/dist/style.css\";\nimport AwsS3 from \"@uppy/aws-s3\";\nimport type { UploadResult } from \"@uppy/core\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface ObjectUploaderProps {\n  maxNumberOfFiles?: number;\n  maxFileSize?: number;\n  onGetUploadParameters: () => Promise<{\n    method: \"PUT\";\n    url: string;\n  }>;\n  onComplete?: (\n    result: UploadResult<Record<string, unknown>, Record<string, unknown>>\n  ) => void;\n  buttonClassName?: string;\n  children: ReactNode;\n}\n\n/**\n * A file upload component that renders as a button and provides a modal interface for\n * file management.\n * \n * Features:\n * - Renders as a customizable button that opens a file upload modal\n * - Provides a modal interface for:\n *   - File selection\n *   - File preview\n *   - Upload progress tracking\n *   - Upload status display\n * \n * The component uses Uppy under the hood to handle all file upload functionality.\n * All file management features are automatically handled by the Uppy dashboard modal.\n * \n * @param props - Component props\n * @param props.maxNumberOfFiles - Maximum number of files allowed to be uploaded\n *   (default: 1)\n * @param props.maxFileSize - Maximum file size in bytes (default: 10MB)\n * @param props.onGetUploadParameters - Function to get upload parameters (method and URL).\n *   Typically used to fetch a presigned URL from the backend server for direct-to-S3\n *   uploads.\n * @param props.onComplete - Callback function called when upload is complete. Typically\n *   used to make post-upload API calls to update server state and set object ACL\n *   policies.\n * @param props.buttonClassName - Optional CSS class name for the button\n * @param props.children - Content to be rendered inside the button\n */\nexport function ObjectUploader({\n  maxNumberOfFiles = 1,\n  maxFileSize = 10485760, // 10MB default\n  onGetUploadParameters,\n  onComplete,\n  buttonClassName,\n  children,\n}: ObjectUploaderProps) {\n  const [showModal, setShowModal] = useState(false);\n  const [uppy] = useState(() =>\n    new Uppy({\n      restrictions: {\n        maxNumberOfFiles,\n        maxFileSize,\n      },\n      autoProceed: false,\n    })\n      .use(AwsS3, {\n        shouldUseMultipart: false,\n        getUploadParameters: onGetUploadParameters,\n      })\n      .on(\"complete\", (result) => {\n        onComplete?.(result);\n      })\n  );\n\n  return (\n    <div>\n      <Button onClick={() => setShowModal(true)} className={buttonClassName}>\n        {children}\n      </Button>\n\n      <DashboardModal\n        uppy={uppy}\n        open={showModal}\n        onRequestClose={() => setShowModal(false)}\n        proudlyDisplayPoweredByUppy={false}\n      />\n    </div>\n  );\n}\n","size_bytes":2936},"client/src/components/ai-chat.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Bot, \n  User, \n  Send, \n  ArrowLeft, \n  Loader2,\n  Copy,\n  ThumbsUp,\n  ThumbsDown,\n  Sparkles\n} from \"lucide-react\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/api\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface Message {\n  id: string;\n  role: \"user\" | \"assistant\";\n  content: string;\n  timestamp: Date;\n}\n\ninterface AiChatProps {\n  initialMessage?: string;\n  onBack?: () => void;\n}\n\nexport function AiChat({ initialMessage, onBack }: AiChatProps) {\n  const [messages, setMessages] = useState<Message[]>([]);\n  const [inputValue, setInputValue] = useState(initialMessage || \"\");\n  const [sessionId] = useState(() => `session_${Date.now()}`);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const { toast } = useToast();\n\n  // Load conversation history\n  const { data: conversationHistory } = useQuery<any[]>({\n    queryKey: [\"/api/ai/conversations\", sessionId],\n    enabled: !initialMessage, // Don't load history if we have an initial message\n  });\n\n  // Send message mutation\n  const sendMessageMutation = useMutation({\n    mutationFn: async (message: string) => {\n      const response = await apiRequest(\"POST\", \"/api/ai/chat\", {\n        message,\n        sessionId,\n        context: getContext(),\n      });\n      return response.json();\n    },\n    onSuccess: (data, variables) => {\n      // Add assistant response\n      setMessages(prev => [\n        ...prev,\n        {\n          id: `assistant_${Date.now()}`,\n          role: \"assistant\",\n          content: data.response,\n          timestamp: new Date(),\n        }\n      ]);\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to get AI response. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Initialize with welcome message and initial message if provided\n  useEffect(() => {\n    if (messages.length === 0) {\n      const welcomeMessage: Message = {\n        id: \"welcome\",\n        role: \"assistant\",\n        content: \"Hello! I'm your AI recruitment assistant. I can help you with candidate analysis, job matching, interview questions, and recruitment insights. How can I assist you today?\",\n        timestamp: new Date(),\n      };\n\n      if (initialMessage) {\n        setMessages([welcomeMessage]);\n        // Auto-send the initial message\n        handleSendMessage(initialMessage);\n      } else {\n        setMessages([welcomeMessage]);\n      }\n    }\n  }, [initialMessage]);\n\n  // Auto-scroll to bottom\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  }, [messages]);\n\n  // Load conversation history\n  useEffect(() => {\n    if (conversationHistory && conversationHistory.length > 0 && !initialMessage) {\n      const historyMessages: Message[] = conversationHistory.flatMap((conv: any) => [\n        {\n          id: `user_${conv.id}`,\n          role: \"user\" as const,\n          content: conv.message,\n          timestamp: new Date(conv.createdAt),\n        },\n        {\n          id: `assistant_${conv.id}`,\n          role: \"assistant\" as const,\n          content: conv.response,\n          timestamp: new Date(conv.createdAt),\n        },\n      ]);\n      setMessages(prev => prev.length === 1 ? [...prev, ...historyMessages] : prev);\n    }\n  }, [conversationHistory, initialMessage]);\n\n  const getContext = () => {\n    // Provide context about the current recruitment state\n    return \"User is an HR manager working with the AI recruitment system. They may ask about candidates, jobs, interviews, or general recruitment advice.\";\n  };\n\n  const handleSendMessage = (messageText: string = inputValue) => {\n    if (!messageText.trim() || sendMessageMutation.isPending) return;\n\n    // Add user message\n    const userMessage: Message = {\n      id: `user_${Date.now()}`,\n      role: \"user\",\n      content: messageText,\n      timestamp: new Date(),\n    };\n\n    setMessages(prev => [...prev, userMessage]);\n    setInputValue(\"\");\n\n    // Send to AI\n    sendMessageMutation.mutate(messageText);\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === \"Enter\" && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  const copyToClipboard = (text: string) => {\n    navigator.clipboard.writeText(text);\n    toast({\n      title: \"Copied\",\n      description: \"Message copied to clipboard\",\n    });\n  };\n\n  const suggestedPrompts = [\n    \"Analyze the top candidates for our Senior Developer role\",\n    \"Generate interview questions for a Product Manager position\",\n    \"What are the best practices for remote interviews?\",\n    \"How can I improve our recruitment conversion rates?\",\n    \"Help me write a compelling job description\",\n    \"What should I look for in a candidate's resume?\",\n  ];\n\n  return (\n    <div className=\"h-full flex flex-col\">\n      {/* Header */}\n      <div className=\"bg-card border-b border-border p-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            {onBack && (\n              <Button \n                variant=\"ghost\" \n                size=\"sm\" \n                onClick={onBack}\n                data-testid=\"button-back\"\n              >\n                <ArrowLeft className=\"w-4 h-4\" />\n              </Button>\n            )}\n            <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n              <Bot className=\"text-primary-foreground w-4 h-4\" />\n            </div>\n            <div>\n              <h2 className=\"font-semibold text-foreground\">AI Assistant</h2>\n              <p className=\"text-xs text-muted-foreground\">\n                {sendMessageMutation.isPending ? \"Thinking...\" : \"Online\"}\n              </p>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center space-x-1\">\n            <Badge variant=\"secondary\" className=\"text-xs\">\n              <Sparkles className=\"w-3 h-3 mr-1\" />\n              GPT-5\n            </Badge>\n          </div>\n        </div>\n      </div>\n\n      {/* Messages */}\n      <ScrollArea className=\"flex-1 p-4\">\n        <div className=\"space-y-4 max-w-4xl mx-auto\">\n          {messages.map((message) => (\n            <div\n              key={message.id}\n              className={`flex items-start space-x-3 ${\n                message.role === \"user\" ? \"justify-end\" : \"justify-start\"\n              }`}\n            >\n              {message.role === \"assistant\" && (\n                <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center flex-shrink-0\">\n                  <Bot className=\"text-primary-foreground w-4 h-4\" />\n                </div>\n              )}\n              \n              <div\n                className={`max-w-[70%] p-4 rounded-lg ${\n                  message.role === \"user\"\n                    ? \"bg-primary text-primary-foreground\"\n                    : \"bg-accent text-accent-foreground\"\n                }`}\n                data-testid={`message-${message.role}-${message.id}`}\n              >\n                <div className=\"prose prose-sm max-w-none\">\n                  <p className=\"whitespace-pre-wrap\">{message.content}</p>\n                </div>\n                \n                <div className=\"flex items-center justify-between mt-2 text-xs opacity-70\">\n                  <span>\n                    {message.timestamp.toLocaleTimeString([], { \n                      hour: \"2-digit\", \n                      minute: \"2-digit\" \n                    })}\n                  </span>\n                  \n                  {message.role === \"assistant\" && (\n                    <div className=\"flex items-center space-x-1\">\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        className=\"h-6 px-2\"\n                        onClick={() => copyToClipboard(message.content)}\n                      >\n                        <Copy className=\"w-3 h-3\" />\n                      </Button>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        className=\"h-6 px-2\"\n                      >\n                        <ThumbsUp className=\"w-3 h-3\" />\n                      </Button>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        className=\"h-6 px-2\"\n                      >\n                        <ThumbsDown className=\"w-3 h-3\" />\n                      </Button>\n                    </div>\n                  )}\n                </div>\n              </div>\n\n              {message.role === \"user\" && (\n                <div className=\"w-8 h-8 bg-secondary rounded-lg flex items-center justify-center flex-shrink-0\">\n                  <User className=\"text-secondary-foreground w-4 h-4\" />\n                </div>\n              )}\n            </div>\n          ))}\n          \n          {sendMessageMutation.isPending && (\n            <div className=\"flex items-start space-x-3\">\n              <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center flex-shrink-0\">\n                <Bot className=\"text-primary-foreground w-4 h-4\" />\n              </div>\n              <div className=\"bg-accent text-accent-foreground p-4 rounded-lg\">\n                <div className=\"flex items-center space-x-2\">\n                  <Loader2 className=\"w-4 h-4 animate-spin\" />\n                  <span className=\"text-sm\">AI is thinking...</span>\n                </div>\n              </div>\n            </div>\n          )}\n\n          <div ref={messagesEndRef} />\n        </div>\n      </ScrollArea>\n\n      {/* Suggested Prompts */}\n      {messages.length === 1 && !sendMessageMutation.isPending && (\n        <div className=\"p-4 border-t border-border\">\n          <p className=\"text-sm text-muted-foreground mb-3\">Try asking about:</p>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2\">\n            {suggestedPrompts.slice(0, 4).map((prompt, index) => (\n              <Button\n                key={index}\n                variant=\"outline\"\n                size=\"sm\"\n                className=\"text-left justify-start text-xs h-auto py-2 px-3\"\n                onClick={() => handleSendMessage(prompt)}\n                data-testid={`button-prompt-${index}`}\n              >\n                {prompt}\n              </Button>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Input */}\n      <div className=\"p-4 border-t border-border\">\n        <div className=\"flex space-x-2\">\n          <Input\n            value={inputValue}\n            onChange={(e) => setInputValue(e.target.value)}\n            onKeyPress={handleKeyPress}\n            placeholder=\"Ask me anything about recruitment...\"\n            disabled={sendMessageMutation.isPending}\n            className=\"flex-1\"\n            data-testid=\"input-message\"\n          />\n          <Button\n            onClick={() => handleSendMessage()}\n            disabled={!inputValue.trim() || sendMessageMutation.isPending}\n            data-testid=\"button-send\"\n          >\n            {sendMessageMutation.isPending ? (\n              <Loader2 className=\"w-4 h-4 animate-spin\" />\n            ) : (\n              <Send className=\"w-4 h-4\" />\n            )}\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":11690},"client/src/components/candidate-card.tsx":{"content":"import { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { \n  Mail, \n  Phone, \n  MapPin, \n  Calendar, \n  DollarSign,\n  FileText,\n  Eye,\n  MessageSquare,\n  Upload,\n  Brain,\n  Clock,\n  Tag\n} from \"lucide-react\";\nimport { type Candidate } from \"@shared/schema\";\n\ninterface CandidateCardProps {\n  candidate: Candidate;\n  onUploadResume?: () => void;\n}\n\nexport function CandidateCard({ candidate, onUploadResume }: CandidateCardProps) {\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"applied\":\n        return \"bg-blue-500/10 text-blue-700 border-blue-500/20\";\n      case \"screening\":\n        return \"bg-yellow-500/10 text-yellow-700 border-yellow-500/20\";\n      case \"interview\":\n        return \"bg-purple-500/10 text-purple-700 border-purple-500/20\";\n      case \"offer\":\n        return \"bg-green-500/10 text-green-700 border-green-500/20\";\n      case \"hired\":\n        return \"bg-emerald-500/10 text-emerald-700 border-emerald-500/20\";\n      case \"rejected\":\n        return \"bg-red-500/10 text-red-700 border-red-500/20\";\n      default:\n        return \"bg-gray-500/10 text-gray-700 border-gray-500/20\";\n    }\n  };\n\n  const getSourceColor = (source: string) => {\n    switch (source) {\n      case \"linkedin\":\n        return \"bg-blue-500/10 text-blue-700\";\n      case \"job_board\":\n        return \"bg-green-500/10 text-green-700\";\n      case \"referral\":\n        return \"bg-purple-500/10 text-purple-700\";\n      default:\n        return \"bg-gray-500/10 text-gray-700\";\n    }\n  };\n\n  const formatSalary = (amount?: number) => {\n    if (!amount) return \"Not specified\";\n    return new Intl.NumberFormat(\"en-US\", {\n      style: \"currency\",\n      currency: \"USD\",\n      maximumFractionDigits: 0,\n    }).format(amount);\n  };\n\n  const formatLastContacted = (date?: Date) => {\n    if (!date) return \"Never\";\n    const now = new Date();\n    const diffInDays = Math.floor((now.getTime() - new Date(date).getTime()) / (1000 * 60 * 60 * 24));\n    \n    if (diffInDays === 0) return \"Today\";\n    if (diffInDays === 1) return \"Yesterday\";\n    if (diffInDays < 7) return `${diffInDays} days ago`;\n    if (diffInDays < 30) return `${Math.floor(diffInDays / 7)} weeks ago`;\n    return `${Math.floor(diffInDays / 30)} months ago`;\n  };\n\n  const skills = candidate.skills as string[] || [];\n  const tags = candidate.tags as string[] || [];\n  const matchScore = Number(candidate.matchScore) || 0;\n\n  return (\n    <Card className=\"hover:shadow-md transition-shadow\">\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-start justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-12 h-12 rounded-full bg-primary/10 flex items-center justify-center\">\n              <span className=\"text-lg font-semibold text-primary\">\n                {candidate.name?.charAt(0) || 'C'}\n              </span>\n            </div>\n            <div>\n              <h3 className=\"font-semibold text-foreground\" data-testid={`text-name-${candidate.id}`}>\n                {candidate.name || 'Unknown Name'}\n              </h3>\n              <p className=\"text-sm text-muted-foreground\" data-testid={`text-position-${candidate.id}`}>\n                {candidate.position || 'Position not specified'}\n              </p>\n            </div>\n          </div>\n          <div className=\"flex flex-col items-end space-y-1\">\n            <Badge \n              className={getStatusColor(candidate.status)}\n              data-testid={`badge-status-${candidate.id}`}\n            >\n              {candidate.status}\n            </Badge>\n            {candidate.source && (\n              <Badge \n                variant=\"outline\" \n                className={`text-xs ${getSourceColor(candidate.source)}`}\n                data-testid={`badge-source-${candidate.id}`}\n              >\n                {candidate.source}\n              </Badge>\n            )}\n          </div>\n        </div>\n      </CardHeader>\n\n      <CardContent className=\"space-y-4\">\n        {/* Contact Information */}\n        <div className=\"space-y-2\">\n          {candidate.email && (\n            <div className=\"flex items-center text-sm text-muted-foreground\">\n              <Mail className=\"w-4 h-4 mr-2\" />\n              <span data-testid={`text-email-${candidate.id}`}>{candidate.email}</span>\n            </div>\n          )}\n          {candidate.phone && (\n            <div className=\"flex items-center text-sm text-muted-foreground\">\n              <Phone className=\"w-4 h-4 mr-2\" />\n              <span data-testid={`text-phone-${candidate.id}`}>{candidate.phone}</span>\n            </div>\n          )}\n          {candidate.location && (\n            <div className=\"flex items-center text-sm text-muted-foreground\">\n              <MapPin className=\"w-4 h-4 mr-2\" />\n              <span data-testid={`text-location-${candidate.id}`}>{candidate.location}</span>\n            </div>\n          )}\n        </div>\n\n        {/* Experience and Salary */}\n        <div className=\"grid grid-cols-2 gap-4 text-sm\">\n          <div>\n            <p className=\"text-muted-foreground\">Experience</p>\n            <p className=\"font-medium\" data-testid={`text-experience-${candidate.id}`}>\n              {candidate.experience ? `${candidate.experience} years` : 'Not specified'}\n            </p>\n          </div>\n          <div>\n            <p className=\"text-muted-foreground\">Salary Expectation</p>\n            <p className=\"font-medium\" data-testid={`text-salary-${candidate.id}`}>\n              {formatSalary(candidate.salaryExpectation ?? undefined)}\n            </p>\n          </div>\n        </div>\n\n        {/* Match Score */}\n        {matchScore > 0 && (\n          <div>\n            <div className=\"flex items-center justify-between text-sm mb-2\">\n              <div className=\"flex items-center space-x-1\">\n                <Brain className=\"w-4 h-4 text-primary\" />\n                <span className=\"text-muted-foreground\">AI Match Score</span>\n              </div>\n              <span className=\"font-medium text-chart-2\" data-testid={`text-match-score-${candidate.id}`}>\n                {matchScore}%\n              </span>\n            </div>\n            <Progress value={matchScore} className=\"h-2\" />\n          </div>\n        )}\n\n        {/* Skills */}\n        {skills.length > 0 && (\n          <div>\n            <p className=\"text-sm text-muted-foreground mb-2\">Skills</p>\n            <div className=\"flex flex-wrap gap-1\">\n              {skills.slice(0, 3).map((skill, index) => (\n                <Badge \n                  key={index} \n                  variant=\"secondary\" \n                  className=\"text-xs\"\n                  data-testid={`badge-skill-${candidate.id}-${index}`}\n                >\n                  {skill}\n                </Badge>\n              ))}\n              {skills.length > 3 && (\n                <Badge variant=\"secondary\" className=\"text-xs\">\n                  +{skills.length - 3} more\n                </Badge>\n              )}\n            </div>\n          </div>\n        )}\n\n        {/* Tags */}\n        {tags.length > 0 && (\n          <div>\n            <p className=\"text-sm text-muted-foreground mb-2\">Tags</p>\n            <div className=\"flex flex-wrap gap-1\">\n              {tags.map((tag, index) => (\n                <Badge \n                  key={index} \n                  variant=\"outline\" \n                  className=\"text-xs\"\n                  data-testid={`badge-tag-${candidate.id}-${index}`}\n                >\n                  <Tag className=\"w-3 h-3 mr-1\" />\n                  {tag}\n                </Badge>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* AI Summary */}\n        {candidate.aiSummary && (\n          <div className=\"p-3 bg-accent rounded-lg\">\n            <div className=\"flex items-center space-x-2 mb-1\">\n              <Brain className=\"w-4 h-4 text-primary\" />\n              <p className=\"text-xs text-muted-foreground\">AI Summary</p>\n            </div>\n            <p className=\"text-sm text-accent-foreground line-clamp-2\" data-testid={`text-ai-summary-${candidate.id}`}>\n              {candidate.aiSummary}\n            </p>\n          </div>\n        )}\n\n        {/* Last Contacted */}\n        <div className=\"flex items-center text-xs text-muted-foreground\">\n          <Clock className=\"w-3 h-3 mr-1\" />\n          <span>Last contacted: {formatLastContacted(candidate.lastContactedAt ?? undefined)}</span>\n        </div>\n\n        {/* Actions */}\n        <div className=\"flex space-x-2 pt-2\">\n          <Button size=\"sm\" className=\"flex-1\" data-testid={`button-view-${candidate.id}`}>\n            <Eye className=\"w-4 h-4 mr-2\" />\n            View Profile\n          </Button>\n          <Button size=\"sm\" variant=\"outline\" data-testid={`button-message-${candidate.id}`}>\n            <MessageSquare className=\"w-4 h-4\" />\n          </Button>\n          {candidate.resumeUrl ? (\n            <Button size=\"sm\" variant=\"outline\" data-testid={`button-resume-${candidate.id}`}>\n              <FileText className=\"w-4 h-4\" />\n            </Button>\n          ) : (\n            <Button \n              size=\"sm\" \n              variant=\"outline\" \n              onClick={onUploadResume}\n              data-testid={`button-upload-resume-${candidate.id}`}\n            >\n              <Upload className=\"w-4 h-4\" />\n            </Button>\n          )}\n        </div>\n\n        {/* Last Updated */}\n        <div className=\"text-xs text-muted-foreground text-center pt-2 border-t\">\n          <Calendar className=\"w-3 h-3 mr-1 inline\" />\n          Updated {new Date(candidate.updatedAt!).toLocaleDateString()}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":9802},"client/src/components/interview-card.tsx":{"content":"import { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Calendar, \n  Clock, \n  Video, \n  Phone, \n  MapPin,\n  User,\n  Building,\n  Edit,\n  CheckCircle,\n  XCircle,\n  AlertCircle\n} from \"lucide-react\";\nimport { type Interview } from \"@shared/schema\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { apiRequest } from \"@/lib/api\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface InterviewCardProps {\n  interview: Interview;\n}\n\nexport function InterviewCard({ interview }: InterviewCardProps) {\n  const { toast } = useToast();\n\n  // Fetch candidate and job details\n  const { data: candidate } = useQuery<any>({\n    queryKey: [\"/api/candidates\", interview.candidateId],\n    enabled: !!interview.candidateId,\n  });\n\n  const { data: job } = useQuery<any>({\n    queryKey: [\"/api/jobs\", interview.jobId],\n    enabled: !!interview.jobId,\n  });\n\n  const updateInterviewMutation = useMutation({\n    mutationFn: async (data: Partial<Interview>) => {\n      const response = await apiRequest(\"PUT\", `/api/interviews/${interview.id}`, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/interviews\"] });\n      toast({\n        title: \"Interview updated\",\n        description: \"Interview has been updated successfully.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update interview.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"scheduled\":\n        return \"bg-blue-500/10 text-blue-700 border-blue-500/20\";\n      case \"completed\":\n        return \"bg-green-500/10 text-green-700 border-green-500/20\";\n      case \"cancelled\":\n        return \"bg-red-500/10 text-red-700 border-red-500/20\";\n      case \"no-show\":\n        return \"bg-gray-500/10 text-gray-700 border-gray-500/20\";\n      default:\n        return \"bg-gray-500/10 text-gray-700 border-gray-500/20\";\n    }\n  };\n\n  const getTypeIcon = (type: string) => {\n    switch (type) {\n      case \"video\":\n        return Video;\n      case \"phone\":\n        return Phone;\n      case \"in-person\":\n        return MapPin;\n      default:\n        return Video;\n    }\n  };\n\n  const formatDateTime = (date: Date) => {\n    return new Intl.DateTimeFormat(\"en-US\", {\n      weekday: \"short\",\n      month: \"short\",\n      day: \"numeric\",\n      hour: \"numeric\",\n      minute: \"2-digit\",\n      hour12: true,\n    }).format(new Date(date));\n  };\n\n  const formatDuration = (minutes: number) => {\n    if (minutes < 60) {\n      return `${minutes} min`;\n    }\n    const hours = Math.floor(minutes / 60);\n    const remainingMinutes = minutes % 60;\n    return remainingMinutes > 0 ? `${hours}h ${remainingMinutes}m` : `${hours}h`;\n  };\n\n  const isUpcoming = new Date(interview.scheduledDate) > new Date();\n  const isPast = new Date(interview.scheduledDate) < new Date();\n  const TypeIcon = getTypeIcon(interview.type);\n\n  const handleStatusUpdate = (status: string) => {\n    updateInterviewMutation.mutate({ status });\n  };\n\n  return (\n    <Card className=\"hover:shadow-md transition-shadow\">\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-start justify-between\">\n          <div className=\"flex-1\">\n            <div className=\"flex items-center space-x-2 mb-2\">\n              <TypeIcon className=\"w-4 h-4 text-muted-foreground\" />\n              <Badge \n                className={getStatusColor(interview.status)}\n                data-testid={`badge-status-${interview.id}`}\n              >\n                {interview.status}\n              </Badge>\n              {interview.round > 1 && (\n                <Badge variant=\"outline\" className=\"text-xs\">\n                  Round {interview.round}\n                </Badge>\n              )}\n            </div>\n            \n            <h3 className=\"font-semibold text-foreground\" data-testid={`text-title-${interview.id}`}>\n              {candidate?.name || 'Unknown Candidate'}\n            </h3>\n            <p className=\"text-sm text-muted-foreground\" data-testid={`text-job-${interview.id}`}>\n              {job?.title || 'Unknown Position'}\n            </p>\n          </div>\n          \n          {interview.rating && (\n            <div className=\"text-right\">\n              <div className=\"flex items-center space-x-1\">\n                {[...Array(5)].map((_, i) => (\n                  <div\n                    key={i}\n                    className={`w-3 h-3 rounded-full ${\n                      i < interview.rating! ? \"bg-yellow-400\" : \"bg-gray-200\"\n                    }`}\n                  />\n                ))}\n              </div>\n              <p className=\"text-xs text-muted-foreground mt-1\">\n                {interview.rating}/5\n              </p>\n            </div>\n          )}\n        </div>\n      </CardHeader>\n\n      <CardContent className=\"space-y-4\">\n        {/* Date and Time */}\n        <div className=\"space-y-2\">\n          <div className=\"flex items-center text-sm\">\n            <Calendar className=\"w-4 h-4 mr-2 text-muted-foreground\" />\n            <span data-testid={`text-datetime-${interview.id}`}>\n              {formatDateTime(interview.scheduledDate)}\n            </span>\n          </div>\n          <div className=\"flex items-center text-sm text-muted-foreground\">\n            <Clock className=\"w-4 h-4 mr-2\" />\n            <span data-testid={`text-duration-${interview.id}`}>\n              {formatDuration(interview.duration)}\n            </span>\n          </div>\n        </div>\n\n        {/* Location/Link */}\n        {interview.type === \"video\" && interview.meetingLink && (\n          <div className=\"p-3 bg-accent rounded-lg\">\n            <p className=\"text-xs text-muted-foreground mb-1\">Meeting Link</p>\n            <a \n              href={interview.meetingLink}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              className=\"text-sm text-primary hover:underline\"\n              data-testid={`link-meeting-${interview.id}`}\n            >\n              Join Video Call\n            </a>\n          </div>\n        )}\n\n        {interview.type === \"in-person\" && interview.location && (\n          <div className=\"flex items-center text-sm text-muted-foreground\">\n            <MapPin className=\"w-4 h-4 mr-2\" />\n            <span data-testid={`text-location-${interview.id}`}>{interview.location}</span>\n          </div>\n        )}\n\n        {/* Interviewer */}\n        {interview.interviewerId && (\n          <div className=\"flex items-center text-sm text-muted-foreground\">\n            <User className=\"w-4 h-4 mr-2\" />\n            <span>Interviewer assigned</span>\n          </div>\n        )}\n\n        {/* Feedback */}\n        {interview.feedback && (\n          <div className=\"p-3 bg-accent rounded-lg\">\n            <p className=\"text-xs text-muted-foreground mb-1\">Feedback</p>\n            <p className=\"text-sm text-accent-foreground line-clamp-3\" data-testid={`text-feedback-${interview.id}`}>\n              {interview.feedback}\n            </p>\n          </div>\n        )}\n\n        {/* Recommendation */}\n        {interview.recommendation && (\n          <div className=\"flex items-center space-x-2\">\n            {interview.recommendation === \"hire\" && (\n              <CheckCircle className=\"w-4 h-4 text-green-600\" />\n            )}\n            {interview.recommendation === \"reject\" && (\n              <XCircle className=\"w-4 h-4 text-red-600\" />\n            )}\n            {interview.recommendation === \"next-round\" && (\n              <AlertCircle className=\"w-4 h-4 text-yellow-600\" />\n            )}\n            <span className=\"text-sm capitalize\" data-testid={`text-recommendation-${interview.id}`}>\n              {interview.recommendation.replace(\"-\", \" \")}\n            </span>\n          </div>\n        )}\n\n        {/* Actions */}\n        <div className=\"flex space-x-2 pt-2 border-t\">\n          {interview.status === \"scheduled\" && isUpcoming && (\n            <>\n              <Button \n                size=\"sm\" \n                variant=\"outline\"\n                onClick={() => handleStatusUpdate(\"completed\")}\n                disabled={updateInterviewMutation.isPending}\n                data-testid={`button-complete-${interview.id}`}\n              >\n                Mark Complete\n              </Button>\n              <Button \n                size=\"sm\" \n                variant=\"outline\"\n                onClick={() => handleStatusUpdate(\"cancelled\")}\n                disabled={updateInterviewMutation.isPending}\n                data-testid={`button-cancel-${interview.id}`}\n              >\n                Cancel\n              </Button>\n            </>\n          )}\n          \n          {interview.status === \"scheduled\" && isPast && (\n            <Button \n              size=\"sm\" \n              variant=\"outline\"\n              onClick={() => handleStatusUpdate(\"no-show\")}\n              disabled={updateInterviewMutation.isPending}\n              data-testid={`button-no-show-${interview.id}`}\n            >\n              Mark No Show\n            </Button>\n          )}\n\n          <Button \n            size=\"sm\" \n            className=\"flex-1\"\n            data-testid={`button-view-${interview.id}`}\n          >\n            <Edit className=\"w-4 h-4 mr-2\" />\n            View Details\n          </Button>\n        </div>\n\n        {/* Time indicator */}\n        <div className=\"text-xs text-center text-muted-foreground\">\n          {isUpcoming && interview.status === \"scheduled\" && (\n            <span className=\"text-blue-600\">\n              Upcoming • {new Date(interview.scheduledDate) > new Date() ? 'In future' : 'Past due'}\n            </span>\n          )}\n          {interview.status === \"completed\" && (\n            <span className=\"text-green-600\">Completed</span>\n          )}\n          {interview.status === \"cancelled\" && (\n            <span className=\"text-red-600\">Cancelled</span>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":10144},"client/src/components/job-card.tsx":{"content":"import { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  MapPin, \n  Calendar, \n  DollarSign,\n  Users,\n  Clock,\n  Building,\n  Edit,\n  Eye,\n  Pause,\n  Play,\n  X\n} from \"lucide-react\";\nimport { type Job } from \"@shared/schema\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { apiRequest } from \"@/lib/api\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface JobCardProps {\n  job: Job;\n}\n\nexport function JobCard({ job }: JobCardProps) {\n  const { toast } = useToast();\n\n  const updateJobMutation = useMutation({\n    mutationFn: async (data: Partial<Job>) => {\n      const response = await apiRequest(\"PUT\", `/api/jobs/${job.id}`, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/jobs\"] });\n      toast({\n        title: \"Job updated\",\n        description: \"Job status has been updated successfully.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update job status.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteJobMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest(\"DELETE\", `/api/jobs/${job.id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/jobs\"] });\n      toast({\n        title: \"Job deleted\",\n        description: \"Job has been deleted successfully.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete job.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"active\":\n        return \"bg-green-500/10 text-green-700 border-green-500/20\";\n      case \"paused\":\n        return \"bg-yellow-500/10 text-yellow-700 border-yellow-500/20\";\n      case \"closed\":\n        return \"bg-red-500/10 text-red-700 border-red-500/20\";\n      default:\n        return \"bg-gray-500/10 text-gray-700 border-gray-500/20\";\n    }\n  };\n\n  const formatSalary = (min?: number, max?: number) => {\n    if (!min && !max) return \"Not specified\";\n    const formatter = new Intl.NumberFormat(\"en-US\", {\n      style: \"currency\",\n      currency: \"USD\",\n      maximumFractionDigits: 0,\n    });\n    if (min && max) {\n      return `${formatter.format(min)} - ${formatter.format(max)}`;\n    }\n    return formatter.format(min || max || 0);\n  };\n\n  const requirements = job.requirements as string[] || [];\n\n  const handleStatusToggle = () => {\n    const newStatus = job.status === \"active\" ? \"paused\" : \"active\";\n    updateJobMutation.mutate({ status: newStatus });\n  };\n\n  const handleDelete = () => {\n    if (window.confirm(\"Are you sure you want to delete this job?\")) {\n      deleteJobMutation.mutate();\n    }\n  };\n\n  return (\n    <Card className=\"hover:shadow-md transition-shadow\">\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-start justify-between\">\n          <div className=\"flex-1\">\n            <h3 className=\"font-semibold text-foreground text-lg mb-1\" data-testid={`text-title-${job.id}`}>\n              {job.title}\n            </h3>\n            <div className=\"flex items-center space-x-4 text-sm text-muted-foreground\">\n              <div className=\"flex items-center\">\n                <Building className=\"w-4 h-4 mr-1\" />\n                <span data-testid={`text-department-${job.id}`}>{job.department}</span>\n              </div>\n              <div className=\"flex items-center\">\n                <MapPin className=\"w-4 h-4 mr-1\" />\n                <span data-testid={`text-location-${job.id}`}>{job.location}</span>\n              </div>\n            </div>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <Badge \n              className={getStatusColor(job.status)}\n              data-testid={`badge-status-${job.id}`}\n            >\n              {job.status}\n            </Badge>\n          </div>\n        </div>\n      </CardHeader>\n\n      <CardContent className=\"space-y-4\">\n        {/* Job Details */}\n        <div className=\"grid grid-cols-2 gap-4 text-sm\">\n          <div>\n            <p className=\"text-muted-foreground\">Type</p>\n            <p className=\"font-medium capitalize\" data-testid={`text-type-${job.id}`}>\n              {job.type.replace(\"-\", \" \")}\n            </p>\n          </div>\n          <div>\n            <p className=\"text-muted-foreground\">Salary</p>\n            <p className=\"font-medium\" data-testid={`text-salary-${job.id}`}>\n              {formatSalary(job.salaryMin ?? undefined, job.salaryMax ?? undefined)}\n            </p>\n          </div>\n        </div>\n\n        {/* Description */}\n        <div>\n          <p className=\"text-sm text-muted-foreground line-clamp-3\" data-testid={`text-description-${job.id}`}>\n            {job.description}\n          </p>\n        </div>\n\n        {/* Requirements */}\n        {requirements.length > 0 && (\n          <div>\n            <p className=\"text-sm text-muted-foreground mb-2\">Requirements</p>\n            <div className=\"flex flex-wrap gap-1\">\n              {requirements.slice(0, 3).map((req, index) => (\n                <Badge \n                  key={index} \n                  variant=\"secondary\" \n                  className=\"text-xs\"\n                  data-testid={`badge-requirement-${job.id}-${index}`}\n                >\n                  {req}\n                </Badge>\n              ))}\n              {requirements.length > 3 && (\n                <Badge variant=\"secondary\" className=\"text-xs\">\n                  +{requirements.length - 3} more\n                </Badge>\n              )}\n            </div>\n          </div>\n        )}\n\n        {/* Stats */}\n        <div className=\"flex items-center justify-between text-sm text-muted-foreground pt-2 border-t\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"flex items-center\">\n              <Users className=\"w-4 h-4 mr-1\" />\n              <span>0 applicants</span>\n            </div>\n            <div className=\"flex items-center\">\n              <Calendar className=\"w-4 h-4 mr-1\" />\n              <span>Posted {new Date(job.createdAt!).toLocaleDateString()}</span>\n            </div>\n          </div>\n        </div>\n\n        {/* Actions */}\n        <div className=\"flex space-x-2 pt-2\">\n          <Button size=\"sm\" className=\"flex-1\" data-testid={`button-view-${job.id}`}>\n            <Eye className=\"w-4 h-4 mr-2\" />\n            View Details\n          </Button>\n          <Button \n            size=\"sm\" \n            variant=\"outline\"\n            onClick={handleStatusToggle}\n            disabled={updateJobMutation.isPending}\n            data-testid={`button-toggle-status-${job.id}`}\n          >\n            {job.status === \"active\" ? (\n              <Pause className=\"w-4 h-4\" />\n            ) : (\n              <Play className=\"w-4 h-4\" />\n            )}\n          </Button>\n          <Button \n            size=\"sm\" \n            variant=\"outline\"\n            data-testid={`button-edit-${job.id}`}\n          >\n            <Edit className=\"w-4 h-4\" />\n          </Button>\n          <Button \n            size=\"sm\" \n            variant=\"outline\"\n            onClick={handleDelete}\n            disabled={deleteJobMutation.isPending}\n            data-testid={`button-delete-${job.id}`}\n          >\n            <X className=\"w-4 h-4\" />\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":7583},"client/src/components/prompt-template-manager.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { apiRequest } from \"@/lib/api\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { \n  Plus, \n  Edit, \n  Trash2, \n  Copy, \n  FileText,\n  Brain,\n  Users,\n  MessageSquare,\n  Filter,\n  Search\n} from \"lucide-react\";\n\ninterface PromptTemplate {\n  id: string;\n  name: string;\n  description: string;\n  category: \"resume_analysis\" | \"job_matching\" | \"interview_questions\" | \"candidate_screening\" | \"general\";\n  template: string;\n  variables: string[];\n  isActive: boolean;\n  createdAt: string;\n  updatedAt: string;\n}\n\nconst categoryIcons = {\n  resume_analysis: FileText,\n  job_matching: Users,\n  interview_questions: MessageSquare,\n  candidate_screening: Filter,\n  general: Brain,\n};\n\nconst categoryLabels = {\n  resume_analysis: \"Resume Analysis\",\n  job_matching: \"Job Matching\",\n  interview_questions: \"Interview Questions\",\n  candidate_screening: \"Candidate Screening\",\n  general: \"General\",\n};\n\nexport function PromptTemplateManager() {\n  const [selectedCategory, setSelectedCategory] = useState<string>(\"all\");\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [editingTemplate, setEditingTemplate] = useState<PromptTemplate | null>(null);\n  const { toast } = useToast();\n\n  const { data: templates, isLoading } = useQuery<PromptTemplate[]>({\n    queryKey: [\"/api/prompt-templates\"],\n  });\n\n  const createTemplateMutation = useMutation({\n    mutationFn: async (template: Omit<PromptTemplate, \"id\" | \"createdAt\" | \"updatedAt\">) => {\n      const response = await apiRequest(\"POST\", \"/api/prompt-templates\", template);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/prompt-templates\"] });\n      setIsCreateDialogOpen(false);\n      toast({\n        title: \"Template created\",\n        description: \"Prompt template has been created successfully.\",\n      });\n    },\n  });\n\n  const updateTemplateMutation = useMutation({\n    mutationFn: async ({ id, ...template }: Partial<PromptTemplate> & { id: string }) => {\n      const response = await apiRequest(\"PUT\", `/api/prompt-templates/${id}`, template);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/prompt-templates\"] });\n      setEditingTemplate(null);\n      toast({\n        title: \"Template updated\",\n        description: \"Prompt template has been updated successfully.\",\n      });\n    },\n  });\n\n  const deleteTemplateMutation = useMutation({\n    mutationFn: async (id: string) => {\n      await apiRequest(\"DELETE\", `/api/prompt-templates/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/prompt-templates\"] });\n      toast({\n        title: \"Template deleted\",\n        description: \"Prompt template has been deleted successfully.\",\n      });\n    },\n  });\n\n  const filteredTemplates = templates?.filter(template => {\n    const matchesCategory = selectedCategory === \"all\" || template.category === selectedCategory;\n    const matchesSearch = template.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         template.description.toLowerCase().includes(searchQuery.toLowerCase());\n    return matchesCategory && matchesSearch;\n  }) || [];\n\n  const handleDeleteTemplate = (id: string) => {\n    if (window.confirm(\"Are you sure you want to delete this template?\")) {\n      deleteTemplateMutation.mutate(id);\n    }\n  };\n\n  const copyToClipboard = (text: string) => {\n    navigator.clipboard.writeText(text);\n    toast({\n      title: \"Copied\",\n      description: \"Template copied to clipboard\",\n    });\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Brain className=\"w-5 h-5\" />\n                <span>Prompt Templates</span>\n              </CardTitle>\n              <p className=\"text-sm text-muted-foreground mt-1\">\n                Manage AI prompt templates for consistent and effective interactions\n              </p>\n            </div>\n            <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n              <DialogTrigger asChild>\n                <Button data-testid=\"button-create-template\">\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Create Template\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"max-w-2xl\">\n                <DialogHeader>\n                  <DialogTitle>Create New Prompt Template</DialogTitle>\n                </DialogHeader>\n                <TemplateForm \n                  onSubmit={(data) => createTemplateMutation.mutate(data)}\n                  isLoading={createTemplateMutation.isPending}\n                />\n              </DialogContent>\n            </Dialog>\n          </div>\n        </CardHeader>\n      </Card>\n\n      {/* Filters */}\n      <Card>\n        <CardContent className=\"p-4\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"relative flex-1\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n              <Input\n                placeholder=\"Search templates...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"pl-10\"\n                data-testid=\"input-search-templates\"\n              />\n            </div>\n            \n            <Select value={selectedCategory} onValueChange={setSelectedCategory}>\n              <SelectTrigger className=\"w-48\" data-testid=\"select-category-filter\">\n                <SelectValue placeholder=\"All Categories\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Categories</SelectItem>\n                {Object.entries(categoryLabels).map(([value, label]) => (\n                  <SelectItem key={value} value={value}>{label}</SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Templates Grid */}\n      {isLoading ? (\n        <div className=\"flex items-center justify-center h-64\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n        </div>\n      ) : (\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {filteredTemplates.map((template) => {\n            const IconComponent = categoryIcons[template.category];\n            return (\n              <Card key={template.id} className=\"hover:shadow-md transition-shadow\">\n                <CardHeader className=\"pb-3\">\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"w-10 h-10 bg-primary/10 rounded-lg flex items-center justify-center\">\n                        <IconComponent className=\"w-5 h-5 text-primary\" />\n                      </div>\n                      <div>\n                        <h3 className=\"font-semibold text-foreground\" data-testid={`text-template-name-${template.id}`}>\n                          {template.name}\n                        </h3>\n                        <p className=\"text-sm text-muted-foreground\">\n                          {template.description}\n                        </p>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center space-x-1\">\n                      <Badge \n                        variant={template.isActive ? \"default\" : \"secondary\"}\n                        data-testid={`badge-status-${template.id}`}\n                      >\n                        {template.isActive ? \"Active\" : \"Inactive\"}\n                      </Badge>\n                    </div>\n                  </div>\n                </CardHeader>\n\n                <CardContent className=\"space-y-4\">\n                  <div>\n                    <Badge variant=\"outline\" className=\"text-xs\">\n                      {categoryLabels[template.category]}\n                    </Badge>\n                  </div>\n\n                  {/* Variables */}\n                  {template.variables.length > 0 && (\n                    <div>\n                      <p className=\"text-sm text-muted-foreground mb-2\">Variables:</p>\n                      <div className=\"flex flex-wrap gap-1\">\n                        {template.variables.map((variable, index) => (\n                          <Badge key={index} variant=\"secondary\" className=\"text-xs\">\n                            {`{{${variable}}}`}\n                          </Badge>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n\n                  {/* Template Preview */}\n                  <div className=\"p-3 bg-accent rounded-lg\">\n                    <p className=\"text-xs text-muted-foreground mb-1\">Template Preview</p>\n                    <p className=\"text-sm text-accent-foreground line-clamp-3\" data-testid={`text-template-preview-${template.id}`}>\n                      {template.template.substring(0, 200)}...\n                    </p>\n                  </div>\n\n                  {/* Actions */}\n                  <div className=\"flex space-x-2\">\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      onClick={() => copyToClipboard(template.template)}\n                      data-testid={`button-copy-${template.id}`}\n                    >\n                      <Copy className=\"w-4 h-4 mr-2\" />\n                      Copy\n                    </Button>\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      onClick={() => setEditingTemplate(template)}\n                      data-testid={`button-edit-${template.id}`}\n                    >\n                      <Edit className=\"w-4 h-4 mr-2\" />\n                      Edit\n                    </Button>\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      onClick={() => handleDeleteTemplate(template.id)}\n                      disabled={deleteTemplateMutation.isPending}\n                      data-testid={`button-delete-${template.id}`}\n                    >\n                      <Trash2 className=\"w-4 h-4 mr-2\" />\n                      Delete\n                    </Button>\n                  </div>\n\n                  <div className=\"text-xs text-muted-foreground text-center pt-2 border-t\">\n                    Updated {new Date(template.updatedAt).toLocaleDateString()}\n                  </div>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n      )}\n\n      {filteredTemplates.length === 0 && !isLoading && (\n        <Card className=\"h-64\">\n          <CardContent className=\"flex flex-col items-center justify-center h-full text-center\">\n            <Brain className=\"w-12 h-12 text-muted-foreground mb-4\" />\n            <h3 className=\"text-lg font-medium text-foreground mb-2\">\n              {searchQuery || selectedCategory !== \"all\" ? \"No templates found\" : \"No templates yet\"}\n            </h3>\n            <p className=\"text-sm text-muted-foreground mb-4\">\n              {searchQuery || selectedCategory !== \"all\" \n                ? \"Try adjusting your search or filters\" \n                : \"Create your first prompt template to get started\"\n              }\n            </p>\n            {!searchQuery && selectedCategory === \"all\" && (\n              <Button onClick={() => setIsCreateDialogOpen(true)}>\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Create First Template\n              </Button>\n            )}\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Edit Template Dialog */}\n      {editingTemplate && (\n        <Dialog open={!!editingTemplate} onOpenChange={() => setEditingTemplate(null)}>\n          <DialogContent className=\"max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle>Edit Prompt Template</DialogTitle>\n            </DialogHeader>\n            <TemplateForm \n              template={editingTemplate}\n              onSubmit={(data) => updateTemplateMutation.mutate({ ...data, id: editingTemplate.id })}\n              isLoading={updateTemplateMutation.isPending}\n            />\n          </DialogContent>\n        </Dialog>\n      )}\n    </div>\n  );\n}\n\ninterface TemplateFormProps {\n  template?: PromptTemplate;\n  onSubmit: (data: any) => void;\n  isLoading: boolean;\n}\n\nfunction TemplateForm({ template, onSubmit, isLoading }: TemplateFormProps) {\n  const [formData, setFormData] = useState({\n    name: template?.name || \"\",\n    description: template?.description || \"\",\n    category: template?.category || \"general\",\n    template: template?.template || \"\",\n    isActive: template?.isActive ?? true,\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    // Extract variables from template\n    const regex = /{{([^}]+)}}/g;\n    const variables: string[] = [];\n    let match;\n    \n    while ((match = regex.exec(formData.template)) !== null) {\n      const variable = match[1].trim();\n      if (!variables.includes(variable)) {\n        variables.push(variable);\n      }\n    }\n\n    onSubmit({\n      ...formData,\n      variables,\n    });\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-4\">\n      <div className=\"grid grid-cols-2 gap-4\">\n        <div>\n          <label className=\"text-sm font-medium\">Name</label>\n          <Input\n            value={formData.name}\n            onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n            required\n            data-testid=\"input-template-name\"\n          />\n        </div>\n        <div>\n          <label className=\"text-sm font-medium\">Category</label>\n          <Select value={formData.category} onValueChange={(value) => setFormData({ ...formData, category: value as any })}>\n            <SelectTrigger data-testid=\"select-template-category\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              {Object.entries(categoryLabels).map(([value, label]) => (\n                <SelectItem key={value} value={value}>{label}</SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n      </div>\n\n      <div>\n        <label className=\"text-sm font-medium\">Description</label>\n        <Input\n          value={formData.description}\n          onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n          required\n          data-testid=\"input-template-description\"\n        />\n      </div>\n\n      <div>\n        <label className=\"text-sm font-medium\">Template</label>\n        <Textarea\n          value={formData.template}\n          onChange={(e) => setFormData({ ...formData, template: e.target.value })}\n          rows={10}\n          placeholder=\"Enter your prompt template. Use {{variableName}} for variables.\"\n          required\n          data-testid=\"textarea-template-content\"\n        />\n        <p className=\"text-xs text-muted-foreground mt-1\">\n          Use double curly braces for variables: {`{{variableName}}`}\n        </p>\n      </div>\n\n      <div className=\"flex items-center space-x-2\">\n        <input\n          type=\"checkbox\"\n          id=\"isActive\"\n          checked={formData.isActive}\n          onChange={(e) => setFormData({ ...formData, isActive: e.target.checked })}\n          data-testid=\"checkbox-template-active\"\n        />\n        <label htmlFor=\"isActive\" className=\"text-sm font-medium\">\n          Active\n        </label>\n      </div>\n\n      <div className=\"flex justify-end space-x-2\">\n        <Button type=\"submit\" disabled={isLoading} data-testid=\"button-save-template\">\n          {isLoading ? \"Saving...\" : \"Save Template\"}\n        </Button>\n      </div>\n    </form>\n  );\n}\n","size_bytes":16721},"client/src/components/resume-analysis.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { \n  FileText, \n  Brain, \n  CheckCircle, \n  AlertTriangle,\n  TrendingUp,\n  User,\n  GraduationCap,\n  Briefcase,\n  Star\n} from \"lucide-react\";\n\ninterface ResumeAnalysisProps {\n  analysis: {\n    candidate?: any;\n    analysis: {\n      summary: string;\n      skills: string[];\n      experience: number;\n      education: string;\n      strengths: string[];\n      weaknesses: string[];\n      recommendations: string[];\n    };\n    parsedData: {\n      contactInfo: {\n        name?: string;\n        email?: string;\n        phone?: string;\n      };\n      skills: string[];\n      experience: number;\n      metadata: {\n        pages: number;\n      };\n    };\n  };\n}\n\nexport function ResumeAnalysis({ analysis }: ResumeAnalysisProps) {\n  const { analysis: aiAnalysis, parsedData } = analysis;\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n              <Brain className=\"w-4 h-4 text-primary-foreground\" />\n            </div>\n            <div>\n              <CardTitle>AI Resume Analysis</CardTitle>\n              <p className=\"text-sm text-muted-foreground\">\n                Detailed insights and recommendations\n              </p>\n            </div>\n          </div>\n        </CardHeader>\n      </Card>\n\n      {/* Contact Information */}\n      <Card data-testid=\"card-contact-info\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <User className=\"w-5 h-5\" />\n            <span>Contact Information</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div>\n              <p className=\"text-sm text-muted-foreground\">Name</p>\n              <p className=\"font-medium\" data-testid=\"text-parsed-name\">\n                {parsedData.contactInfo.name || \"Not detected\"}\n              </p>\n            </div>\n            <div>\n              <p className=\"text-sm text-muted-foreground\">Email</p>\n              <p className=\"font-medium\" data-testid=\"text-parsed-email\">\n                {parsedData.contactInfo.email || \"Not detected\"}\n              </p>\n            </div>\n            <div>\n              <p className=\"text-sm text-muted-foreground\">Phone</p>\n              <p className=\"font-medium\" data-testid=\"text-parsed-phone\">\n                {parsedData.contactInfo.phone || \"Not detected\"}\n              </p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Summary */}\n      <Card data-testid=\"card-ai-summary\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <FileText className=\"w-5 h-5\" />\n            <span>AI Summary</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <p className=\"text-sm text-foreground leading-relaxed\" data-testid=\"text-ai-summary\">\n            {aiAnalysis.summary}\n          </p>\n        </CardContent>\n      </Card>\n\n      {/* Experience and Education */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        <Card data-testid=\"card-experience\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <Briefcase className=\"w-5 h-5\" />\n              <span>Experience</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"text-3xl font-bold text-primary\" data-testid=\"text-experience-years\">\n                {aiAnalysis.experience}\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Years</p>\n                <p className=\"text-sm text-foreground\">Total Experience</p>\n              </div>\n            </div>\n            {parsedData.experience > 0 && parsedData.experience !== aiAnalysis.experience && (\n              <p className=\"text-xs text-muted-foreground mt-2\">\n                Parsed: {parsedData.experience} years (AI detected: {aiAnalysis.experience} years)\n              </p>\n            )}\n          </CardContent>\n        </Card>\n\n        <Card data-testid=\"card-education\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <GraduationCap className=\"w-5 h-5\" />\n              <span>Education</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-sm text-foreground\" data-testid=\"text-education\">\n              {aiAnalysis.education}\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Skills */}\n      <Card data-testid=\"card-skills\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <Star className=\"w-5 h-5\" />\n            <span>Skills Analysis</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div>\n            <p className=\"text-sm text-muted-foreground mb-2\">AI Detected Skills</p>\n            <div className=\"flex flex-wrap gap-2\">\n              {aiAnalysis.skills.map((skill, index) => (\n                <Badge key={index} variant=\"default\" data-testid={`badge-ai-skill-${index}`}>\n                  {skill}\n                </Badge>\n              ))}\n            </div>\n          </div>\n\n          {parsedData.skills.length > 0 && (\n            <div>\n              <p className=\"text-sm text-muted-foreground mb-2\">Pattern Matched Skills</p>\n              <div className=\"flex flex-wrap gap-2\">\n                {parsedData.skills.map((skill, index) => (\n                  <Badge key={index} variant=\"secondary\" data-testid={`badge-parsed-skill-${index}`}>\n                    {skill}\n                  </Badge>\n                ))}\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Strengths and Weaknesses */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        <Card data-testid=\"card-strengths\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2 text-green-600\">\n              <CheckCircle className=\"w-5 h-5\" />\n              <span>Strengths</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <ul className=\"space-y-2\">\n              {aiAnalysis.strengths.map((strength, index) => (\n                <li key={index} className=\"flex items-start space-x-2\" data-testid={`text-strength-${index}`}>\n                  <CheckCircle className=\"w-4 h-4 text-green-600 mt-0.5 flex-shrink-0\" />\n                  <span className=\"text-sm text-foreground\">{strength}</span>\n                </li>\n              ))}\n            </ul>\n          </CardContent>\n        </Card>\n\n        <Card data-testid=\"card-weaknesses\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2 text-yellow-600\">\n              <AlertTriangle className=\"w-5 h-5\" />\n              <span>Areas for Improvement</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <ul className=\"space-y-2\">\n              {aiAnalysis.weaknesses.map((weakness, index) => (\n                <li key={index} className=\"flex items-start space-x-2\" data-testid={`text-weakness-${index}`}>\n                  <AlertTriangle className=\"w-4 h-4 text-yellow-600 mt-0.5 flex-shrink-0\" />\n                  <span className=\"text-sm text-foreground\">{weakness}</span>\n                </li>\n              ))}\n            </ul>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Recommendations */}\n      <Card data-testid=\"card-recommendations\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2 text-blue-600\">\n            <TrendingUp className=\"w-5 h-5\" />\n            <span>Recommendations</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <ul className=\"space-y-3\">\n            {aiAnalysis.recommendations.map((recommendation, index) => (\n              <li key={index} className=\"flex items-start space-x-2\" data-testid={`text-recommendation-${index}`}>\n                <TrendingUp className=\"w-4 h-4 text-blue-600 mt-0.5 flex-shrink-0\" />\n                <span className=\"text-sm text-foreground\">{recommendation}</span>\n              </li>\n            ))}\n          </ul>\n        </CardContent>\n      </Card>\n\n      {/* Document Info */}\n      <Card data-testid=\"card-document-info\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <FileText className=\"w-5 h-5\" />\n            <span>Document Information</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-2 gap-4 text-sm\">\n            <div>\n              <p className=\"text-muted-foreground\">Pages</p>\n              <p className=\"font-medium\" data-testid=\"text-pages\">\n                {parsedData.metadata.pages}\n              </p>\n            </div>\n            <div>\n              <p className=\"text-muted-foreground\">Processing Status</p>\n              <p className=\"font-medium text-green-600\">Successfully Analyzed</p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":9563},"client/src/components/resume-uploader.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { ObjectUploader } from \"@/components/ObjectUploader\";\nimport { ResumeAnalysis } from \"@/components/resume-analysis\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/api\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  Upload, \n  FileText, \n  CheckCircle, \n  AlertCircle, \n  Brain,\n  Loader2\n} from \"lucide-react\";\nimport type { ResumeAnalysisResult } from \"@/types\";\n\ninterface ResumeUploaderProps {\n  candidateId: string;\n  onAnalysisComplete?: (analysis: ResumeAnalysisResult) => void;\n  onCandidateUpdate?: (candidate: any) => void;\n}\n\nexport function ResumeUploader({ \n  candidateId, \n  onAnalysisComplete, \n  onCandidateUpdate \n}: ResumeUploaderProps) {\n  const [uploadStatus, setUploadStatus] = useState<\"idle\" | \"uploading\" | \"processing\" | \"complete\" | \"error\">(\"idle\");\n  const [uploadProgress, setUploadProgress] = useState(0);\n  const [analysisResult, setAnalysisResult] = useState<ResumeAnalysisResult | null>(null);\n  const [error, setError] = useState<string | null>(null);\n  const { toast } = useToast();\n\n  const processResumeMutation = useMutation({\n    mutationFn: async (file: File) => {\n      const formData = new FormData();\n      formData.append(\"resume\", file);\n      \n      const response = await fetch(`/api/candidates/${candidateId}/resume`, {\n        method: \"POST\",\n        body: formData,\n        credentials: \"include\",\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(errorText || \"Failed to process resume\");\n      }\n\n      return response.json();\n    },\n    onSuccess: (data: ResumeAnalysisResult) => {\n      setAnalysisResult(data);\n      setUploadStatus(\"complete\");\n      onAnalysisComplete?.(data);\n      onCandidateUpdate?.(data.candidate);\n      \n      toast({\n        title: \"Resume processed successfully\",\n        description: \"AI analysis complete. Review the insights below.\",\n      });\n    },\n    onError: (error: Error) => {\n      setUploadStatus(\"error\");\n      setError(error.message);\n      toast({\n        title: \"Resume processing failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleGetUploadParameters = async () => {\n    try {\n      const response = await apiRequest(\"POST\", \"/api/objects/upload\");\n      const data = await response.json();\n      return {\n        method: \"PUT\" as const,\n        url: data.uploadURL,\n      };\n    } catch (error) {\n      throw new Error(\"Failed to get upload URL\");\n    }\n  };\n\n  const handleFileUpload = async (result: any) => {\n    if (result.successful && result.successful.length > 0) {\n      const uploadedFile = result.successful[0];\n      setUploadStatus(\"processing\");\n      setUploadProgress(100);\n      \n      // Create a file object from the uploaded data\n      const file = uploadedFile.data as File;\n      processResumeMutation.mutate(file);\n    }\n  };\n\n  const getStatusIcon = () => {\n    switch (uploadStatus) {\n      case \"uploading\":\n        return <Loader2 className=\"w-5 h-5 animate-spin text-blue-600\" />;\n      case \"processing\":\n        return <Brain className=\"w-5 h-5 text-purple-600\" />;\n      case \"complete\":\n        return <CheckCircle className=\"w-5 h-5 text-green-600\" />;\n      case \"error\":\n        return <AlertCircle className=\"w-5 h-5 text-red-600\" />;\n      default:\n        return <FileText className=\"w-5 h-5 text-muted-foreground\" />;\n    }\n  };\n\n  const getStatusText = () => {\n    switch (uploadStatus) {\n      case \"uploading\":\n        return \"Uploading resume...\";\n      case \"processing\":\n        return \"Processing with AI...\";\n      case \"complete\":\n        return \"Analysis complete\";\n      case \"error\":\n        return \"Upload failed\";\n      default:\n        return \"Ready to upload\";\n    }\n  };\n\n  if (analysisResult) {\n    return (\n      <div className=\"space-y-6\">\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle className=\"flex items-center space-x-2\">\n                <CheckCircle className=\"w-5 h-5 text-green-600\" />\n                <span>Resume Analysis Complete</span>\n              </CardTitle>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => {\n                  setAnalysisResult(null);\n                  setUploadStatus(\"idle\");\n                  setError(null);\n                }}\n                data-testid=\"button-upload-another\"\n              >\n                Upload Another Resume\n              </Button>\n            </div>\n          </CardHeader>\n        </Card>\n        \n        <ResumeAnalysis analysis={analysisResult} />\n      </div>\n    );\n  }\n\n  return (\n    <Card data-testid=\"card-resume-uploader\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center space-x-2\">\n          <FileText className=\"w-5 h-5\" />\n          <span>Resume Upload & Analysis</span>\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-6\">\n        {/* Upload Status */}\n        <div className=\"flex items-center space-x-3\">\n          {getStatusIcon()}\n          <div className=\"flex-1\">\n            <p className=\"text-sm font-medium\" data-testid=\"text-upload-status\">\n              {getStatusText()}\n            </p>\n            {(uploadStatus === \"uploading\" || uploadStatus === \"processing\") && (\n              <Progress value={uploadProgress} className=\"mt-2\" />\n            )}\n          </div>\n        </div>\n\n        {/* Error Message */}\n        {error && (\n          <div className=\"p-4 bg-destructive/10 border border-destructive/20 rounded-lg\">\n            <div className=\"flex items-center space-x-2\">\n              <AlertCircle className=\"w-4 h-4 text-destructive\" />\n              <p className=\"text-sm text-destructive\" data-testid=\"text-error\">\n                {error}\n              </p>\n            </div>\n          </div>\n        )}\n\n        {/* Upload Instructions */}\n        {uploadStatus === \"idle\" && (\n          <div className=\"text-center space-y-4\">\n            <div className=\"p-8 border-2 border-dashed border-border rounded-lg\">\n              <Upload className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n              <h3 className=\"text-lg font-medium text-foreground mb-2\">\n                Upload Resume for AI Analysis\n              </h3>\n              <p className=\"text-sm text-muted-foreground mb-4\">\n                Support for PDF and text files. Maximum file size: 10MB\n              </p>\n              \n              <ObjectUploader\n                maxNumberOfFiles={1}\n                maxFileSize={10 * 1024 * 1024} // 10MB\n                onGetUploadParameters={handleGetUploadParameters}\n                onComplete={handleFileUpload}\n                buttonClassName=\"bg-primary text-primary-foreground hover:bg-primary/90\"\n                data-testid=\"button-upload-resume\"\n              >\n                <Upload className=\"w-4 h-4 mr-2\" />\n                Choose Resume File\n              </ObjectUploader>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-sm\">\n              <div className=\"text-center\">\n                <Brain className=\"w-8 h-8 text-primary mx-auto mb-2\" />\n                <h4 className=\"font-medium\">AI Analysis</h4>\n                <p className=\"text-muted-foreground\">\n                  Extract skills, experience, and insights\n                </p>\n              </div>\n              <div className=\"text-center\">\n                <CheckCircle className=\"w-8 h-8 text-green-600 mx-auto mb-2\" />\n                <h4 className=\"font-medium\">Auto-Population</h4>\n                <p className=\"text-muted-foreground\">\n                  Automatically fill candidate profile\n                </p>\n              </div>\n              <div className=\"text-center\">\n                <FileText className=\"w-8 h-8 text-blue-600 mx-auto mb-2\" />\n                <h4 className=\"font-medium\">Smart Matching</h4>\n                <p className=\"text-muted-foreground\">\n                  Match to relevant job positions\n                </p>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Processing Status */}\n        {(uploadStatus === \"uploading\" || uploadStatus === \"processing\") && (\n          <div className=\"text-center space-y-4\">\n            <div className=\"p-8 bg-accent rounded-lg\">\n              {uploadStatus === \"uploading\" ? (\n                <>\n                  <Upload className=\"w-12 h-12 text-blue-600 mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-medium text-foreground mb-2\">\n                    Uploading Resume\n                  </h3>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Secure upload in progress...\n                  </p>\n                </>\n              ) : (\n                <>\n                  <Brain className=\"w-12 h-12 text-purple-600 mx-auto mb-4 animate-pulse\" />\n                  <h3 className=\"text-lg font-medium text-foreground mb-2\">\n                    AI Analysis in Progress\n                  </h3>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Extracting skills, experience, and generating insights...\n                  </p>\n                </>\n              )}\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":9639},"client/src/hooks/use-candidates.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { type Candidate } from \"@shared/schema\";\n\nexport function useCandidates(searchQuery?: string) {\n  return useQuery<Candidate[]>({\n    queryKey: [\"/api/candidates\", { search: searchQuery }],\n    queryFn: async ({ queryKey }) => {\n      const [url, params] = queryKey as [string, { search?: string }];\n      const searchParams = new URLSearchParams();\n      \n      if (params.search) {\n        searchParams.append(\"search\", params.search);\n      }\n      \n      const fullUrl = searchParams.toString() ? `${url}?${searchParams}` : url;\n      const response = await fetch(fullUrl, { credentials: \"include\" });\n      \n      if (!response.ok) {\n        throw new Error(`${response.status}: ${response.statusText}`);\n      }\n      \n      return response.json();\n    },\n  });\n}\n\nexport function useCandidate(id: string) {\n  return useQuery<Candidate>({\n    queryKey: [\"/api/candidates\", id],\n    enabled: !!id,\n  });\n}\n","size_bytes":968},"client/src/hooks/use-interviews.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { type Interview } from \"@shared/schema\";\n\nexport function useInterviews() {\n  return useQuery<Interview[]>({\n    queryKey: [\"/api/interviews\"],\n  });\n}\n\nexport function useInterview(id: string) {\n  return useQuery<Interview>({\n    queryKey: [\"/api/interviews\", id],\n    enabled: !!id,\n  });\n}\n\nexport function useInterviewsByCandidate(candidateId: string) {\n  return useQuery<Interview[]>({\n    queryKey: [\"/api/interviews\", \"candidate\", candidateId],\n    queryFn: async () => {\n      const response = await fetch(`/api/interviews?candidateId=${candidateId}`, {\n        credentials: \"include\",\n      });\n      \n      if (!response.ok) {\n        throw new Error(`${response.status}: ${response.statusText}`);\n      }\n      \n      return response.json();\n    },\n    enabled: !!candidateId,\n  });\n}\n","size_bytes":854},"client/src/hooks/use-jobs.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { type Job } from \"@shared/schema\";\n\nexport function useJobs() {\n  return useQuery<Job[]>({\n    queryKey: [\"/api/jobs\"],\n  });\n}\n\nexport function useJob(id: string) {\n  return useQuery<Job>({\n    queryKey: [\"/api/jobs\", id],\n    enabled: !!id,\n  });\n}\n","size_bytes":309},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-prompt-templates.ts":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { apiRequest } from \"@/lib/api\";\n\ninterface PromptTemplate {\n  id: string;\n  name: string;\n  description: string;\n  category: \"resume_analysis\" | \"job_matching\" | \"interview_questions\" | \"candidate_screening\" | \"general\";\n  template: string;\n  variables: string[];\n  isActive: boolean;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport function usePromptTemplates() {\n  return useQuery<PromptTemplate[]>({\n    queryKey: [\"/api/prompt-templates\"],\n  });\n}\n\nexport function usePromptTemplate(id: string) {\n  return useQuery<PromptTemplate>({\n    queryKey: [\"/api/prompt-templates\", id],\n    enabled: !!id,\n  });\n}\n\nexport function usePromptTemplatesByCategory(category: string) {\n  return useQuery<PromptTemplate[]>({\n    queryKey: [\"/api/prompt-templates\", \"category\", category],\n    queryFn: async () => {\n      const response = await fetch(`/api/prompt-templates?category=${category}`, {\n        credentials: \"include\",\n      });\n      \n      if (!response.ok) {\n        throw new Error(`${response.status}: ${response.statusText}`);\n      }\n      \n      return response.json();\n    },\n    enabled: !!category,\n  });\n}\n\nexport function useCreatePromptTemplate() {\n  return useMutation({\n    mutationFn: async (template: Omit<PromptTemplate, \"id\" | \"createdAt\" | \"updatedAt\">) => {\n      const response = await apiRequest(\"POST\", \"/api/prompt-templates\", template);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/prompt-templates\"] });\n    },\n  });\n}\n\nexport function useUpdatePromptTemplate() {\n  return useMutation({\n    mutationFn: async ({ id, ...template }: Partial<PromptTemplate> & { id: string }) => {\n      const response = await apiRequest(\"PUT\", `/api/prompt-templates/${id}`, template);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/prompt-templates\"] });\n    },\n  });\n}\n\nexport function useDeletePromptTemplate() {\n  return useMutation({\n    mutationFn: async (id: string) => {\n      await apiRequest(\"DELETE\", `/api/prompt-templates/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/prompt-templates\"] });\n    },\n  });\n}\n","size_bytes":2337},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/api.ts":{"content":"export async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n\n  return res;\n}\n","size_bytes":456},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/ai-assistant.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Sidebar } from \"@/components/ui/sidebar\";\nimport { AiChat } from \"@/components/ai-chat\";\nimport { useLanguage } from \"@/contexts/language-context\";\nimport { \n  Bot, \n  MessageCircle, \n  Lightbulb, \n  FileText, \n  Users, \n  Briefcase,\n  BarChart3\n} from \"lucide-react\";\n\nconst useQuickActions = () => {\n  const { t } = useLanguage();\n  return [\n    {\n      title: t('assistant.analyzeResume'),\n      description: t('assistant.analyzeResumeDesc'),\n      icon: FileText,\n      action: \"analyze-resume\",\n    },\n    {\n      title: t('assistant.matchCandidates'),\n      description: t('assistant.matchCandidatesDesc'),\n      icon: Users,\n      action: \"match-candidates\",\n    },\n    {\n      title: t('assistant.generateQuestions'),\n      description: t('assistant.generateQuestionsDesc'),\n      icon: MessageCircle,\n      action: \"generate-questions\",\n    },\n    {\n      title: t('assistant.jobDescription'),\n      description: t('assistant.jobDescriptionDesc'),\n      icon: Briefcase,\n      action: \"optimize-job\",\n    },\n    {\n      title: t('assistant.recruitmentInsights'),\n      description: t('assistant.recruitmentInsightsDesc'),\n      icon: BarChart3,\n      action: \"insights\",\n    },\n    {\n      title: t('assistant.bestPractices'),\n      description: t('assistant.bestPracticesDesc'),\n      icon: Lightbulb,\n      action: \"best-practices\",\n    },\n  ];\n};\n\nexport default function AIAssistant() {\n  const { t } = useLanguage();\n  const quickActions = useQuickActions();\n  const [selectedAction, setSelectedAction] = useState<string | null>(null);\n  const [chatStarted, setChatStarted] = useState(false);\n\n  const handleQuickAction = (action: string) => {\n    setSelectedAction(action);\n    setChatStarted(true);\n  };\n\n  const getActionPrompt = (action: string) => {\n    switch (action) {\n      case \"analyze-resume\":\n        return t('assistant.initialPromptAnalyze');\n      case \"match-candidates\":\n        return t('assistant.initialPromptMatch');\n      case \"generate-questions\":\n        return t('assistant.initialPromptQuestions');\n      case \"optimize-job\":\n        return t('assistant.initialPromptOptimize');\n      case \"insights\":\n        return t('assistant.initialPromptInsights');\n      case \"best-practices\":\n        return t('assistant.initialPromptPractices');\n      default:\n        return t('assistant.welcomeMessage');\n    }\n  };\n\n  return (\n    <div className=\"flex h-screen overflow-hidden bg-background\">\n      <Sidebar />\n      \n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        {/* Header */}\n        <header className=\"bg-card border-b border-border px-6 py-4\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n              <Bot className=\"text-primary-foreground w-4 h-4\" />\n            </div>\n            <div>\n              <h1 className=\"text-2xl font-semibold text-foreground\">{t('assistant.pageTitle')}</h1>\n              <p className=\"text-sm text-muted-foreground\">\n                {t('assistant.pageSubtitle')}\n              </p>\n            </div>\n          </div>\n        </header>\n\n        {/* Main Content */}\n        <main className=\"flex-1 overflow-hidden\">\n          {!chatStarted ? (\n            <div className=\"h-full p-6 overflow-y-auto\">\n              {/* Welcome Section */}\n              <Card className=\"mb-8\" data-testid=\"card-welcome\">\n                <CardContent className=\"p-8 text-center\">\n                  <div className=\"w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mx-auto mb-4\">\n                    <Bot className=\"w-8 h-8 text-primary\" />\n                  </div>\n                  <h2 className=\"text-2xl font-bold text-foreground mb-2\">\n                    {t('assistant.pageTitle')}\n                  </h2>\n                  <p className=\"text-muted-foreground max-w-2xl mx-auto\">\n                    {t('assistant.welcomeMessage')}\n                  </p>\n                </CardContent>\n              </Card>\n\n              {/* Quick Actions */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8\">\n                {quickActions.map((action) => (\n                  <Card \n                    key={action.action}\n                    className=\"cursor-pointer hover:shadow-md transition-shadow\"\n                    onClick={() => handleQuickAction(action.action)}\n                    data-testid={`card-action-${action.action}`}\n                  >\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-start space-x-4\">\n                        <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center flex-shrink-0\">\n                          <action.icon className=\"w-6 h-6 text-primary\" />\n                        </div>\n                        <div className=\"flex-1\">\n                          <h3 className=\"font-semibold text-foreground mb-1\">\n                            {action.title}\n                          </h3>\n                          <p className=\"text-sm text-muted-foreground\">\n                            {action.description}\n                          </p>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n\n              {/* Recent Conversations */}\n              <Card data-testid=\"card-recent-conversations\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <MessageCircle className=\"w-5 h-5\" />\n                    <span>{t('assistant.history')}</span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    <div className=\"p-3 bg-accent rounded-lg cursor-pointer hover:bg-accent/80 transition-colors\">\n                      <p className=\"text-sm font-medium text-accent-foreground\">\n                        {t('assistant.generateQuestions')} - Senior Developer\n                      </p>\n                      <p className=\"text-xs text-muted-foreground\">2 {t('dashboard.last30Days')}</p>\n                    </div>\n                    <div className=\"p-3 bg-accent rounded-lg cursor-pointer hover:bg-accent/80 transition-colors\">\n                      <p className=\"text-sm font-medium text-accent-foreground\">\n                        {t('assistant.matchCandidates')} - Product Manager\n                      </p>\n                      <p className=\"text-xs text-muted-foreground\">{t('dashboard.last30Days')}</p>\n                    </div>\n                    <div className=\"p-3 bg-accent rounded-lg cursor-pointer hover:bg-accent/80 transition-colors\">\n                      <p className=\"text-sm font-medium text-accent-foreground\">\n                        {t('assistant.analyzeResume')} - {t('assistant.bestPractices')}\n                      </p>\n                      <p className=\"text-xs text-muted-foreground\">3 {t('dashboard.last30Days')}</p>\n                    </div>\n                  </div>\n                  <Button \n                    variant=\"ghost\" \n                    className=\"w-full mt-4\"\n                    data-testid=\"button-view-all-conversations\"\n                  >\n                    {t('assistant.history')}\n                  </Button>\n                </CardContent>\n              </Card>\n\n              {/* Start New Chat */}\n              <div className=\"mt-8 text-center\">\n                <Button \n                  onClick={() => setChatStarted(true)}\n                  size=\"lg\"\n                  data-testid=\"button-start-new-chat\"\n                >\n                  <MessageCircle className=\"w-4 h-4 mr-2\" />\n                  {t('assistant.send')}\n                </Button>\n              </div>\n            </div>\n          ) : (\n            <AiChat \n              initialMessage={selectedAction ? getActionPrompt(selectedAction) : \"\"}\n              onBack={() => {\n                setChatStarted(false);\n                setSelectedAction(null);\n              }}\n            />\n          )}\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":8380},"client/src/pages/candidates.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Sidebar } from \"@/components/ui/sidebar\";\nimport { CandidateCard } from \"@/components/candidate-card\";\nimport { ResumeUploader } from \"@/components/resume-uploader\";\nimport { useCandidates } from \"@/hooks/use-candidates\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { apiRequest } from \"@/lib/api\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLanguage } from \"@/contexts/language-context\";\nimport { \n  Search, \n  Filter, \n  Plus, \n  Users,\n  Download,\n  Upload,\n  Brain,\n  X\n} from \"lucide-react\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport type { ResumeAnalysisResult } from \"@/types\";\n\nexport default function Candidates() {\n  const { t } = useLanguage();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [sourceFilter, setSourceFilter] = useState(\"all\");\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [selectedCandidateForResume, setSelectedCandidateForResume] = useState<string | null>(null);\n  const { toast } = useToast();\n  \n  const { \n    data: candidates, \n    isLoading, \n    error \n  } = useCandidates(searchQuery);\n\n  const createCandidateMutation = useMutation({\n    mutationFn: async (candidateData: any) => {\n      const response = await apiRequest(\"POST\", \"/api/candidates\", candidateData);\n      return response.json();\n    },\n    onSuccess: (newCandidate) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/candidates\"] });\n      setIsCreateDialogOpen(false);\n      setSelectedCandidateForResume(newCandidate.id);\n      toast({\n        title: t('candidates.candidateCreated'),\n        description: t('candidates.candidateCreatedDesc'),\n      });\n    },\n    onError: () => {\n      toast({\n        title: t('error.generic'),\n        description: t('candidates.createCandidateError'),\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const filteredCandidates = candidates?.filter(candidate => {\n    const matchesStatus = statusFilter === \"all\" || candidate.status === statusFilter;\n    const matchesSource = sourceFilter === \"all\" || candidate.source === sourceFilter;\n    return matchesStatus && matchesSource;\n  }) || [];\n\n  const candidateStats = {\n    total: candidates?.length || 0,\n    applied: candidates?.filter(c => c.status === \"applied\").length || 0,\n    screening: candidates?.filter(c => c.status === \"screening\").length || 0,\n    interview: candidates?.filter(c => c.status === \"interview\").length || 0,\n    hired: candidates?.filter(c => c.status === \"hired\").length || 0,\n  };\n\n  const handleCreateCandidate = (formData: any) => {\n    createCandidateMutation.mutate({\n      name: formData.name,\n      email: formData.email,\n      phone: formData.phone || null,\n      position: formData.position || null,\n      location: formData.location || null,\n      source: formData.source || \"manual\",\n      status: \"applied\",\n    });\n  };\n\n  const handleResumeAnalysisComplete = (analysis: ResumeAnalysisResult) => {\n    queryClient.invalidateQueries({ queryKey: [\"/api/candidates\"] });\n    setSelectedCandidateForResume(null);\n    toast({\n      title: t('candidates.resumeAnalysisComplete'),\n      description: t('candidates.resumeAnalysisCompleteDesc'),\n    });\n  };\n\n  if (error) {\n    return (\n      <div className=\"flex h-screen\">\n        <Sidebar />\n        <div className=\"flex-1 flex items-center justify-center\">\n          <div className=\"text-center\">\n            <p className=\"text-destructive\">{t('candidates.failedToLoad')}</p>\n            <Button onClick={() => window.location.reload()} className=\"mt-2\">\n              {t('jobs.retry')}\n            </Button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (selectedCandidateForResume) {\n    return (\n      <div className=\"flex h-screen overflow-hidden bg-background\">\n        <Sidebar />\n        \n        <div className=\"flex-1 flex flex-col overflow-hidden\">\n          <header className=\"bg-card border-b border-border px-6 py-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h1 className=\"text-2xl font-semibold text-foreground\">{t('candidates.resumeUpload')}</h1>\n                <p className=\"text-sm text-muted-foreground\">\n                  {t('candidates.resumeUploadDesc')}\n                </p>\n              </div>\n              <Button\n                variant=\"outline\"\n                onClick={() => setSelectedCandidateForResume(null)}\n                data-testid=\"button-back-to-candidates\"\n              >\n                <X className=\"w-4 h-4 mr-2\" />\n                {t('candidates.backToCandidates')}\n              </Button>\n            </div>\n          </header>\n\n          <main className=\"flex-1 overflow-y-auto p-6\">\n            <ResumeUploader\n              candidateId={selectedCandidateForResume}\n              onAnalysisComplete={handleResumeAnalysisComplete}\n              onCandidateUpdate={(candidate) => {\n                queryClient.invalidateQueries({ queryKey: [\"/api/candidates\"] });\n              }}\n            />\n          </main>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex h-screen overflow-hidden bg-background\">\n      <Sidebar />\n      \n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        {/* Header */}\n        <header className=\"bg-card border-b border-border px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-2xl font-semibold text-foreground\">{t('candidates.pageTitle')}</h1>\n              <p className=\"text-sm text-muted-foreground\">\n                {t('candidates.pageSubtitle')}\n              </p>\n            </div>\n            \n            <div className=\"flex items-center space-x-3\">\n              <Button variant=\"outline\" data-testid=\"button-import-candidates\">\n                <Upload className=\"w-4 h-4 mr-2\" />\n                {t('candidates.importCandidates')}\n              </Button>\n              <Button variant=\"outline\" data-testid=\"button-export-candidates\">\n                <Download className=\"w-4 h-4 mr-2\" />\n                {t('candidates.exportCandidates')}\n              </Button>\n              <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n                <DialogTrigger asChild>\n                  <Button data-testid=\"button-add-candidate\">\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    {t('candidates.addCandidate')}\n                  </Button>\n                </DialogTrigger>\n                <DialogContent>\n                  <DialogHeader>\n                    <DialogTitle>{t('candidates.addNewCandidate')}</DialogTitle>\n                  </DialogHeader>\n                  <CandidateForm \n                    onSubmit={handleCreateCandidate}\n                    isLoading={createCandidateMutation.isPending}\n                  />\n                </DialogContent>\n              </Dialog>\n            </div>\n          </div>\n        </header>\n\n        {/* Filters and Stats */}\n        <div className=\"bg-card border-b border-border px-6 py-4\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n                <Input\n                  placeholder={t('candidates.searchPlaceholder')}\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-10 w-64\"\n                  data-testid=\"input-search-candidates\"\n                />\n              </div>\n              \n              <Select value={statusFilter} onValueChange={setStatusFilter}>\n                <SelectTrigger className=\"w-40\" data-testid=\"select-status-filter\">\n                  <SelectValue placeholder={t('jobs.allStatuses')} />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">{t('jobs.allStatuses')}</SelectItem>\n                  <SelectItem value=\"applied\">{t('candidates.applied')}</SelectItem>\n                  <SelectItem value=\"screening\">{t('candidates.screening')}</SelectItem>\n                  <SelectItem value=\"interview\">{t('candidates.interview')}</SelectItem>\n                  <SelectItem value=\"offer\">Offer</SelectItem>\n                  <SelectItem value=\"hired\">{t('candidates.hired')}</SelectItem>\n                  <SelectItem value=\"rejected\">Rejected</SelectItem>\n                </SelectContent>\n              </Select>\n\n              <Select value={sourceFilter} onValueChange={setSourceFilter}>\n                <SelectTrigger className=\"w-40\" data-testid=\"select-source-filter\">\n                  <SelectValue placeholder={t('candidates.allSources')} />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">{t('candidates.allSources')}</SelectItem>\n                  <SelectItem value=\"manual\">{t('candidates.manual')}</SelectItem>\n                  <SelectItem value=\"linkedin\">{t('candidates.linkedin')}</SelectItem>\n                  <SelectItem value=\"job_board\">{t('candidates.jobBoard')}</SelectItem>\n                  <SelectItem value=\"referral\">{t('candidates.referral')}</SelectItem>\n                </SelectContent>\n              </Select>\n\n              <Button variant=\"outline\" size=\"sm\" data-testid=\"button-advanced-filters\">\n                <Filter className=\"w-4 h-4 mr-2\" />\n                {t('jobs.moreFilters')}\n              </Button>\n            </div>\n\n            <div className=\"text-sm text-muted-foreground\" data-testid=\"text-candidate-count\">\n              {t('candidates.candidateCount', { filtered: filteredCandidates.length.toString(), total: candidateStats.total.toString() })}\n            </div>\n          </div>\n\n          {/* Quick Stats */}\n          <div className=\"flex items-center space-x-6\">\n            <div className=\"flex items-center space-x-2\">\n              <Badge variant=\"secondary\" data-testid=\"badge-applied\">\n                {t('candidates.applied')}: {candidateStats.applied}\n              </Badge>\n              <Badge variant=\"secondary\" data-testid=\"badge-screening\">\n                {t('candidates.screening')}: {candidateStats.screening}\n              </Badge>\n              <Badge variant=\"secondary\" data-testid=\"badge-interview\">\n                {t('candidates.interview')}: {candidateStats.interview}\n              </Badge>\n              <Badge variant=\"secondary\" data-testid=\"badge-hired\">\n                {t('candidates.hired')}: {candidateStats.hired}\n              </Badge>\n            </div>\n          </div>\n        </div>\n\n        {/* Main Content */}\n        <main className=\"flex-1 overflow-y-auto p-6\">\n          {isLoading ? (\n            <div className=\"flex items-center justify-center h-64\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n            </div>\n          ) : filteredCandidates.length > 0 ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {filteredCandidates.map((candidate) => (\n                <CandidateCard \n                  key={candidate.id} \n                  candidate={candidate}\n                  onUploadResume={() => setSelectedCandidateForResume(candidate.id)}\n                  data-testid={`card-candidate-${candidate.id}`}\n                />\n              ))}\n            </div>\n          ) : (\n            <Card className=\"h-64\">\n              <CardContent className=\"flex flex-col items-center justify-center h-full text-center\">\n                <Users className=\"w-12 h-12 text-muted-foreground mb-4\" />\n                <h3 className=\"text-lg font-medium text-foreground mb-2\">\n                  {searchQuery || statusFilter !== \"all\" || sourceFilter !== \"all\" ? t('candidates.noCandidatesFound') : t('candidates.noCandidatesYet')}\n                </h3>\n                <p className=\"text-sm text-muted-foreground mb-4\">\n                  {searchQuery || statusFilter !== \"all\" || sourceFilter !== \"all\"\n                    ? t('jobs.adjustFilters') \n                    : t('candidates.getStartedCandidate')\n                  }\n                </p>\n                {!searchQuery && statusFilter === \"all\" && sourceFilter === \"all\" && (\n                  <Button onClick={() => setIsCreateDialogOpen(true)} data-testid=\"button-add-first-candidate\">\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    {t('candidates.addFirstCandidate')}\n                  </Button>\n                )}\n              </CardContent>\n            </Card>\n          )}\n        </main>\n      </div>\n    </div>\n  );\n}\n\ninterface CandidateFormProps {\n  onSubmit: (data: any) => void;\n  isLoading: boolean;\n}\n\nfunction CandidateForm({ onSubmit, isLoading }: CandidateFormProps) {\n  const { t } = useLanguage();\n  const [formData, setFormData] = useState({\n    name: \"\",\n    email: \"\",\n    phone: \"\",\n    position: \"\",\n    location: \"\",\n    source: \"manual\",\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    onSubmit(formData);\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-4\">\n      <div className=\"grid grid-cols-2 gap-4\">\n        <div>\n          <label className=\"text-sm font-medium\">{t('candidates.formName')}</label>\n          <Input\n            value={formData.name}\n            onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n            required\n            data-testid=\"input-candidate-name\"\n          />\n        </div>\n        <div>\n          <label className=\"text-sm font-medium\">{t('candidates.formEmail')}</label>\n          <Input\n            type=\"email\"\n            value={formData.email}\n            onChange={(e) => setFormData({ ...formData, email: e.target.value })}\n            required\n            data-testid=\"input-candidate-email\"\n          />\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-2 gap-4\">\n        <div>\n          <label className=\"text-sm font-medium\">{t('candidates.formPhone')}</label>\n          <Input\n            value={formData.phone}\n            onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\n            data-testid=\"input-candidate-phone\"\n          />\n        </div>\n        <div>\n          <label className=\"text-sm font-medium\">{t('candidates.formPosition')}</label>\n          <Input\n            value={formData.position}\n            onChange={(e) => setFormData({ ...formData, position: e.target.value })}\n            data-testid=\"input-candidate-position\"\n          />\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-2 gap-4\">\n        <div>\n          <label className=\"text-sm font-medium\">{t('candidates.formLocation')}</label>\n          <Input\n            value={formData.location}\n            onChange={(e) => setFormData({ ...formData, location: e.target.value })}\n            data-testid=\"input-candidate-location\"\n          />\n        </div>\n        <div>\n          <label className=\"text-sm font-medium\">{t('candidates.formSource')}</label>\n          <Select value={formData.source} onValueChange={(value) => setFormData({ ...formData, source: value })}>\n            <SelectTrigger data-testid=\"select-candidate-source\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"manual\">{t('candidates.manual')}</SelectItem>\n              <SelectItem value=\"linkedin\">{t('candidates.linkedin')}</SelectItem>\n              <SelectItem value=\"job_board\">{t('candidates.jobBoard')}</SelectItem>\n              <SelectItem value=\"referral\">{t('candidates.referral')}</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n      </div>\n\n      <div className=\"flex justify-end space-x-2\">\n        <Button type=\"submit\" disabled={isLoading} data-testid=\"button-create-candidate\">\n          {isLoading ? t('candidates.creating') : t('candidates.createCandidate')}\n        </Button>\n      </div>\n    </form>\n  );\n}\n","size_bytes":16687},"client/src/pages/dashboard.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Sidebar } from \"@/components/ui/sidebar\";\nimport { TeamActivity } from \"@/components/team-activity\";\nimport { NotificationPanel } from \"@/components/notification-panel\";\nimport { OnlineUsers } from \"@/components/online-users\";\nimport { LanguageToggle } from \"@/components/language-toggle\";\nimport { useLanguage } from \"@/contexts/language-context\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { \n  Users, \n  Briefcase, \n  Calendar, \n  TrendingUp, \n  ArrowUp, \n  ArrowDown,\n  Bot,\n  Search,\n  Bell,\n  Plus,\n  Lightbulb,\n  BarChart3,\n  AlertTriangle\n} from \"lucide-react\";\nimport { Input } from \"@/components/ui/input\";\nimport { useState } from \"react\";\n\ninterface DashboardMetrics {\n  totalCandidates: number;\n  activeJobs: number;\n  upcomingInterviews: number;\n  interviewRate: number;\n  hireRate: number;\n  funnel: {\n    applied: number;\n    screening: number;\n    interview: number;\n    hired: number;\n  };\n}\n\nexport default function Dashboard() {\n  const [showAIModal, setShowAIModal] = useState(false);\n  const { t } = useLanguage();\n\n  const { data: metrics, isLoading } = useQuery<DashboardMetrics>({\n    queryKey: [\"/api/dashboard/metrics\"],\n  });\n\n  const { data: candidates } = useQuery<any[]>({\n    queryKey: [\"/api/candidates\"],\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"flex h-screen\">\n        <Sidebar />\n        <div className=\"flex-1 flex items-center justify-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  const topCandidates = candidates?.slice(0, 3) || [];\n\n  return (\n    <div className=\"flex h-screen overflow-hidden bg-background\">\n      <Sidebar />\n      \n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        {/* Header */}\n        <header className=\"bg-card border-b border-border px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-2xl font-semibold text-foreground\">{t('nav.dashboard')}</h1>\n              <p className=\"text-sm text-muted-foreground\">{t('dashboard.welcomeMessage')}</p>\n            </div>\n            \n            <div className=\"flex items-center space-x-4\">\n              <div className=\"relative\">\n                <Input \n                  placeholder={t('common.search') + \"...\"} \n                  className=\"w-64 pl-10\"\n                  data-testid=\"search-input\"\n                />\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n              </div>\n              \n              <Button data-testid=\"button-add-candidate\">\n                <Plus className=\"w-4 h-4 mr-2\" />\n                {t('candidates.addNew')}\n              </Button>\n              \n              <LanguageToggle />\n              \n              <NotificationPanel />\n            </div>\n          </div>\n        </header>\n\n        {/* Main Content */}\n        <main className=\"flex-1 overflow-y-auto p-6\">\n          {/* KPI Cards */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n            <Card data-testid=\"card-total-candidates\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">{t('dashboard.totalCandidates')}</p>\n                    <p className=\"text-3xl font-bold text-foreground\" data-testid=\"text-total-candidates\">\n                      {metrics?.totalCandidates || 0}\n                    </p>\n                    <p className=\"text-sm text-chart-2 flex items-center\">\n                      <ArrowUp className=\"w-4 h-4 mr-1\" />\n                      12% {t('dashboard.fromLastMonth')}\n                    </p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center\">\n                    <Users className=\"text-primary w-6 h-6\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card data-testid=\"card-active-jobs\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">{t('dashboard.activeJobs')}</p>\n                    <p className=\"text-3xl font-bold text-foreground\" data-testid=\"text-active-jobs\">\n                      {metrics?.activeJobs || 0}\n                    </p>\n                    <p className=\"text-sm text-chart-3 flex items-center\">\n                      <ArrowUp className=\"w-4 h-4 mr-1\" />\n                      3 {t('dashboard.newThisWeek')}\n                    </p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-chart-2/10 rounded-lg flex items-center justify-center\">\n                    <Briefcase className=\"text-chart-2 w-6 h-6\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card data-testid=\"card-interview-rate\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">{t('dashboard.interviewRate')}</p>\n                    <p className=\"text-3xl font-bold text-foreground\" data-testid=\"text-interview-rate\">\n                      {metrics?.interviewRate || 0}%\n                    </p>\n                    <p className=\"text-sm text-chart-2 flex items-center\">\n                      <ArrowUp className=\"w-4 h-4 mr-1\" />\n                      5% {t('dashboard.improvement')}\n                    </p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-chart-3/10 rounded-lg flex items-center justify-center\">\n                    <Calendar className=\"text-chart-3 w-6 h-6\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card data-testid=\"card-hire-rate\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">{t('dashboard.hireRate')}</p>\n                    <p className=\"text-3xl font-bold text-foreground\" data-testid=\"text-hire-rate\">\n                      {metrics?.hireRate || 0}%\n                    </p>\n                    <p className=\"text-sm text-destructive flex items-center\">\n                      <ArrowDown className=\"w-4 h-4 mr-1\" />\n                      2% {t('dashboard.fromTarget')}\n                    </p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-chart-4/10 rounded-lg flex items-center justify-center\">\n                    <TrendingUp className=\"text-chart-4 w-6 h-6\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Main Content Grid */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n            {/* Recruitment Funnel */}\n            <Card className=\"lg:col-span-2\" data-testid=\"card-recruitment-funnel\">\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle>{t('dashboard.recruitmentFunnel')}</CardTitle>\n                  <select className=\"border border-border rounded-md px-3 py-1 text-sm bg-background\">\n                    <option>{t('dashboard.last30Days')}</option>\n                    <option>{t('dashboard.last90Days')}</option>\n                    <option>{t('dashboard.thisYear')}</option>\n                  </select>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between p-4 bg-background rounded-lg\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"w-4 h-4 bg-chart-1 rounded\"></div>\n                      <span className=\"text-sm font-medium\">{t('funnel.applicationsReceived')}</span>\n                    </div>\n                    <div className=\"text-right\">\n                      <p className=\"text-lg font-semibold\" data-testid=\"text-applications\">\n                        {metrics?.totalCandidates || 0}\n                      </p>\n                      <Progress value={100} className=\"w-32 h-2\" />\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-center justify-between p-4 bg-background rounded-lg\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"w-4 h-4 bg-chart-2 rounded\"></div>\n                      <span className=\"text-sm font-medium\">{t('funnel.screeningPassed')}</span>\n                    </div>\n                    <div className=\"text-right\">\n                      <p className=\"text-lg font-semibold\" data-testid=\"text-screening\">\n                        {metrics?.funnel?.screening || 0}\n                      </p>\n                      <Progress value={34} className=\"w-32 h-2\" />\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-center justify-between p-4 bg-background rounded-lg\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"w-4 h-4 bg-chart-3 rounded\"></div>\n                      <span className=\"text-sm font-medium\">{t('funnel.interviewsScheduled')}</span>\n                    </div>\n                    <div className=\"text-right\">\n                      <p className=\"text-lg font-semibold\" data-testid=\"text-interviews-scheduled\">\n                        {metrics?.funnel?.interview || 0}\n                      </p>\n                      <Progress value={15} className=\"w-32 h-2\" />\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-center justify-between p-4 bg-background rounded-lg\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"w-4 h-4 bg-chart-5 rounded\"></div>\n                      <span className=\"text-sm font-medium\">{t('funnel.hired')}</span>\n                    </div>\n                    <div className=\"text-right\">\n                      <p className=\"text-lg font-semibold\" data-testid=\"text-hired\">\n                        {metrics?.funnel?.hired || 0}\n                      </p>\n                      <Progress value={3} className=\"w-32 h-2\" />\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Right Sidebar */}\n            <div className=\"space-y-6\">\n              {/* AI Assistant Quick Access */}\n              <Card data-testid=\"card-ai-insights\">\n                <CardHeader>\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n                      <Bot className=\"text-primary-foreground w-4 h-4\" />\n                    </div>\n                    <CardTitle>{t('dashboard.aiInsights')}</CardTitle>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    <div className=\"p-3 bg-accent rounded-lg\">\n                      <p className=\"text-sm text-accent-foreground flex items-start\">\n                        <Lightbulb className=\"text-chart-3 w-4 h-4 mr-2 mt-0.5 flex-shrink-0\" />\n                        23 {t('insights.candidateMatch')}\n                      </p>\n                    </div>\n                    \n                    <div className=\"p-3 bg-accent rounded-lg\">\n                      <p className=\"text-sm text-accent-foreground flex items-start\">\n                        <BarChart3 className=\"text-chart-2 w-4 h-4 mr-2 mt-0.5 flex-shrink-0\" />\n                        {t('insights.interviewRate')}\n                      </p>\n                    </div>\n                    \n                    <div className=\"p-3 bg-accent rounded-lg\">\n                      <p className=\"text-sm text-accent-foreground flex items-start\">\n                        <AlertTriangle className=\"text-chart-5 w-4 h-4 mr-2 mt-0.5 flex-shrink-0\" />\n                        3 {t('insights.urgentCandidates')}\n                      </p>\n                    </div>\n                  </div>\n                  \n                  <Button \n                    className=\"w-full mt-4\" \n                    onClick={() => setShowAIModal(true)}\n                    data-testid=\"button-open-ai-assistant\"\n                  >\n                    {t('dashboard.openAiAssistant')}\n                  </Button>\n                </CardContent>\n              </Card>\n\n              {/* Team Activity */}\n              <TeamActivity />\n              \n              {/* Online Users */}\n              <OnlineUsers />\n            </div>\n          </div>\n\n          {/* Top Candidates Section */}\n          <Card className=\"mt-8\" data-testid=\"card-top-candidates\">\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <CardTitle>{t('dashboard.topCandidates')}</CardTitle>\n                <Button variant=\"ghost\" data-testid=\"button-view-all-candidates\">\n                  {t('dashboard.viewAllCandidates')} →\n                </Button>\n              </div>\n            </CardHeader>\n            <CardContent>\n              {topCandidates.length > 0 ? (\n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full\">\n                    <thead>\n                      <tr className=\"border-b border-border\">\n                        <th className=\"text-left text-sm font-medium text-muted-foreground py-2\">{t('candidates.name')}</th>\n                        <th className=\"text-left text-sm font-medium text-muted-foreground py-2\">{t('candidates.position')}</th>\n                        <th className=\"text-left text-sm font-medium text-muted-foreground py-2\">{t('candidates.matchScore')}</th>\n                        <th className=\"text-left text-sm font-medium text-muted-foreground py-2\">{t('candidates.status')}</th>\n                        <th className=\"text-left text-sm font-medium text-muted-foreground py-2\">{t('common.action')}</th>\n                      </tr>\n                    </thead>\n                    <tbody className=\"divide-y divide-border\">\n                      {topCandidates.map((candidate: any) => (\n                        <tr key={candidate.id} data-testid={`row-candidate-${candidate.id}`}>\n                          <td className=\"py-3\">\n                            <div className=\"flex items-center space-x-3\">\n                              <div className=\"w-8 h-8 rounded-full bg-primary/10 flex items-center justify-center\">\n                                <span className=\"text-sm font-medium text-primary\">\n                                  {candidate.name?.charAt(0) || 'C'}\n                                </span>\n                              </div>\n                              <div>\n                                <p className=\"text-sm font-medium text-foreground\" data-testid={`text-name-${candidate.id}`}>\n                                  {candidate.name || 'Unknown'}\n                                </p>\n                                <p className=\"text-xs text-muted-foreground\" data-testid={`text-email-${candidate.id}`}>\n                                  {candidate.email || 'No email'}\n                                </p>\n                              </div>\n                            </div>\n                          </td>\n                          <td className=\"py-3\">\n                            <p className=\"text-sm text-foreground\" data-testid={`text-position-${candidate.id}`}>\n                              {candidate.position || 'Not specified'}\n                            </p>\n                          </td>\n                          <td className=\"py-3\">\n                            <div className=\"flex items-center space-x-2\">\n                              <Progress value={candidate.matchScore || 0} className=\"w-16 h-2\" />\n                              <span className=\"text-sm font-medium text-chart-2\" data-testid={`text-match-score-${candidate.id}`}>\n                                {candidate.matchScore || 0}%\n                              </span>\n                            </div>\n                          </td>\n                          <td className=\"py-3\">\n                            <span className=\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-chart-3/10 text-chart-3\" data-testid={`text-status-${candidate.id}`}>\n                              {candidate.status || 'Applied'}\n                            </span>\n                          </td>\n                          <td className=\"py-3\">\n                            <Button variant=\"ghost\" size=\"sm\" data-testid={`button-view-candidate-${candidate.id}`}>\n                              {t('candidates.viewProfile')}\n                            </Button>\n                          </td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n              ) : (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  <Users className=\"w-12 h-12 mx-auto mb-4 opacity-50\" />\n                  <p>{t('candidates.noCandidates')}</p>\n                  <p className=\"text-sm\">{t('candidates.addCandidatesHint')}</p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":18183},"client/src/pages/interviews.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Sidebar } from \"@/components/ui/sidebar\";\nimport { InterviewCard } from \"@/components/interview-card\";\nimport { useInterviews } from \"@/hooks/use-interviews\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useLanguage } from \"@/contexts/language-context\";\nimport { \n  Search, \n  Filter, \n  Plus, \n  Calendar,\n  Clock,\n  Video\n} from \"lucide-react\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\n\nexport default function Interviews() {\n  const { t } = useLanguage();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [typeFilter, setTypeFilter] = useState(\"all\");\n  \n  const { \n    data: interviews, \n    isLoading, \n    error \n  } = useInterviews();\n\n  // Fetch candidates and jobs for enhanced search\n  const { data: candidates } = useQuery<any[]>({\n    queryKey: [\"/api/candidates\"],\n  });\n\n  const { data: jobs } = useQuery<any[]>({\n    queryKey: [\"/api/jobs\"],\n  });\n\n  const filteredInterviews = interviews?.filter(interview => {\n    let matchesSearch = searchQuery === \"\";\n    \n    if (searchQuery && !matchesSearch) {\n      const query = searchQuery.toLowerCase();\n      \n      // Search by candidate name\n      const candidate = candidates?.find(c => c.id === interview.candidateId);\n      const candidateMatch = candidate?.name?.toLowerCase().includes(query);\n      \n      // Search by job title\n      const job = jobs?.find(j => j.id === interview.jobId);\n      const jobMatch = job?.title?.toLowerCase().includes(query);\n      \n      // Also search original fields for backwards compatibility\n      const idMatch = interview.candidateId.toLowerCase().includes(query) ||\n                     interview.jobId.toLowerCase().includes(query);\n      \n      matchesSearch = candidateMatch || jobMatch || idMatch;\n    }\n    \n    const matchesStatus = statusFilter === \"all\" || interview.status === statusFilter;\n    const matchesType = typeFilter === \"all\" || interview.type === typeFilter;\n    \n    return matchesSearch && matchesStatus && matchesType;\n  }) || [];\n\n  const interviewStats = {\n    total: interviews?.length || 0,\n    scheduled: interviews?.filter(i => i.status === \"scheduled\").length || 0,\n    completed: interviews?.filter(i => i.status === \"completed\").length || 0,\n    cancelled: interviews?.filter(i => i.status === \"cancelled\").length || 0,\n    today: interviews?.filter(i => {\n      const today = new Date();\n      const interviewDate = new Date(i.scheduledDate);\n      return interviewDate.toDateString() === today.toDateString();\n    }).length || 0,\n  };\n\n  if (error) {\n    return (\n      <div className=\"flex h-screen\">\n        <Sidebar />\n        <div className=\"flex-1 flex items-center justify-center\">\n          <div className=\"text-center\">\n            <p className=\"text-destructive\">{t('interviews.failedToLoad')}</p>\n            <Button onClick={() => window.location.reload()} className=\"mt-2\">\n              {t('jobs.retry')}\n            </Button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex h-screen overflow-hidden bg-background\">\n      <Sidebar />\n      \n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        {/* Header */}\n        <header className=\"bg-card border-b border-border px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-2xl font-semibold text-foreground\">{t('interviews.pageTitle')}</h1>\n              <p className=\"text-sm text-muted-foreground\">\n                {t('interviews.pageSubtitle')}\n              </p>\n            </div>\n            \n            <div className=\"flex items-center space-x-3\">\n              <Button data-testid=\"button-schedule-interview\">\n                <Plus className=\"w-4 h-4 mr-2\" />\n                {t('interviews.scheduleInterview')}\n              </Button>\n            </div>\n          </div>\n        </header>\n\n        {/* Quick Stats */}\n        <div className=\"bg-card border-b border-border px-6 py-4\">\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-4\">\n            <div className=\"text-center\">\n              <p className=\"text-2xl font-bold text-foreground\" data-testid=\"text-today-interviews\">\n                {interviewStats.today}\n              </p>\n              <p className=\"text-sm text-muted-foreground\">{t('interviews.today')}</p>\n            </div>\n            <div className=\"text-center\">\n              <p className=\"text-2xl font-bold text-foreground\" data-testid=\"text-scheduled-interviews\">\n                {interviewStats.scheduled}\n              </p>\n              <p className=\"text-sm text-muted-foreground\">{t('interviews.scheduled')}</p>\n            </div>\n            <div className=\"text-center\">\n              <p className=\"text-2xl font-bold text-foreground\" data-testid=\"text-completed-interviews\">\n                {interviewStats.completed}\n              </p>\n              <p className=\"text-sm text-muted-foreground\">{t('interviews.completed')}</p>\n            </div>\n            <div className=\"text-center\">\n              <p className=\"text-2xl font-bold text-foreground\" data-testid=\"text-total-interviews\">\n                {interviewStats.total}\n              </p>\n              <p className=\"text-sm text-muted-foreground\">{t('interviews.total')}</p>\n            </div>\n          </div>\n\n          {/* Filters */}\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n                <Input\n                  placeholder={t('interviews.searchPlaceholder')}\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-10 w-64\"\n                  data-testid=\"input-search-interviews\"\n                />\n              </div>\n              \n              <Select value={statusFilter} onValueChange={setStatusFilter}>\n                <SelectTrigger className=\"w-40\" data-testid=\"select-status-filter\">\n                  <SelectValue placeholder={t('jobs.allStatuses')} />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">{t('jobs.allStatuses')}</SelectItem>\n                  <SelectItem value=\"scheduled\">{t('interviews.scheduled')}</SelectItem>\n                  <SelectItem value=\"completed\">{t('interviews.completed')}</SelectItem>\n                  <SelectItem value=\"cancelled\">{t('interviews.cancelled')}</SelectItem>\n                  <SelectItem value=\"no-show\">{t('interviews.noShow')}</SelectItem>\n                </SelectContent>\n              </Select>\n\n              <Select value={typeFilter} onValueChange={setTypeFilter}>\n                <SelectTrigger className=\"w-40\" data-testid=\"select-type-filter\">\n                  <SelectValue placeholder={t('interviews.allTypes')} />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">{t('interviews.allTypes')}</SelectItem>\n                  <SelectItem value=\"phone\">{t('interviews.phone')}</SelectItem>\n                  <SelectItem value=\"video\">{t('interviews.video')}</SelectItem>\n                  <SelectItem value=\"in-person\">{t('interviews.inPerson')}</SelectItem>\n                </SelectContent>\n              </Select>\n\n              <Button variant=\"outline\" size=\"sm\" data-testid=\"button-advanced-filters\">\n                <Filter className=\"w-4 h-4 mr-2\" />\n                {t('jobs.moreFilters')}\n              </Button>\n            </div>\n\n            <div className=\"text-sm text-muted-foreground\" data-testid=\"text-interview-count\">\n              {t('interviews.interviewCount', { filtered: filteredInterviews.length.toString(), total: interviewStats.total.toString() })}\n            </div>\n          </div>\n        </div>\n\n        {/* Main Content */}\n        <main className=\"flex-1 overflow-y-auto p-6\">\n          {isLoading ? (\n            <div className=\"flex items-center justify-center h-64\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n            </div>\n          ) : filteredInterviews.length > 0 ? (\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6\">\n              {filteredInterviews.map((interview) => (\n                <InterviewCard \n                  key={interview.id} \n                  interview={interview}\n                  data-testid={`card-interview-${interview.id}`}\n                />\n              ))}\n            </div>\n          ) : (\n            <Card className=\"h-64\">\n              <CardContent className=\"flex flex-col items-center justify-center h-full text-center\">\n                <Calendar className=\"w-12 h-12 text-muted-foreground mb-4\" />\n                <h3 className=\"text-lg font-medium text-foreground mb-2\">\n                  {searchQuery || statusFilter !== \"all\" || typeFilter !== \"all\" ? t('interviews.noInterviewsFound') : t('interviews.noInterviewsScheduled')}\n                </h3>\n                <p className=\"text-sm text-muted-foreground mb-4\">\n                  {searchQuery || statusFilter !== \"all\" || typeFilter !== \"all\"\n                    ? t('jobs.adjustFilters') \n                    : t('interviews.getStartedInterview')\n                  }\n                </p>\n                {!searchQuery && statusFilter === \"all\" && typeFilter === \"all\" && (\n                  <Button data-testid=\"button-schedule-first-interview\">\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    {t('interviews.scheduleFirstInterview')}\n                  </Button>\n                )}\n              </CardContent>\n            </Card>\n          )}\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":10246},"client/src/pages/jobs.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Sidebar } from \"@/components/ui/sidebar\";\nimport { JobCard } from \"@/components/job-card\";\nimport { useJobs } from \"@/hooks/use-jobs\";\nimport { useLanguage } from \"@/contexts/language-context\";\nimport { \n  Search, \n  Filter, \n  Plus, \n  Briefcase,\n  MapPin,\n  DollarSign\n} from \"lucide-react\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\n\nexport default function Jobs() {\n  const { t } = useLanguage();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [departmentFilter, setDepartmentFilter] = useState(\"all\");\n  \n  const { \n    data: jobs, \n    isLoading, \n    error \n  } = useJobs();\n\n  const filteredJobs = jobs?.filter(job => {\n    const matchesSearch = job.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         job.department.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         job.location.toLowerCase().includes(searchQuery.toLowerCase());\n    \n    const matchesStatus = statusFilter === \"all\" || job.status === statusFilter;\n    const matchesDepartment = departmentFilter === \"all\" || job.department === departmentFilter;\n    \n    return matchesSearch && matchesStatus && matchesDepartment;\n  }) || [];\n\n  const departments = Array.from(new Set(jobs?.map(job => job.department) || []));\n  \n  const jobStats = {\n    total: jobs?.length || 0,\n    active: jobs?.filter(j => j.status === \"active\").length || 0,\n    paused: jobs?.filter(j => j.status === \"paused\").length || 0,\n    closed: jobs?.filter(j => j.status === \"closed\").length || 0,\n  };\n\n  if (error) {\n    return (\n      <div className=\"flex h-screen\">\n        <Sidebar />\n        <div className=\"flex-1 flex items-center justify-center\">\n          <div className=\"text-center\">\n            <p className=\"text-destructive\">{t('jobs.failedToLoad')}</p>\n            <Button onClick={() => window.location.reload()} className=\"mt-2\">\n              {t('jobs.retry')}\n            </Button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex h-screen overflow-hidden bg-background\">\n      <Sidebar />\n      \n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        {/* Header */}\n        <header className=\"bg-card border-b border-border px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-2xl font-semibold text-foreground\">{t('jobs.pageTitle')}</h1>\n              <p className=\"text-sm text-muted-foreground\">\n                {t('jobs.pageSubtitle')}\n              </p>\n            </div>\n            \n            <div className=\"flex items-center space-x-3\">\n              <Button data-testid=\"button-create-job\">\n                <Plus className=\"w-4 h-4 mr-2\" />\n                {t('jobs.createJob')}\n              </Button>\n            </div>\n          </div>\n        </header>\n\n        {/* Filters and Stats */}\n        <div className=\"bg-card border-b border-border px-6 py-4\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n                <Input\n                  placeholder={t('jobs.searchPlaceholder')}\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-10 w-64\"\n                  data-testid=\"input-search-jobs\"\n                />\n              </div>\n              \n              <Select value={statusFilter} onValueChange={setStatusFilter}>\n                <SelectTrigger className=\"w-40\" data-testid=\"select-status-filter\">\n                  <SelectValue placeholder={t('jobs.allStatuses')} />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">{t('jobs.allStatuses')}</SelectItem>\n                  <SelectItem value=\"active\">{t('jobs.active')}</SelectItem>\n                  <SelectItem value=\"paused\">{t('jobs.paused')}</SelectItem>\n                  <SelectItem value=\"closed\">{t('jobs.closed')}</SelectItem>\n                </SelectContent>\n              </Select>\n\n              <Select value={departmentFilter} onValueChange={setDepartmentFilter}>\n                <SelectTrigger className=\"w-40\" data-testid=\"select-department-filter\">\n                  <SelectValue placeholder={t('jobs.allDepartments')} />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">{t('jobs.allDepartments')}</SelectItem>\n                  {departments.map(dept => (\n                    <SelectItem key={dept} value={dept}>{dept}</SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n\n              <Button variant=\"outline\" size=\"sm\" data-testid=\"button-advanced-filters\">\n                <Filter className=\"w-4 h-4 mr-2\" />\n                {t('jobs.moreFilters')}\n              </Button>\n            </div>\n\n            <div className=\"text-sm text-muted-foreground\" data-testid=\"text-job-count\">\n              {t('jobs.jobCount', { filtered: filteredJobs.length.toString(), total: jobStats.total.toString() })}\n            </div>\n          </div>\n\n          {/* Quick Stats */}\n          <div className=\"flex items-center space-x-6\">\n            <div className=\"flex items-center space-x-2\">\n              <Badge variant=\"secondary\" data-testid=\"badge-active\">\n                {t('jobs.active')}: {jobStats.active}\n              </Badge>\n              <Badge variant=\"secondary\" data-testid=\"badge-paused\">\n                {t('jobs.paused')}: {jobStats.paused}\n              </Badge>\n              <Badge variant=\"secondary\" data-testid=\"badge-closed\">\n                {t('jobs.closed')}: {jobStats.closed}\n              </Badge>\n            </div>\n          </div>\n        </div>\n\n        {/* Main Content */}\n        <main className=\"flex-1 overflow-y-auto p-6\">\n          {isLoading ? (\n            <div className=\"flex items-center justify-center h-64\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n            </div>\n          ) : filteredJobs.length > 0 ? (\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              {filteredJobs.map((job) => (\n                <JobCard \n                  key={job.id} \n                  job={job}\n                  data-testid={`card-job-${job.id}`}\n                />\n              ))}\n            </div>\n          ) : (\n            <Card className=\"h-64\">\n              <CardContent className=\"flex flex-col items-center justify-center h-full text-center\">\n                <Briefcase className=\"w-12 h-12 text-muted-foreground mb-4\" />\n                <h3 className=\"text-lg font-medium text-foreground mb-2\">\n                  {searchQuery || statusFilter !== \"all\" || departmentFilter !== \"all\" ? t('jobs.noJobsFound') : t('jobs.noJobsYet')}\n                </h3>\n                <p className=\"text-sm text-muted-foreground mb-4\">\n                  {searchQuery || statusFilter !== \"all\" || departmentFilter !== \"all\"\n                    ? t('jobs.adjustFilters') \n                    : t('jobs.getStartedHint')\n                  }\n                </p>\n                {!searchQuery && statusFilter === \"all\" && departmentFilter === \"all\" && (\n                  <Button data-testid=\"button-create-first-job\">\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    {t('jobs.createFirstJob')}\n                  </Button>\n                )}\n              </CardContent>\n            </Card>\n          )}\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":8120},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\nimport { useLanguage } from \"@/contexts/language-context\";\n\nexport default function NotFound() {\n  const { t } = useLanguage();\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">{t('notFound.title')}</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            {t('notFound.description')}\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":786},"client/src/pages/templates.tsx":{"content":"import { Sidebar } from \"@/components/ui/sidebar\";\nimport { PromptTemplateManager } from \"@/components/prompt-template-manager\";\nimport { useLanguage } from \"@/contexts/language-context\";\n\nexport default function Templates() {\n  const { t } = useLanguage();\n  return (\n    <div className=\"flex h-screen overflow-hidden bg-background\">\n      <Sidebar />\n      \n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        {/* Header */}\n        <header className=\"bg-card border-b border-border px-6 py-4\">\n          <div>\n            <h1 className=\"text-2xl font-semibold text-foreground\">{t('templates.pageTitle')}</h1>\n            <p className=\"text-sm text-muted-foreground\">\n              {t('templates.pageSubtitle')}\n            </p>\n          </div>\n        </header>\n\n        {/* Main Content */}\n        <main className=\"flex-1 overflow-y-auto p-6\">\n          <PromptTemplateManager />\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":950},"client/src/types/index.ts":{"content":"export interface DashboardMetrics {\n  totalCandidates: number;\n  activeJobs: number;\n  upcomingInterviews: number;\n  interviewRate: number;\n  hireRate: number;\n  funnel: {\n    applied: number;\n    screening: number;\n    interview: number;\n    hired: number;\n  };\n}\n\nexport interface ResumeAnalysisResult {\n  candidate?: any;\n  analysis: {\n    summary: string;\n    skills: string[];\n    experience: number;\n    education: string;\n    strengths: string[];\n    weaknesses: string[];\n    recommendations: string[];\n  };\n  parsedData: {\n    contactInfo: {\n      name?: string;\n      email?: string;\n      phone?: string;\n    };\n    skills: string[];\n    experience: number;\n    metadata: {\n      pages: number;\n      info?: any;\n    };\n  };\n}\n\nexport interface CandidateMatch {\n  candidate: any;\n  matchScore: number;\n  reasons: string[];\n  explanation: string;\n}\n\nexport interface AIConversation {\n  id: string;\n  userId: string;\n  sessionId: string;\n  message: string;\n  response: string;\n  modelUsed: string;\n  tokensUsed?: number;\n  createdAt: Date;\n}\n\nexport interface FileUploadProgress {\n  progress: number;\n  status: \"idle\" | \"uploading\" | \"processing\" | \"complete\" | \"error\";\n  error?: string;\n}\n\nexport type CandidateStatus = \n  | \"applied\" \n  | \"screening\" \n  | \"interview\" \n  | \"offer\" \n  | \"hired\" \n  | \"rejected\";\n\nexport type JobStatus = \"active\" | \"paused\" | \"closed\";\n\nexport type InterviewStatus = \n  | \"scheduled\" \n  | \"completed\" \n  | \"cancelled\" \n  | \"no-show\";\n\nexport type InterviewType = \"phone\" | \"video\" | \"in-person\";\n\nexport interface NotificationItem {\n  id: string;\n  type: \"info\" | \"warning\" | \"success\" | \"error\";\n  title: string;\n  message: string;\n  timestamp: Date;\n  read: boolean;\n  actionUrl?: string;\n}\n","size_bytes":1737},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { useLocation } from \"wouter\";\nimport { useLanguage } from \"@/contexts/language-context\";\nimport { \n  LayoutDashboard, \n  Users, \n  Briefcase, \n  Calendar, \n  Bot, \n  BarChart3, \n  TrendingUp,\n  Settings,\n  FileText\n} from \"lucide-react\";\n\nconst getNavigation = (t: (key: string) => string) => [\n  { name: t('nav.dashboard'), href: \"/\", icon: LayoutDashboard, key: \"Dashboard\" },\n  { name: t('nav.candidates'), href: \"/candidates\", icon: Users, key: \"Candidates\" },\n  { name: t('nav.jobs'), href: \"/jobs\", icon: Briefcase, key: \"Job Postings\" },\n  { name: t('nav.interviews'), href: \"/interviews\", icon: Calendar, key: \"Interviews\" },\n  { name: t('nav.assistant'), href: \"/ai-assistant\", icon: Bot, key: \"AI Assistant\" },\n];\n\nconst getAnalytics = (t: (key: string) => string) => [\n  { name: t('nav.reports'), href: \"/reports\", icon: BarChart3, key: \"Reports\" },\n  { name: t('nav.funnelAnalysis'), href: \"/funnel\", icon: TrendingUp, key: \"Funnel Analysis\" },\n];\n\nconst getSettings = (t: (key: string) => string) => [\n  { name: t('nav.preferences'), href: \"/preferences\", icon: Settings, key: \"Preferences\" },\n  { name: t('nav.templates'), href: \"/templates\", icon: FileText, key: \"Templates\" },\n];\n\ninterface SidebarProps {\n  className?: string;\n}\n\nexport function Sidebar({ className }: SidebarProps) {\n  const [location] = useLocation();\n  const { t } = useLanguage();\n  \n  const navigation = getNavigation(t);\n  const analytics = getAnalytics(t);\n  const settings = getSettings(t);\n\n  return (\n    <div className={cn(\"flex h-full w-60 flex-col bg-card border-r border-border\", className)}>\n      {/* Logo and Brand */}\n      <div className=\"p-6 border-b border-border\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n            <Bot className=\"w-4 h-4 text-primary-foreground\" />\n          </div>\n          <div>\n            <h1 className=\"font-semibold text-foreground\">{t('brand.name')}</h1>\n            <p className=\"text-xs text-muted-foreground\">{t('brand.tagline')}</p>\n          </div>\n        </div>\n      </div>\n\n      {/* Navigation */}\n      <ScrollArea className=\"flex-1 px-4 py-4\">\n        <nav className=\"space-y-2\">\n          {navigation.map((item) => {\n            const isActive = location === item.href;\n            return (\n              <a\n                key={item.name}\n                href={item.href}\n                className={cn(\n                  \"flex items-center space-x-3 px-3 py-2 rounded-md text-sm font-medium transition-colors\",\n                  isActive\n                    ? \"bg-primary text-primary-foreground\"\n                    : \"text-muted-foreground hover:bg-accent hover:text-accent-foreground\"\n                )}\n              >\n                <item.icon className=\"w-4 h-4\" />\n                <span>{item.name}</span>\n                {item.key === \"Candidates\" && (\n                  <span className=\"ml-auto bg-primary text-primary-foreground text-xs px-2 py-0.5 rounded-full\">\n                    24\n                  </span>\n                )}\n                {item.key === \"Job Postings\" && (\n                  <span className=\"ml-auto bg-chart-2 text-white text-xs px-2 py-0.5 rounded-full\">\n                    8\n                  </span>\n                )}\n                {item.key === \"Interviews\" && (\n                  <span className=\"ml-auto bg-chart-3 text-white text-xs px-2 py-0.5 rounded-full\">\n                    12\n                  </span>\n                )}\n                {item.key === \"AI Assistant\" && (\n                  <span className=\"ml-auto w-2 h-2 bg-chart-2 rounded-full\"></span>\n                )}\n              </a>\n            );\n          })}\n        </nav>\n\n        <div className=\"mt-8\">\n          <h3 className=\"px-3 text-xs font-semibold text-muted-foreground uppercase tracking-wider\">\n            {t('nav.analytics')}\n          </h3>\n          <nav className=\"mt-2 space-y-1\">\n            {analytics.map((item) => (\n              <a\n                key={item.name}\n                href={item.href}\n                className=\"flex items-center space-x-3 px-3 py-2 rounded-md text-muted-foreground hover:bg-accent hover:text-accent-foreground text-sm font-medium transition-colors\"\n              >\n                <item.icon className=\"w-4 h-4\" />\n                <span>{item.name}</span>\n              </a>\n            ))}\n          </nav>\n        </div>\n\n        <div className=\"mt-8\">\n          <h3 className=\"px-3 text-xs font-semibold text-muted-foreground uppercase tracking-wider\">\n            {t('nav.settings')}\n          </h3>\n          <nav className=\"mt-2 space-y-1\">\n            {settings.map((item) => (\n              <a\n                key={item.name}\n                href={item.href}\n                className=\"flex items-center space-x-3 px-3 py-2 rounded-md text-muted-foreground hover:bg-accent hover:text-accent-foreground text-sm font-medium transition-colors\"\n              >\n                <item.icon className=\"w-4 h-4\" />\n                <span>{item.name}</span>\n              </a>\n            ))}\n          </nav>\n        </div>\n      </ScrollArea>\n\n      {/* User Profile */}\n      <div className=\"p-4 border-t border-border\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-8 h-8 rounded-full bg-primary/10 flex items-center justify-center\">\n            <span className=\"text-sm font-medium text-primary\">SC</span>\n          </div>\n          <div className=\"flex-1 min-w-0\">\n            <p className=\"text-sm font-medium text-foreground truncate\">Sarah Chen</p>\n            <p className=\"text-xs text-muted-foreground truncate\">HR Manager</p>\n          </div>\n          <Button variant=\"ghost\" size=\"sm\">\n            <Settings className=\"w-4 h-4\" />\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6019},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"server/websocket.ts":{"content":"import { WebSocketServer, WebSocket } from 'ws';\nimport { Server } from 'http';\nimport { storage } from './storage';\nimport { InsertActivityLog, InsertNotification, InsertUserSession } from '@shared/schema';\nimport { randomUUID } from 'crypto';\n\ninterface WSClient extends WebSocket {\n  userId?: string;\n  sessionId?: string;\n}\n\ninterface WSMessage {\n  type: string;\n  payload?: any;\n}\n\nclass CollaborationService {\n  private wss: WebSocketServer;\n  private clients: Map<string, WSClient> = new Map();\n  private userSessions: Map<string, string[]> = new Map(); // userId -> sessionIds[]\n\n  constructor(server: Server) {\n    this.wss = new WebSocketServer({ server });\n    this.setupWebSocket();\n  }\n\n  private setupWebSocket() {\n    this.wss.on('connection', (ws: WSClient, req) => {\n      const sessionId = randomUUID();\n      ws.sessionId = sessionId;\n      \n      console.log(`New WebSocket connection: ${sessionId}`);\n\n      ws.on('message', async (data) => {\n        try {\n          const message: WSMessage = JSON.parse(data.toString());\n          await this.handleMessage(ws, message);\n        } catch (error) {\n          console.error('Error handling WebSocket message:', error);\n          ws.send(JSON.stringify({ type: 'error', message: 'Invalid message format' }));\n        }\n      });\n\n      ws.on('close', async () => {\n        if (ws.userId && ws.sessionId) {\n          await this.handleUserDisconnect(ws.userId, ws.sessionId);\n        }\n        this.clients.delete(ws.sessionId!);\n        console.log(`WebSocket disconnected: ${ws.sessionId}`);\n      });\n\n      ws.on('error', (error) => {\n        console.error('WebSocket error:', error);\n      });\n\n      // Send welcome message\n      ws.send(JSON.stringify({ \n        type: 'connected', \n        sessionId,\n        message: 'Connected to collaboration service' \n      }));\n    });\n  }\n\n  private async handleMessage(ws: WSClient, message: WSMessage) {\n    switch (message.type) {\n      case 'authenticate':\n        await this.handleAuthentication(ws, message.payload);\n        break;\n      case 'activity':\n        await this.handleActivity(ws, message.payload);\n        break;\n      case 'page_change':\n        await this.handlePageChange(ws, message.payload);\n        break;\n      case 'ping':\n        ws.send(JSON.stringify({ type: 'pong' }));\n        break;\n      default:\n        ws.send(JSON.stringify({ type: 'error', message: 'Unknown message type' }));\n    }\n  }\n\n  private async handleAuthentication(ws: WSClient, payload: { userId: string }) {\n    const { userId } = payload;\n    \n    if (!userId) {\n      ws.send(JSON.stringify({ type: 'error', message: 'User ID required' }));\n      return;\n    }\n\n    ws.userId = userId;\n    this.clients.set(ws.sessionId!, ws);\n\n    // Update user sessions\n    if (!this.userSessions.has(userId)) {\n      this.userSessions.set(userId, []);\n    }\n    this.userSessions.get(userId)!.push(ws.sessionId!);\n\n    // Create user session record\n    try {\n      const userSession: InsertUserSession = {\n        userId,\n        isOnline: true,\n        currentPage: '/',\n        lastActivity: new Date(),\n        socketId: ws.sessionId!,\n      };\n      await storage.createUserSession(userSession);\n\n      // Notify other team members\n      await this.broadcastToTeam(userId, {\n        type: 'user_online',\n        payload: { userId, sessionId: ws.sessionId }\n      });\n\n      ws.send(JSON.stringify({ \n        type: 'authenticated', \n        message: 'Successfully authenticated' \n      }));\n\n      // Send current team status\n      const onlineUsers = await this.getOnlineUsers();\n      ws.send(JSON.stringify({\n        type: 'team_status',\n        payload: { onlineUsers }\n      }));\n\n    } catch (error) {\n      console.error('Error creating user session:', error);\n      ws.send(JSON.stringify({ type: 'error', message: 'Authentication failed' }));\n    }\n  }\n\n  private async handleActivity(ws: WSClient, payload: {\n    action: string;\n    entityType: string;\n    entityId: string;\n    entityName: string;\n    details?: any;\n  }) {\n    if (!ws.userId) {\n      ws.send(JSON.stringify({ type: 'error', message: 'Not authenticated' }));\n      return;\n    }\n\n    try {\n      // Log the activity\n      const activity: InsertActivityLog = {\n        userId: ws.userId,\n        action: payload.action,\n        entityType: payload.entityType,\n        entityId: payload.entityId,\n        entityName: payload.entityName,\n        details: payload.details || null,\n      };\n      await storage.createActivityLog(activity);\n\n      // Broadcast to team members\n      await this.broadcastToTeam(ws.userId, {\n        type: 'team_activity',\n        payload: {\n          ...activity,\n          userName: await this.getUserName(ws.userId),\n          timestamp: new Date().toISOString()\n        }\n      }, ws.sessionId);\n\n      // Create notifications for relevant team members\n      await this.createActivityNotification(activity);\n\n    } catch (error) {\n      console.error('Error handling activity:', error);\n      ws.send(JSON.stringify({ type: 'error', message: 'Failed to log activity' }));\n    }\n  }\n\n  private async handlePageChange(ws: WSClient, payload: { page: string }) {\n    if (!ws.userId) return;\n\n    try {\n      await storage.updateUserSession(ws.sessionId!, {\n        currentPage: payload.page,\n        lastActivity: new Date(),\n      });\n\n      // Broadcast page change to team\n      await this.broadcastToTeam(ws.userId, {\n        type: 'user_page_change',\n        payload: {\n          userId: ws.userId,\n          page: payload.page,\n          userName: await this.getUserName(ws.userId)\n        }\n      }, ws.sessionId);\n\n    } catch (error) {\n      console.error('Error updating page:', error);\n    }\n  }\n\n  private async handleUserDisconnect(userId: string, sessionId: string) {\n    try {\n      // Update session as offline\n      await storage.updateUserSession(sessionId, {\n        isOnline: false,\n        lastActivity: new Date(),\n      });\n\n      // Remove from active sessions\n      const sessions = this.userSessions.get(userId);\n      if (sessions) {\n        const index = sessions.indexOf(sessionId);\n        if (index > -1) {\n          sessions.splice(index, 1);\n        }\n        if (sessions.length === 0) {\n          this.userSessions.delete(userId);\n          \n          // Notify team that user went offline\n          await this.broadcastToTeam(userId, {\n            type: 'user_offline',\n            payload: { userId }\n          });\n        }\n      }\n    } catch (error) {\n      console.error('Error handling user disconnect:', error);\n    }\n  }\n\n  private async broadcastToTeam(excludeUserId: string, message: WSMessage, excludeSessionId?: string) {\n    const messageStr = JSON.stringify(message);\n    \n    Array.from(this.clients.entries()).forEach(([sessionId, client]) => {\n      if (client.userId && \n          client.userId !== excludeUserId && \n          sessionId !== excludeSessionId &&\n          client.readyState === WebSocket.OPEN) {\n        client.send(messageStr);\n      }\n    });\n  }\n\n  private async getOnlineUsers(): Promise<any[]> {\n    try {\n      return await storage.getOnlineUsers();\n    } catch (error) {\n      console.error('Error getting online users:', error);\n      return [];\n    }\n  }\n\n  private async getUserName(userId: string): Promise<string> {\n    try {\n      const user = await storage.getUser(userId);\n      return user?.name || 'Unknown User';\n    } catch (error) {\n      return 'Unknown User';\n    }\n  }\n\n  private async createActivityNotification(activity: InsertActivityLog) {\n    try {\n      // Get all team members except the actor\n      const users = await storage.getUsers();\n      const teamMembers = users.filter(user => user.id !== activity.userId);\n\n      // Create notifications for relevant activities\n      const notificationTypes = [\n        'candidate_updated', 'candidate_created', \n        'interview_scheduled', 'interview_updated',\n        'job_created', 'job_updated'\n      ];\n\n      if (notificationTypes.includes(activity.action)) {\n        for (const member of teamMembers) {\n          const notification: InsertNotification = {\n            userId: member.id,\n            type: 'team_activity',\n            title: this.getNotificationTitle(activity.action),\n            message: `${await this.getUserName(activity.userId)} ${this.getNotificationMessage(activity.action, activity.entityName)}`,\n            entityType: activity.entityType,\n            entityId: activity.entityId,\n            isRead: false,\n          };\n          await storage.createNotification(notification);\n        }\n      }\n    } catch (error) {\n      console.error('Error creating activity notification:', error);\n    }\n  }\n\n  private getNotificationTitle(action: string): string {\n    const titles: Record<string, string> = {\n      'candidate_created': 'New Candidate Added',\n      'candidate_updated': 'Candidate Updated',\n      'interview_scheduled': 'Interview Scheduled',\n      'interview_updated': 'Interview Updated',\n      'job_created': 'New Job Posted',\n      'job_updated': 'Job Updated',\n    };\n    return titles[action] || 'Team Activity';\n  }\n\n  private getNotificationMessage(action: string, entityName: string): string {\n    const messages: Record<string, string> = {\n      'candidate_created': `added a new candidate: ${entityName}`,\n      'candidate_updated': `updated candidate: ${entityName}`,\n      'interview_scheduled': `scheduled an interview with ${entityName}`,\n      'interview_updated': `updated an interview with ${entityName}`,\n      'job_created': `created a new job: ${entityName}`,\n      'job_updated': `updated job: ${entityName}`,\n    };\n    return messages[action] || `performed an action on ${entityName}`;\n  }\n\n  // Public methods for external use\n  public async notifyUser(userId: string, notification: WSMessage) {\n    const sessions = this.userSessions.get(userId);\n    if (sessions) {\n      const messageStr = JSON.stringify(notification);\n      for (const sessionId of sessions) {\n        const client = this.clients.get(sessionId);\n        if (client && client.readyState === WebSocket.OPEN) {\n          client.send(messageStr);\n        }\n      }\n    }\n  }\n\n  public async broadcastToAll(message: WSMessage) {\n    const messageStr = JSON.stringify(message);\n    Array.from(this.clients.entries()).forEach(([sessionId, client]) => {\n      if (client.readyState === WebSocket.OPEN) {\n        client.send(messageStr);\n      }\n    });\n  }\n}\n\nexport { CollaborationService, WSClient, WSMessage };","size_bytes":10498},"client/src/components/language-toggle.tsx":{"content":"import { Languages } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu';\nimport { useLanguage } from '@/contexts/language-context';\n\nexport function LanguageToggle() {\n  const { language, setLanguage, t } = useLanguage();\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          className=\"h-8 w-8 px-0\"\n          data-testid=\"button-language-toggle\"\n        >\n          <Languages className=\"h-4 w-4\" />\n          <span className=\"sr-only\">{t('language.switch')}</span>\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"end\">\n        <DropdownMenuItem\n          onClick={() => setLanguage('en')}\n          className={language === 'en' ? 'bg-accent' : ''}\n          data-testid=\"language-english\"\n        >\n          <span className=\"mr-2\">🇺🇸</span>\n          {t('language.english')}\n        </DropdownMenuItem>\n        <DropdownMenuItem\n          onClick={() => setLanguage('zh')}\n          className={language === 'zh' ? 'bg-accent' : ''}\n          data-testid=\"language-chinese\"\n        >\n          <span className=\"mr-2\">🇨🇳</span>\n          {t('language.chinese')}\n        </DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}","size_bytes":1426},"client/src/components/notification-panel.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { useWebSocketContext } from \"@/contexts/websocket-context\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { \n  Bell, \n  BellRing,\n  X,\n  Check,\n  AlertCircle,\n  Info,\n  CheckCircle\n} from \"lucide-react\";\nimport { formatDistanceToNow } from \"date-fns\";\n\ninterface Notification {\n  id: string;\n  userId: string;\n  type: string;\n  title: string;\n  message: string;\n  entityType?: string;\n  entityId?: string;\n  isRead: boolean;\n  createdAt: string;\n}\n\nconst notificationIcons: Record<string, any> = {\n  'team_activity': Info,\n  'candidate_update': AlertCircle,\n  'interview_reminder': BellRing,\n  'system': CheckCircle,\n};\n\nconst notificationColors: Record<string, string> = {\n  'team_activity': 'text-blue-500',\n  'candidate_update': 'text-orange-500',\n  'interview_reminder': 'text-purple-500',\n  'system': 'text-green-500',\n};\n\nexport function NotificationPanel() {\n  const [notifications, setNotifications] = useState<Notification[]>([]);\n  const [isOpen, setIsOpen] = useState(false);\n  const queryClient = useQueryClient();\n\n  // Mock user ID - in real app this would come from auth context\n  const userId = \"hr-user-1\";\n\n  const { data: notificationData } = useQuery<Notification[]>({\n    queryKey: [\"/api/notifications\", userId],\n    queryFn: async () => {\n      const response = await fetch(`/api/notifications?userId=${userId}`, {\n        credentials: \"include\",\n      });\n      if (!response.ok) {\n        throw new Error(`${response.status}: ${response.statusText}`);\n      }\n      return response.json();\n    },\n  });\n\n  const markAsReadMutation = useMutation({\n    mutationFn: async (notificationId: string) => {\n      return apiRequest(\"PATCH\", `/api/notifications/${notificationId}/read`, {});\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/notifications\", userId] });\n    },\n  });\n\n  const { isConnected, subscribe } = useWebSocketContext();\n  \n  // Handle real-time notifications\n  useEffect(() => {\n    const unsubscribe = subscribe((message: any) => {\n      if (message.type === 'notification') {\n        const newNotification = message.payload;\n        setNotifications(prev => [newNotification, ...prev]);\n        \n        // Invalidate notifications query to refresh\n        queryClient.invalidateQueries({ queryKey: [\"/api/notifications\", userId] });\n      }\n    });\n    \n    return unsubscribe;\n  }, [subscribe, queryClient, userId]);\n\n  useEffect(() => {\n    if (notificationData) {\n      setNotifications(notificationData);\n    }\n  }, [notificationData]);\n\n  const unreadCount = notifications.filter(n => !n.isRead).length;\n\n  const handleMarkAsRead = (notificationId: string) => {\n    markAsReadMutation.mutate(notificationId);\n    \n    // Optimistically update local state\n    setNotifications(prev => \n      prev.map(n => \n        n.id === notificationId ? { ...n, isRead: true } : n\n      )\n    );\n  };\n\n  const handleMarkAllAsRead = () => {\n    const unreadNotifications = notifications.filter(n => !n.isRead);\n    unreadNotifications.forEach(notification => {\n      markAsReadMutation.mutate(notification.id);\n    });\n    \n    // Optimistically update local state\n    setNotifications(prev => \n      prev.map(n => ({ ...n, isRead: true }))\n    );\n  };\n\n  return (\n    <div className=\"relative\">\n      <Button\n        variant=\"ghost\"\n        size=\"sm\"\n        className=\"relative\"\n        onClick={() => setIsOpen(!isOpen)}\n        data-testid=\"button-notifications\"\n      >\n        <Bell className=\"w-4 h-4\" />\n        {unreadCount > 0 && (\n          <Badge \n            variant=\"destructive\" \n            className=\"absolute -top-1 -right-1 h-5 w-5 flex items-center justify-center p-0 text-xs\"\n          >\n            {unreadCount > 99 ? '99+' : unreadCount}\n          </Badge>\n        )}\n      </Button>\n\n      {isOpen && (\n        <Card className=\"absolute right-0 top-full mt-2 w-80 z-50 shadow-lg border\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Notifications</CardTitle>\n            <div className=\"flex items-center space-x-2\">\n              {unreadCount > 0 && (\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={handleMarkAllAsRead}\n                  className=\"text-xs\"\n                >\n                  Mark all read\n                </Button>\n              )}\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setIsOpen(false)}\n              >\n                <X className=\"w-4 h-4\" />\n              </Button>\n            </div>\n          </CardHeader>\n          <CardContent className=\"p-0\">\n            <ScrollArea className=\"h-80\">\n              {notifications.length === 0 ? (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  <Bell className=\"w-8 h-8 mx-auto mb-2 opacity-50\" />\n                  <p className=\"text-sm\">No notifications</p>\n                </div>\n              ) : (\n                <div className=\"space-y-1\">\n                  {notifications.map((notification) => {\n                    const IconComponent = notificationIcons[notification.type] || Info;\n                    const iconColor = notificationColors[notification.type] || 'text-gray-500';\n                    \n                    return (\n                      <div \n                        key={notification.id} \n                        className={`p-3 border-b border-border hover:bg-accent/50 transition-colors ${\n                          !notification.isRead ? 'bg-accent/30' : ''\n                        }`}\n                      >\n                        <div className=\"flex items-start space-x-3\">\n                          <IconComponent className={`w-4 h-4 mt-1 ${iconColor}`} />\n                          <div className=\"flex-1 min-w-0\">\n                            <div className=\"flex items-center justify-between\">\n                              <p className=\"text-sm font-medium text-foreground\">\n                                {notification.title}\n                              </p>\n                              {!notification.isRead && (\n                                <Button\n                                  variant=\"ghost\"\n                                  size=\"sm\"\n                                  onClick={() => handleMarkAsRead(notification.id)}\n                                  className=\"h-6 w-6 p-0\"\n                                >\n                                  <Check className=\"w-3 h-3\" />\n                                </Button>\n                              )}\n                            </div>\n                            <p className=\"text-xs text-muted-foreground mt-1\">\n                              {notification.message}\n                            </p>\n                            <div className=\"flex items-center justify-between mt-2\">\n                              <Badge variant=\"outline\" className=\"text-xs\">\n                                {notification.type.replace('_', ' ')}\n                              </Badge>\n                              <span className=\"text-xs text-muted-foreground\">\n                                {formatDistanceToNow(new Date(notification.createdAt), { addSuffix: true })}\n                              </span>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n              )}\n            </ScrollArea>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}","size_bytes":8024},"client/src/components/online-users.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useWebSocketContext } from \"@/contexts/websocket-context\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Users, Circle } from \"lucide-react\";\n\ninterface User {\n  id: string;\n  name: string;\n  email: string;\n  role: string;\n}\n\nexport function OnlineUsers() {\n  const [onlineUsers, setOnlineUsers] = useState<User[]>([]);\n\n  const { data: onlineData } = useQuery<User[]>({\n    queryKey: [\"/api/team/online\"],\n  });\n\n  const { isConnected, subscribe } = useWebSocketContext();\n  \n  // Handle real-time user status updates\n  useEffect(() => {\n    const unsubscribe = subscribe((message: any) => {\n      if (message.type === 'user_online') {\n        // Refetch online users when someone comes online\n        // In a real app, we could add the user directly to avoid refetch\n      } else if (message.type === 'user_offline') {\n        // Remove user from online list\n        setOnlineUsers(prev => prev.filter(user => user.id !== message.payload.userId));\n      } else if (message.type === 'team_status') {\n        // Update full team status\n        setOnlineUsers(message.payload.onlineUsers || []);\n      }\n    });\n    \n    return unsubscribe;\n  }, [subscribe]);\n\n  useEffect(() => {\n    if (onlineData) {\n      setOnlineUsers(onlineData);\n    }\n  }, [onlineData]);\n\n  const getInitials = (name: string) => {\n    return name\n      .split(' ')\n      .map(n => n[0])\n      .join('')\n      .toUpperCase()\n      .slice(0, 2);\n  };\n\n  const getRoleColor = (role: string) => {\n    switch (role) {\n      case 'hr_manager':\n        return 'bg-blue-500';\n      case 'recruiter':\n        return 'bg-green-500';\n      case 'admin':\n        return 'bg-purple-500';\n      default:\n        return 'bg-gray-500';\n    }\n  };\n\n  return (\n    <Card className=\"h-full\">\n      <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n        <CardTitle className=\"text-sm font-medium\">Team Online</CardTitle>\n        <div className=\"flex items-center space-x-2\">\n          <Circle className=\"w-2 h-2 fill-green-500 text-green-500\" />\n          <span className=\"text-xs text-muted-foreground\">\n            {onlineUsers.length} online\n          </span>\n        </div>\n      </CardHeader>\n      <CardContent>\n        {onlineUsers.length === 0 ? (\n          <div className=\"text-center py-8 text-muted-foreground\">\n            <Users className=\"w-8 h-8 mx-auto mb-2 opacity-50\" />\n            <p className=\"text-sm\">No one is online</p>\n          </div>\n        ) : (\n          <div className=\"space-y-3\">\n            {onlineUsers.map((user) => (\n              <div key={user.id} className=\"flex items-center space-x-3\">\n                <div className=\"relative\">\n                  <Avatar className=\"w-8 h-8\">\n                    <AvatarFallback className={`text-xs font-medium text-white ${getRoleColor(user.role)}`}>\n                      {getInitials(user.name)}\n                    </AvatarFallback>\n                  </Avatar>\n                  <div className=\"absolute -bottom-0.5 -right-0.5 w-3 h-3 bg-green-500 border-2 border-background rounded-full\" />\n                </div>\n                <div className=\"flex-1 min-w-0\">\n                  <p className=\"text-sm font-medium text-foreground truncate\">\n                    {user.name}\n                  </p>\n                  <div className=\"flex items-center space-x-2\">\n                    <Badge variant=\"secondary\" className=\"text-xs\">\n                      {user.role.replace('_', ' ')}\n                    </Badge>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":3893},"client/src/components/team-activity.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { useWebSocketContext } from \"@/contexts/websocket-context\";\nimport { useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { \n  Users, \n  UserPlus, \n  Calendar, \n  Briefcase, \n  FileText,\n  Clock,\n  Eye\n} from \"lucide-react\";\nimport { formatDistanceToNow } from \"date-fns\";\n\ninterface ActivityLog {\n  id: string;\n  userId: string;\n  action: string;\n  entityType: string;\n  entityId: string;\n  entityName: string;\n  details?: any;\n  createdAt: string;\n  userName?: string;\n}\n\nconst actionIcons: Record<string, any> = {\n  'candidate_created': UserPlus,\n  'candidate_updated': Users,\n  'job_created': Briefcase,\n  'job_updated': Briefcase,\n  'interview_scheduled': Calendar,\n  'interview_updated': Calendar,\n  'comment_added': FileText,\n  'resume_viewed': Eye,\n};\n\nconst actionColors: Record<string, string> = {\n  'candidate_created': 'bg-green-500',\n  'candidate_updated': 'bg-blue-500', \n  'job_created': 'bg-purple-500',\n  'job_updated': 'bg-purple-400',\n  'interview_scheduled': 'bg-orange-500',\n  'interview_updated': 'bg-orange-400',\n  'comment_added': 'bg-gray-500',\n  'resume_viewed': 'bg-indigo-500',\n};\n\nexport function TeamActivity() {\n  const [activities, setActivities] = useState<ActivityLog[]>([]);\n  const queryClient = useQueryClient();\n\n  const { data: activityData } = useQuery<ActivityLog[]>({\n    queryKey: [\"/api/activity\"],\n  });\n\n  const { isConnected, subscribe } = useWebSocketContext();\n  \n  // Handle real-time activity updates\n  useEffect(() => {\n    const unsubscribe = subscribe((message: any) => {\n      if (message.type === 'team_activity') {\n        const newActivity = message.payload;\n        setActivities(prev => [newActivity, ...prev.slice(0, 49)]); // Keep last 50 activities\n        \n        // Invalidate activity query to refresh\n        queryClient.invalidateQueries({ queryKey: [\"/api/activity\"] });\n      }\n    });\n    \n    return unsubscribe;\n  }, [subscribe, queryClient]);\n\n  useEffect(() => {\n    if (activityData) {\n      setActivities(activityData.slice(0, 50));\n    }\n  }, [activityData]);\n\n  const getActivityDescription = (activity: ActivityLog) => {\n    const userName = activity.userName || 'Someone';\n    \n    switch (activity.action) {\n      case 'candidate_created':\n        return `${userName} added new candidate ${activity.entityName}`;\n      case 'candidate_updated':\n        return `${userName} updated candidate ${activity.entityName}`;\n      case 'job_created':\n        return `${userName} posted new job ${activity.entityName}`;\n      case 'job_updated':\n        return `${userName} updated job ${activity.entityName}`;\n      case 'interview_scheduled':\n        return `${userName} scheduled interview with ${activity.entityName}`;\n      case 'interview_updated':\n        return `${userName} updated interview with ${activity.entityName}`;\n      case 'comment_added':\n        return `${userName} commented on ${activity.entityName}`;\n      case 'resume_viewed':\n        return `${userName} viewed resume for ${activity.entityName}`;\n      default:\n        return `${userName} performed ${activity.action} on ${activity.entityName}`;\n    }\n  };\n\n  return (\n    <Card className=\"h-full\">\n      <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n        <CardTitle className=\"text-sm font-medium\">Team Activity</CardTitle>\n        <div className=\"flex items-center space-x-2\">\n          <div className={`w-2 h-2 rounded-full ${isConnected ? 'bg-green-500' : 'bg-red-500'}`} />\n          <span className=\"text-xs text-muted-foreground\">\n            {isConnected ? 'Live' : 'Offline'}\n          </span>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <ScrollArea className=\"h-96\">\n          {activities.length === 0 ? (\n            <div className=\"text-center py-8 text-muted-foreground\">\n              <Clock className=\"w-8 h-8 mx-auto mb-2 opacity-50\" />\n              <p>No recent team activity</p>\n            </div>\n          ) : (\n            <div className=\"space-y-3\">\n              {activities.map((activity) => {\n                const IconComponent = actionIcons[activity.action] || FileText;\n                const iconColor = actionColors[activity.action] || 'bg-gray-500';\n                \n                return (\n                  <div key={activity.id} className=\"flex items-start space-x-3 p-2 rounded-lg hover:bg-accent/50 transition-colors\">\n                    <div className={`w-8 h-8 rounded-full ${iconColor} flex items-center justify-center flex-shrink-0`}>\n                      <IconComponent className=\"w-4 h-4 text-white\" />\n                    </div>\n                    <div className=\"flex-1 min-w-0\">\n                      <p className=\"text-sm font-medium text-foreground\">\n                        {getActivityDescription(activity)}\n                      </p>\n                      <div className=\"flex items-center justify-between mt-1\">\n                        <Badge variant=\"secondary\" className=\"text-xs\">\n                          {activity.entityType}\n                        </Badge>\n                        <span className=\"text-xs text-muted-foreground\">\n                          {formatDistanceToNow(new Date(activity.createdAt), { addSuffix: true })}\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          )}\n        </ScrollArea>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":5695},"client/src/contexts/language-context.tsx":{"content":"import { createContext, useContext, useState, useEffect, ReactNode } from 'react';\n\n// 支持的语言类型\nexport type Language = 'en' | 'zh';\n\n// 语言上下文类型\ninterface LanguageContextType {\n  language: Language;\n  setLanguage: (lang: Language) => void;\n  t: (key: string, params?: Record<string, string>) => string;\n}\n\n// 翻译数据结构\ninterface Translations {\n  [key: string]: {\n    en: string;\n    zh: string;\n  };\n}\n\n// 翻译文本数据\nconst translations: Translations = {\n  // 通用\n  'common.loading': { en: 'Loading...', zh: '加载中...' },\n  'common.save': { en: 'Save', zh: '保存' },\n  'common.cancel': { en: 'Cancel', zh: '取消' },\n  'common.delete': { en: 'Delete', zh: '删除' },\n  'common.edit': { en: 'Edit', zh: '编辑' },\n  'common.add': { en: 'Add', zh: '添加' },\n  'common.search': { en: 'Search', zh: '搜索' },\n  'common.submit': { en: 'Submit', zh: '提交' },\n  'common.close': { en: 'Close', zh: '关闭' },\n  'common.back': { en: 'Back', zh: '返回' },\n  'common.next': { en: 'Next', zh: '下一步' },\n  'common.previous': { en: 'Previous', zh: '上一步' },\n  'common.confirm': { en: 'Confirm', zh: '确认' },\n  'common.view': { en: 'View', zh: '查看' },\n  'common.download': { en: 'Download', zh: '下载' },\n  'common.upload': { en: 'Upload', zh: '上传' },\n  'common.refresh': { en: 'Refresh', zh: '刷新' },\n  'common.filter': { en: 'Filter', zh: '筛选' },\n  'common.export': { en: 'Export', zh: '导出' },\n  'common.import': { en: 'Import', zh: '导入' },\n  'common.action': { en: 'Action', zh: '操作' },\n\n  // 品牌\n  'brand.name': { en: 'AI Recruit', zh: 'AI 招聘' },\n  'brand.tagline': { en: 'Smart Hiring Platform', zh: '智能招聘平台' },\n\n  // 导航\n  'nav.dashboard': { en: 'Dashboard', zh: '仪表板' },\n  'nav.candidates': { en: 'Candidates', zh: '候选人' },\n  'nav.jobs': { en: 'Jobs', zh: '职位' },\n  'nav.interviews': { en: 'Interviews', zh: '面试' },\n  'nav.assistant': { en: 'AI Assistant', zh: 'AI 助手' },\n  'nav.reports': { en: 'Reports', zh: '报告' },\n  'nav.funnelAnalysis': { en: 'Funnel Analysis', zh: '漏斗分析' },\n  'nav.preferences': { en: 'Preferences', zh: '偏好设置' },\n  'nav.templates': { en: 'Templates', zh: '模板' },\n  'nav.analytics': { en: 'Analytics', zh: '分析' },\n  'nav.settings': { en: 'Settings', zh: '设置' },\n  'nav.profile': { en: 'Profile', zh: '个人资料' },\n  'nav.logout': { en: 'Logout', zh: '退出登录' },\n\n  // 仪表板\n  'dashboard.title': { en: 'HR Recruitment Dashboard', zh: 'HR 招聘仪表板' },\n  'dashboard.totalCandidates': { en: 'Total Candidates', zh: '候选人总数' },\n  'dashboard.activeJobs': { en: 'Active Jobs', zh: '活跃职位' },\n  'dashboard.upcomingInterviews': { en: 'Upcoming Interviews', zh: '即将到来的面试' },\n  'dashboard.teamActivity': { en: 'Team Activity', zh: '团队动态' },\n  'dashboard.teamOnline': { en: 'Team Online', zh: '在线团队' },\n  'dashboard.notifications': { en: 'Notifications', zh: '通知' },\n  'dashboard.recentActivity': { en: 'Recent Activity', zh: '最近活动' },\n  'dashboard.quickActions': { en: 'Quick Actions', zh: '快速操作' },\n  'dashboard.addCandidate': { en: 'Add Candidate', zh: '添加候选人' },\n  'dashboard.postJob': { en: 'Post Job', zh: '发布职位' },\n  'dashboard.scheduleInterview': { en: 'Schedule Interview', zh: '安排面试' },\n  'dashboard.viewReports': { en: 'View Reports', zh: '查看报告' },\n  'dashboard.recruitmentFunnel': { en: 'Recruitment Funnel', zh: '招聘漏斗' },\n  'dashboard.aiInsights': { en: 'AI Insights', zh: 'AI 洞察' },\n  'dashboard.topCandidates': { en: 'Top Matching Candidates', zh: '最佳匹配候选人' },\n  'dashboard.viewAllCandidates': { en: 'View all candidates', zh: '查看所有候选人' },\n  'dashboard.openAiAssistant': { en: 'Open AI Assistant', zh: '打开 AI 助手' },\n  'dashboard.welcomeMessage': { en: 'Welcome back, Sarah! Here\\'s your recruitment overview.', zh: '欢迎回来，Sarah！这是您的招聘概览。' },\n  'dashboard.interviewRate': { en: 'Interview Rate', zh: '面试率' },\n  'dashboard.hireRate': { en: 'Hire Rate', zh: '录用率' },\n  'dashboard.fromLastMonth': { en: 'from last month', zh: '与上月相比' },\n  'dashboard.newThisWeek': { en: 'new this week', zh: '本周新增' },\n  'dashboard.improvement': { en: 'improvement', zh: '提升' },\n  'dashboard.fromTarget': { en: 'from target', zh: '距离目标' },\n  'dashboard.last30Days': { en: 'Last 30 days', zh: '最近 30 天' },\n  'dashboard.last90Days': { en: 'Last 90 days', zh: '最近 90 天' },\n  'dashboard.thisYear': { en: 'This year', zh: '今年' },\n\n  // AI 洞察\n  'insights.candidateMatch': { en: 'candidates match the Senior Developer position requirements', zh: '位候选人符合高级开发工程师职位要求' },\n  'insights.interviewRate': { en: 'Interview completion rate increased by 15% this month', zh: '本月面试完成率提高了 15%' },\n  'insights.urgentCandidates': { en: 'high-priority candidates haven\\'t been contacted yet', zh: '位高优先级候选人尚未联系' },\n\n  // 招聘漏斗\n  'funnel.applicationsReceived': { en: 'Applications Received', zh: '收到申请' },\n  'funnel.screeningPassed': { en: 'Screening Passed', zh: '通过筛选' },\n  'funnel.interviewsScheduled': { en: 'Interviews Scheduled', zh: '安排面试' },\n  'funnel.hired': { en: 'Hired', zh: '已录用' },\n\n  // 候选人\n  'candidates.title': { en: 'Candidates', zh: '候选人' },\n  'candidates.addNew': { en: 'Add New Candidate', zh: '添加新候选人' },\n  'candidates.name': { en: 'Name', zh: '姓名' },\n  'candidates.email': { en: 'Email', zh: '邮箱' },\n  'candidates.phone': { en: 'Phone', zh: '电话' },\n  'candidates.position': { en: 'Position', zh: '职位' },\n  'candidates.status': { en: 'Status', zh: '状态' },\n  'candidates.experience': { en: 'Experience', zh: '工作经验' },\n  'candidates.skills': { en: 'Skills', zh: '技能' },\n  'candidates.resume': { en: 'Resume', zh: '简历' },\n  'candidates.notes': { en: 'Notes', zh: '备注' },\n  'candidates.createdAt': { en: 'Created At', zh: '创建时间' },\n  'candidates.uploadResume': { en: 'Upload Resume', zh: '上传简历' },\n  'candidates.analyzeResume': { en: 'Analyze Resume', zh: '分析简历' },\n  'candidates.matchJobs': { en: 'Match Jobs', zh: '匹配职位' },\n  'candidates.matchScore': { en: 'Match Score', zh: '匹配度' },\n  'candidates.viewProfile': { en: 'View Profile', zh: '查看资料' },\n  'candidates.noCandidates': { en: 'No candidates found', zh: '未找到候选人' },\n  'candidates.addCandidatesHint': { en: 'Add candidates to see them here', zh: '添加候选人以在此显示' },\n\n  // 候选人状态\n  'status.applied': { en: 'Applied', zh: '已申请' },\n  'status.screening': { en: 'Screening', zh: '筛选中' },\n  'status.interviewing': { en: 'Interviewing', zh: '面试中' },\n  'status.offer': { en: 'Offer', zh: '已录用' },\n  'status.hired': { en: 'Hired', zh: '已入职' },\n  'status.rejected': { en: 'Rejected', zh: '已拒绝' },\n\n  // 职位\n  'jobs.title': { en: 'Jobs', zh: '职位' },\n  'jobs.addNew': { en: 'Add New Job', zh: '发布新职位' },\n  'jobs.jobTitle': { en: 'Job Title', zh: '职位名称' },\n  'jobs.department': { en: 'Department', zh: '部门' },\n  'jobs.location': { en: 'Location', zh: '工作地点' },\n  'jobs.type': { en: 'Job Type', zh: '工作类型' },\n  'jobs.salary': { en: 'Salary', zh: '薪资' },\n  'jobs.description': { en: 'Description', zh: '职位描述' },\n  'jobs.requirements': { en: 'Requirements', zh: '职位要求' },\n  'jobs.benefits': { en: 'Benefits', zh: '福利待遇' },\n  'jobs.postedDate': { en: 'Posted Date', zh: '发布日期' },\n  'jobs.deadline': { en: 'Application Deadline', zh: '申请截止日期' },\n  'jobs.applicants': { en: 'Applicants', zh: '申请人数' },\n\n  // 工作类型\n  'jobType.fullTime': { en: 'Full-time', zh: '全职' },\n  'jobType.partTime': { en: 'Part-time', zh: '兼职' },\n  'jobType.contract': { en: 'Contract', zh: '合同工' },\n  'jobType.internship': { en: 'Internship', zh: '实习' },\n  'jobType.remote': { en: 'Remote', zh: '远程' },\n\n  // 面试\n  'interviews.title': { en: 'Interviews', zh: '面试' },\n  'interviews.schedule': { en: 'Schedule Interview', zh: '安排面试' },\n  'interviews.candidate': { en: 'Candidate', zh: '候选人' },\n  'interviews.position': { en: 'Position', zh: '职位' },\n  'interviews.interviewer': { en: 'Interviewer', zh: '面试官' },\n  'interviews.date': { en: 'Date', zh: '日期' },\n  'interviews.time': { en: 'Time', zh: '时间' },\n  'interviews.type': { en: 'Interview Type', zh: '面试类型' },\n  'interviews.notes': { en: 'Interview Notes', zh: '面试记录' },\n  'interviews.feedback': { en: 'Feedback', zh: '反馈' },\n  'interviews.rating': { en: 'Rating', zh: '评分' },\n  'interviews.recommendation': { en: 'Recommendation', zh: '推荐意见' },\n\n  // 面试类型\n  'interviewType.phone': { en: 'Phone', zh: '电话面试' },\n  'interviewType.video': { en: 'Video', zh: '视频面试' },\n  'interviewType.inPerson': { en: 'In-person', zh: '现场面试' },\n  'interviewType.technical': { en: 'Technical', zh: '技术面试' },\n  'interviewType.hr': { en: 'HR', zh: 'HR面试' },\n  'interviewType.final': { en: 'Final', zh: '终面' },\n\n  // AI 助手\n  'assistant.title': { en: 'AI Assistant', zh: 'AI 助手' },\n  'assistant.askQuestion': { en: 'Ask a question...', zh: '问个问题...' },\n  'assistant.typeMessage': { en: 'Type your message...', zh: '输入您的消息...' },\n  'assistant.send': { en: 'Send', zh: '发送' },\n  'assistant.clear': { en: 'Clear Chat', zh: '清空对话' },\n  'assistant.suggestions': { en: 'Suggestions', zh: '建议' },\n  'assistant.templates': { en: 'Template Library', zh: '模板库' },\n  'assistant.history': { en: 'Chat History', zh: '对话历史' },\n\n  // 团队协作\n  'team.activity': { en: 'Team Activity', zh: '团队动态' },\n  'team.online': { en: 'Team Online', zh: '在线团队' },\n  'team.noActivity': { en: 'No recent activity', zh: '暂无最近活动' },\n  'team.noOneOnline': { en: 'No one is online', zh: '暂无在线成员' },\n  'team.connectionStatus': { en: 'Live', zh: '实时' },\n  'team.offline': { en: 'Offline', zh: '离线' },\n\n  // 通知\n  'notifications.title': { en: 'Notifications', zh: '通知' },\n  'notifications.noNotifications': { en: 'No notifications', zh: '暂无通知' },\n  'notifications.markAllRead': { en: 'Mark all as read', zh: '全部标记为已读' },\n  'notifications.unread': { en: 'unread', zh: '条未读' },\n\n  // 表单验证\n  'validation.required': { en: 'This field is required', zh: '此字段为必填项' },\n  'validation.email': { en: 'Please enter a valid email', zh: '请输入有效的邮箱地址' },\n  'validation.phone': { en: 'Please enter a valid phone number', zh: '请输入有效的电话号码' },\n  'validation.minLength': { en: 'Minimum {count} characters required', zh: '至少需要 {count} 个字符' },\n  'validation.maxLength': { en: 'Maximum {count} characters allowed', zh: '最多允许 {count} 个字符' },\n\n  // 语言切换\n  'language.switch': { en: 'Switch Language', zh: '切换语言' },\n  'language.chinese': { en: '中文', zh: '中文' },\n  'language.english': { en: 'English', zh: 'English' },\n\n  // 错误信息\n  'error.generic': { en: 'Something went wrong', zh: '出现错误' },\n  'error.network': { en: 'Network error', zh: '网络错误' },\n  'error.notFound': { en: 'Not found', zh: '未找到' },\n  'error.unauthorized': { en: 'Unauthorized', zh: '未授权' },\n  'error.forbidden': { en: 'Forbidden', zh: '禁止访问' },\n  'error.serverError': { en: 'Server error', zh: '服务器错误' },\n\n  // 成功信息\n  'success.saved': { en: 'Saved successfully', zh: '保存成功' },\n  'success.deleted': { en: 'Deleted successfully', zh: '删除成功' },\n  'success.updated': { en: 'Updated successfully', zh: '更新成功' },\n  'success.created': { en: 'Created successfully', zh: '创建成功' },\n  'success.uploaded': { en: 'Uploaded successfully', zh: '上传成功' },\n\n  // 职位页面\n  'jobs.pageTitle': { en: 'Job Postings', zh: '职位发布' },\n  'jobs.pageSubtitle': { en: 'Manage your open positions and track applications', zh: '管理您的职位空缺并跟踪申请' },\n  'jobs.createJob': { en: 'Create Job', zh: '创建职位' },\n  'jobs.searchPlaceholder': { en: 'Search jobs...', zh: '搜索职位...' },\n  'jobs.allStatuses': { en: 'All Statuses', zh: '所有状态' },\n  'jobs.active': { en: 'Active', zh: '有效' },\n  'jobs.paused': { en: 'Paused', zh: '暂停' },\n  'jobs.closed': { en: 'Closed', zh: '关闭' },\n  'jobs.allDepartments': { en: 'All Departments', zh: '所有部门' },\n  'jobs.moreFilters': { en: 'More Filters', zh: '更多筛选' },\n  'jobs.jobCount': { en: '{filtered} of {total} jobs', zh: '{filtered} / {total} 个职位' },\n  'jobs.noJobsFound': { en: 'No jobs found', zh: '未找到职位' },\n  'jobs.noJobsYet': { en: 'No jobs yet', zh: '暂无职位' },\n  'jobs.adjustFilters': { en: 'Try adjusting your search or filters', zh: '请调整搜索条件或筛选器' },\n  'jobs.getStartedHint': { en: 'Get started by creating your first job posting', zh: '创建您的第一个职位来开始吧' },\n  'jobs.createFirstJob': { en: 'Create First Job', zh: '创建第一个职位' },\n  'jobs.failedToLoad': { en: 'Failed to load jobs', zh: '职位加载失败' },\n  'jobs.retry': { en: 'Retry', zh: '重试' },\n\n  // 面试页面\n  'interviews.pageTitle': { en: 'Interviews', zh: '面试' },\n  'interviews.pageSubtitle': { en: 'Schedule and manage candidate interviews', zh: '安排和管理候选人面试' },\n  'interviews.scheduleInterview': { en: 'Schedule Interview', zh: '安排面试' },\n  'interviews.searchPlaceholder': { en: 'Search interviews...', zh: '搜索面试...' },\n  'interviews.scheduled': { en: 'Scheduled', zh: '已安排' },\n  'interviews.completed': { en: 'Completed', zh: '已完成' },\n  'interviews.cancelled': { en: 'Cancelled', zh: '已取消' },\n  'interviews.noShow': { en: 'No Show', zh: '未出席' },\n  'interviews.allTypes': { en: 'All Types', zh: '所有类型' },\n  'interviews.phone': { en: 'Phone', zh: '电话' },\n  'interviews.video': { en: 'Video', zh: '视频' },\n  'interviews.inPerson': { en: 'In Person', zh: '现场' },\n  'interviews.today': { en: 'Today', zh: '今天' },\n  'interviews.total': { en: 'Total', zh: '总计' },\n  'interviews.interviewCount': { en: '{filtered} of {total} interviews', zh: '{filtered} / {total} 个面试' },\n  'interviews.noInterviewsFound': { en: 'No interviews found', zh: '未找到面试' },\n  'interviews.noInterviewsScheduled': { en: 'No interviews scheduled', zh: '暂无安排面试' },\n  'interviews.getStartedInterview': { en: 'Get started by scheduling your first interview', zh: '安排您的第一次面试来开始吧' },\n  'interviews.scheduleFirstInterview': { en: 'Schedule First Interview', zh: '安排第一次面试' },\n  'interviews.failedToLoad': { en: 'Failed to load interviews', zh: '面试加载失败' },\n\n  // AI助手页面\n  'assistant.pageTitle': { en: 'AI Assistant', zh: 'AI 助手' },\n  'assistant.pageSubtitle': { en: 'Get AI-powered help with your recruitment tasks', zh: '获得AI驱动的招聘任务帮助' },\n  'assistant.quickActions': { en: 'Quick Actions', zh: '快速操作' },\n  'assistant.analyzeResume': { en: 'Analyze Resume', zh: '简历分析' },\n  'assistant.analyzeResumeDesc': { en: 'Get AI insights on candidate resumes', zh: '获取候选人简历的AI洞察' },\n  'assistant.matchCandidates': { en: 'Match Candidates', zh: '候选人匹配' },\n  'assistant.matchCandidatesDesc': { en: 'Find best candidates for a job', zh: '为职位找到最佳候选人' },\n  'assistant.generateQuestions': { en: 'Generate Questions', zh: '生成问题' },\n  'assistant.generateQuestionsDesc': { en: 'Create interview questions', zh: '创建面试问题' },\n  'assistant.jobDescription': { en: 'Job Description', zh: '职位描述' },\n  'assistant.jobDescriptionDesc': { en: 'Optimize job postings', zh: '优化职位发布' },\n  'assistant.recruitmentInsights': { en: 'Recruitment Insights', zh: '招聘洞察' },\n  'assistant.recruitmentInsightsDesc': { en: 'Get data-driven recommendations', zh: '获取数据驱动的建议' },\n  'assistant.bestPractices': { en: 'Best Practices', zh: '最佳实践' },\n  'assistant.bestPracticesDesc': { en: 'Learn recruitment strategies', zh: '学习招聘策略' },\n  'assistant.welcomeMessage': { en: 'Hello! I\\'m your AI recruitment assistant. How can I help you today?', zh: '您好！我是您的AI招聘助手。今天我能为您做些什么？' },\n  'assistant.initialPromptAnalyze': { en: 'I\\'d like to analyze a candidate\\'s resume. Can you help me understand what to look for and how to extract key information?', zh: '我想分析候选人的简历。您能帮我理解需要关注什么以及如何提取关键信息吗？' },\n  'assistant.initialPromptMatch': { en: 'I need help matching candidates to job positions. What factors should I consider for the best matches?', zh: '我需要帮助将候选人与职位匹配。我应该考虑哪些因素来获得最佳匹配？' },\n  'assistant.initialPromptQuestions': { en: 'Can you help me generate relevant interview questions for a specific role?', zh: '您能帮我为特定角色生成相关的面试问题吗？' },\n  'assistant.initialPromptOptimize': { en: 'I want to optimize a job description to attract better candidates. What elements should I focus on?', zh: '我想优化职位描述以吸引更好的候选人。我应该关注哪些要素？' },\n  'assistant.initialPromptInsights': { en: 'Can you provide insights on our recruitment data and suggest improvements to our hiring process?', zh: '您能提供我们招聘数据的洞察并建议改进我们的招聘流程吗？' },\n  'assistant.initialPromptPractices': { en: 'What are the current best practices in recruitment and talent acquisition?', zh: '目前招聘和人才获取的最佳实践是什么？' },\n  'assistant.backToActions': { en: 'Back to Actions', zh: '返回操作' },\n  'assistant.chatPlaceholder': { en: 'Type your message...', zh: '输入您的消息...' },\n  'assistant.sendMessage': { en: 'Send message', zh: '发送消息' },\n  'assistant.errorResponse': { en: 'Failed to get AI response. Please try again.', zh: 'AI响应失败，请重试。' },\n  'assistant.copyMessage': { en: 'Copy message', zh: '复制消息' },\n  'assistant.likeMessage': { en: 'Like message', zh: '点赞消息' },\n  'assistant.dislikeMessage': { en: 'Dislike message', zh: '点踩消息' },\n\n  // 候选人页面\n  'candidates.pageTitle': { en: 'Candidates', zh: '候选人' },\n  'candidates.pageSubtitle': { en: 'Manage and track your candidate pipeline', zh: '管理和跟踪您的候选人管道' },\n  'candidates.importCandidates': { en: 'Import', zh: '导入' },\n  'candidates.exportCandidates': { en: 'Export', zh: '导出' },\n  'candidates.addCandidate': { en: 'Add Candidate', zh: '添加候选人' },\n  'candidates.addNewCandidate': { en: 'Add New Candidate', zh: '添加新候选人' },\n  'candidates.searchPlaceholder': { en: 'Search candidates...', zh: '搜索候选人...' },\n  'candidates.allSources': { en: 'All Sources', zh: '所有来源' },\n  'candidates.manual': { en: 'Manual', zh: '手动' },\n  'candidates.linkedin': { en: 'LinkedIn', zh: 'LinkedIn' },\n  'candidates.jobBoard': { en: 'Job Board', zh: '招聘网站' },\n  'candidates.referral': { en: 'Referral', zh: '推荐' },\n  'candidates.candidateCount': { en: '{filtered} of {total} candidates', zh: '{filtered} / {total} 个候选人' },\n  'candidates.applied': { en: 'Applied', zh: '已申请' },\n  'candidates.screening': { en: 'Screening', zh: '筛选中' },\n  'candidates.interview': { en: 'Interview', zh: '面试中' },\n  'candidates.hired': { en: 'Hired', zh: '已录用' },\n  'candidates.noCandidatesFound': { en: 'No candidates found', zh: '未找到候选人' },\n  'candidates.noCandidatesYet': { en: 'No candidates yet', zh: '暂无候选人' },\n  'candidates.getStartedCandidate': { en: 'Get started by adding your first candidate', zh: '添加您的第一个候选人来开始吧' },\n  'candidates.addFirstCandidate': { en: 'Add First Candidate', zh: '添加第一个候选人' },\n  'candidates.failedToLoad': { en: 'Failed to load candidates', zh: '候选人加载失败' },\n  'candidates.candidateCreated': { en: 'Candidate created', zh: '候选人已创建' },\n  'candidates.candidateCreatedDesc': { en: 'New candidate has been added successfully.', zh: '新候选人已成功添加。' },\n  'candidates.createCandidateError': { en: 'Failed to create candidate.', zh: '创建候选人失败。' },\n  'candidates.resumeUpload': { en: 'Resume Upload', zh: '简历上传' },\n  'candidates.resumeUploadDesc': { en: 'Upload and analyze candidate resume', zh: '上传并分析候选人简历' },\n  'candidates.backToCandidates': { en: 'Back to Candidates', zh: '返回候选人' },\n  'candidates.resumeAnalysisComplete': { en: 'Resume analysis complete', zh: '简历分析完成' },\n  'candidates.resumeAnalysisCompleteDesc': { en: 'Candidate profile has been updated with AI insights.', zh: '候选人资料已更新AI洞察。' },\n  'candidates.formName': { en: 'Name *', zh: '姓名 *' },\n  'candidates.formEmail': { en: 'Email *', zh: '邮箱 *' },\n  'candidates.formPhone': { en: 'Phone', zh: '电话' },\n  'candidates.formPosition': { en: 'Position', zh: '职位' },\n  'candidates.formLocation': { en: 'Location', zh: '地点' },\n  'candidates.formSource': { en: 'Source', zh: '来源' },\n  'candidates.createCandidate': { en: 'Create Candidate', zh: '创建候选人' },\n  'candidates.creating': { en: 'Creating...', zh: '创建中...' },\n\n  // 模板页面\n  'templates.pageTitle': { en: 'Prompt Templates', zh: '提示模板' },\n  'templates.pageSubtitle': { en: 'Manage AI prompt templates for consistent recruitment workflows', zh: '管理AI提示模板以保持招聘流程的一致性' },\n\n  // 404错误页面\n  'notFound.title': { en: '404 Page Not Found', zh: '404 页面未找到' },\n  'notFound.description': { en: 'Did you forget to add the page to the router?', zh: '您是否忘记将页面添加到路由器中？' },\n};\n\n// 创建语言上下文\nconst LanguageContext = createContext<LanguageContextType | undefined>(undefined);\n\n// 语言提供者组件\nexport function LanguageProvider({ children }: { children: ReactNode }) {\n  const [language, setLanguage] = useState<Language>(() => {\n    // 从 localStorage 读取保存的语言设置，默认为英文\n    const saved = localStorage.getItem('preferred-language');\n    return (saved as Language) || 'en';\n  });\n\n  // 保存语言设置到 localStorage\n  useEffect(() => {\n    localStorage.setItem('preferred-language', language);\n  }, [language]);\n\n  // 翻译函数\n  const t = (key: string, params?: Record<string, string>): string => {\n    const translation = translations[key];\n    if (!translation) {\n      console.warn(`Translation key not found: ${key}`);\n      return key;\n    }\n\n    let text = translation[language];\n    \n    // 处理参数替换\n    if (params) {\n      Object.entries(params).forEach(([param, value]) => {\n        text = text.replace(`{${param}}`, value);\n      });\n    }\n\n    return text;\n  };\n\n  return (\n    <LanguageContext.Provider value={{ language, setLanguage, t }}>\n      {children}\n    </LanguageContext.Provider>\n  );\n}\n\n// 使用语言上下文的 Hook\nexport function useLanguage() {\n  const context = useContext(LanguageContext);\n  if (context === undefined) {\n    throw new Error('useLanguage must be used within a LanguageProvider');\n  }\n  return context;\n}","size_bytes":23758},"client/src/contexts/websocket-context.tsx":{"content":"import { createContext, useContext, useEffect, useRef, useState, useCallback, ReactNode } from 'react';\nimport { useToast } from '@/hooks/use-toast';\nimport { useLocation } from 'wouter';\n\ninterface WSMessage {\n  type: string;\n  payload?: any;\n}\n\ninterface WebSocketContextType {\n  isConnected: boolean;\n  sendMessage: (message: WSMessage) => void;\n  subscribe: (callback: (message: WSMessage) => void) => () => void;\n  lastMessage: WSMessage | null;\n}\n\nconst WebSocketContext = createContext<WebSocketContextType | null>(null);\n\ninterface WebSocketProviderProps {\n  children: ReactNode;\n  autoConnect?: boolean;\n}\n\nexport function WebSocketProvider({ children, autoConnect = true }: WebSocketProviderProps) {\n  const [isConnected, setIsConnected] = useState(false);\n  const [lastMessage, setLastMessage] = useState<WSMessage | null>(null);\n  const ws = useRef<WebSocket | null>(null);\n  const subscribers = useRef<Set<(message: WSMessage) => void>>(new Set());\n  const reconnectAttempts = useRef(0);\n  const maxReconnectAttempts = 10;\n  const { toast } = useToast();\n  const [location] = useLocation();\n\n  // Get the correct WebSocket URL based on current protocol\n  const getWebSocketURL = useCallback(() => {\n    const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n    const host = window.location.host;\n    return `${protocol}//${host}`;\n  }, []);\n\n  // Calculate reconnection delay with exponential backoff and jitter\n  const getReconnectDelay = useCallback((attempt: number) => {\n    const baseDelay = Math.min(1000 * Math.pow(2, attempt), 30000); // Max 30 seconds\n    const jitter = Math.random() * 1000; // Add up to 1 second of jitter\n    return baseDelay + jitter;\n  }, []);\n\n  const connect = useCallback(() => {\n    if (ws.current?.readyState === WebSocket.OPEN) {\n      return; // Already connected\n    }\n\n    try {\n      const wsUrl = getWebSocketURL();\n      ws.current = new WebSocket(wsUrl);\n\n      ws.current.onopen = () => {\n        setIsConnected(true);\n        reconnectAttempts.current = 0;\n        \n        // Authenticate with user ID (mock for now)\n        const userId = \"hr-user-1\"; // In real app, this would come from auth context\n        ws.current?.send(JSON.stringify({\n          type: 'authenticate',\n          payload: { userId }\n        }));\n\n        // Send current page\n        ws.current?.send(JSON.stringify({\n          type: 'page_change',\n          payload: { page: location }\n        }));\n      };\n\n      ws.current.onmessage = (event) => {\n        try {\n          const message: WSMessage = JSON.parse(event.data);\n          setLastMessage(message);\n          \n          // Notify all subscribers\n          subscribers.current.forEach(callback => {\n            try {\n              callback(message);\n            } catch (error) {\n              console.error('Error in WebSocket message subscriber:', error);\n            }\n          });\n\n          // Handle global message types\n          switch (message.type) {\n            case 'notification':\n              toast({\n                title: message.payload.title,\n                description: message.payload.message,\n              });\n              break;\n            case 'pong':\n              // Heartbeat response - connection is alive\n              break;\n          }\n        } catch (error) {\n          console.error('Error parsing WebSocket message:', error);\n        }\n      };\n\n      ws.current.onclose = () => {\n        setIsConnected(false);\n        \n        // Attempt to reconnect if auto-connect is enabled\n        if (autoConnect && reconnectAttempts.current < maxReconnectAttempts) {\n          const delay = getReconnectDelay(reconnectAttempts.current);\n          reconnectAttempts.current++;\n          \n          setTimeout(() => {\n            connect();\n          }, delay);\n        }\n      };\n\n      ws.current.onerror = (error) => {\n        console.error('WebSocket error:', error);\n        setIsConnected(false);\n      };\n\n    } catch (error) {\n      console.error('Failed to create WebSocket connection:', error);\n      setIsConnected(false);\n    }\n  }, [getWebSocketURL, autoConnect, toast, location, getReconnectDelay]);\n\n  const disconnect = useCallback(() => {\n    if (ws.current) {\n      ws.current.close();\n      ws.current = null;\n    }\n  }, []);\n\n  const sendMessage = useCallback((message: WSMessage) => {\n    if (ws.current && ws.current.readyState === WebSocket.OPEN) {\n      ws.current.send(JSON.stringify(message));\n    } else {\n      console.warn('WebSocket is not connected');\n    }\n  }, []);\n\n  const subscribe = useCallback((callback: (message: WSMessage) => void) => {\n    subscribers.current.add(callback);\n    \n    // Return unsubscribe function\n    return () => {\n      subscribers.current.delete(callback);\n    };\n  }, []);\n\n  // Handle navigation changes\n  useEffect(() => {\n    if (isConnected) {\n      sendMessage({\n        type: 'page_change',\n        payload: { page: location }\n      });\n    }\n  }, [location, isConnected, sendMessage]);\n\n  // Connect on mount\n  useEffect(() => {\n    if (autoConnect) {\n      connect();\n    }\n\n    return () => {\n      disconnect();\n    };\n  }, [autoConnect, connect, disconnect]);\n\n  // Heartbeat mechanism\n  useEffect(() => {\n    if (!isConnected) return;\n\n    const heartbeatInterval = setInterval(() => {\n      sendMessage({ type: 'ping' });\n    }, 30000); // Send ping every 30 seconds\n\n    return () => {\n      clearInterval(heartbeatInterval);\n    };\n  }, [isConnected, sendMessage]);\n\n  const contextValue: WebSocketContextType = {\n    isConnected,\n    sendMessage,\n    subscribe,\n    lastMessage,\n  };\n\n  return (\n    <WebSocketContext.Provider value={contextValue}>\n      {children}\n    </WebSocketContext.Provider>\n  );\n}\n\nexport function useWebSocketContext() {\n  const context = useContext(WebSocketContext);\n  if (!context) {\n    throw new Error('useWebSocketContext must be used within a WebSocketProvider');\n  }\n  return context;\n}","size_bytes":5945}},"version":1}